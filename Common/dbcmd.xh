///////////////////////////////////////////////////////////////////////////
// DbCmds.xh
//
// XSharp Database commands
//
// Copyright (c) XSharp BV.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  
// See License.txt in the project root for license information.
//
// IMPORTANT:  Functions beginning with an underscore
//             character are reserved, version-dependent functions.
//             These functions should not be called directly.
//
// Caution: do not modify this file. It will be overwritten during product updates
//

#ifndef DBCMD_XH

#define DBCMD_XH


****
*  DB
*

#command SELECT <whatever>              => DbSelectArea( <(whatever)> )
#command SELECT <f>([<list,...>])       => DbSelectArea( <f>(<list>) )

#command USE                            => DbCloseArea()

#command USE <(db)>                                                     ;
             [VIA <rdd>]                                                ;
             [ALIAS <a>]                                                ;
             [<new: NEW>]                                               ;
             [<ex: EXCLUSIVE>]                                          ;
             [<sh: SHARED>]                                             ;
             [<ro: READONLY,NOUPDATE>]                                  ;
             [INDEX <(index1)> [, <(indexn)>]]                          ;
                                                                        ;
      => DbUseArea(                                                     ;
                    <.new.>, <rdd>, <(db)>, <(a)>,                      ;
                    if(<.sh.> .or. <.ex.>, !<.ex.>, NIL), <.ro.>        ;
                  )                                                     ;
                                                                        ;
      [; DbSetIndex( <(index1)> )]                                      ;
      [; DbSetIndex( <(indexn)> )]


#command SET INDEX TO [ <(index1)> [, <(indexn)>]]                      ;
                                                                        ;
      => DbClearIndex()                                                 ;
                                                                        ;
      [; DbSetIndex( <(index1)> )]                                      ;
      [; DbSetIndex( <(indexn)> )]


#command INDEX ON <key> TO <(file)> [<u: UNIQUE>]                       ;
      => dbCreateIndex(                                                 ;
                        <(file)>, <"key">, <{key}>,                     ;
                        IIF( <.u.>, TRUE, NIL )                           ;
                      )

#command REINDEX                => DbReindex()
#command SET ORDER TO <n>       => DbSetOrder( <n> )
#command SET ORDER TO           => DbSetOrder(0)

#command APPEND BLANK           				=> DbAppend()
#command PACK                   				=> DbPack()
#command ZAP                    				=> DbZap()
#command UNLOCK [RECORD <rcd>]  				=> DbUnlock(<rcd>)
#command UNLOCK ALL             				=> DbUnlockAll()
#command COMMIT                 				=> DbCommitAll()

#command GOTO <n>               => DbGoto(<n>)
#command GO <n>                 => DbGoto(<n>)
#command GOTO TOP               => DbGoTop()
#command GO TOP                 => DbGoTop()
#command GOTO BOTTOM            => DbGoBottom()
#command GO BOTTOM              => DbGoBottom()

#command SKIP                   => DbSkip(1)
#command SKIP <n>               => DbSkip( <n> )

#command SEEK <xpr>  [<soft:SOFTSEEK>] [<lst:LAST>]  => dbSeek( <xpr> , <.soft.>, <.lst.>)

#command SET FILTER TO          => dbClearFilter()
#command SET FILTER TO <xpr>    => dbSetFilter( <{xpr}>, <"xpr"> )

#command SET FILTER TO <x:&>                                            ;
      => IF ( Empty(<(x)>) )                                            ;
       ;    DbClearFilter()                                             ;
       ; ELSE                                                           ;
       ;    DbSetFilter( <{x}>, <(x)> )                                 ;
       ; END

#command REPLACE [ <f1> WITH <x1> [, <fn> WITH <xn>] ]                  ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => DbEval(                                                        ;
                 {|| _FIELD-><f1> := <x1> [, _FIELD-><fn> := <xn>]},    ;
                 <{FOR}>, <{WHILE}>, <NEXT>, <rec>, <.rest.>            ;
               )

** Todo: Add FoxPro NoOptimize clause

#command REPLACE <f1> WITH <v1> [, <fN> WITH <vN> ]                     ;
      => _FIELD-><f1> := <v1> [; _FIELD-><fN> := <vN>]

#command DELETE                                                         ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => DbEval(                                                        ;
                 {|| DbDelete()},                                       ;
                 <{FOR}>, <{WHILE}>, <NEXT>, <rec>, <.rest.>            ;
               )

#command DELETE                 =>  DbDelete()

** Todo: Add FoxPro NoOptimize clause


#command RECALL                                                         ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => DBEval(                                                        ;
                 {|| DbRecall()},                                       ;
                 <{FOR}>, <{WHILE}>, <NEXT>, <rec>, <.rest.>            ;
               )
			   
** Todo: Add FoxPro NoOptimize clause
#command RECALL                 =>  DbRecall()

#command FIND <*text*>          => DbSeek( <(text)> )
#command FIND := <xpr>          => ( find := <xpr> )
#command FIND = <xpr>           => ( find := <xpr> )

#command CONTINUE               => DbContinue()

#command LOCATE                                                         ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => DbLocate( <{FOR}>, <{WHILE}>, <NEXT>, <rec>, <.rest.> )

** Todo: Add FoxPro NoOptimize clause

#command SET RELATION TO        => DbClearRelation()

#command SET RELATION                                                   ;
         [<add:ADDITIVE>]                                               ;
         [TO <key1> INTO <(alias1)> [, [TO] <keyn> INTO <(aliasn)>]]    ;
                                                                        ;
      => if ( !<.add.> )                                                ;
       ;    DbClearRelation()                                           ;
       ; END                                                            ;
                                                                        ;
       ; DbSetRelation( <(alias1)>, <{key1}>, <"key1"> )                ;
      [; DbSetRelation( <(aliasn)>, <{keyn}>, <"keyn"> )]

#command CREATE <(file1)>           ;
            [FROM <(file2)>]        ;
            [ALIAS <a>]             ;
            [VIA <rdd>]             ;
            [<NEW: NEW>]            ;
            => _DbCreate( <(file1)>, <(file2)> , <rdd>, <.new.>, <(a)> )


#command COPY STRUCTURE EXTENDED TO <(file)>                      		;
      => DbCopyXStruct( <(file)> )

#command COPY STRUCTURE TO <(file)> [FIELDS <fields,...>]           ;
      => DbCopyStruct( <(file)>, { <(fields)> } )

#ifndef __DIALECT_FOXPRO__

#command COPY TO <(file)>   DELIMITED [WITH <*delim*>]                  ;
         [FIELDS <fields,...>]                                          ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => DbCopyDelim(                                                   ;
                        <(file)>, <(delim)>, { <(fields)> },            ;
                        <{FOR}>, <{WHILE}>, <NEXT>, <rec>, <.rest.>     ;
                      )


#command COPY TO <(file)> SDF                                           ;
         [FIELDS <fields,...>]                                          ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => DbCopySDF(                                                     ;
                      <(file)>, { <(fields)> },                         ;
                      <{FOR}>, <{WHILE}>, <NEXT>, <rec>, <.rest.>       ;
                    )


#command COPY TO <(file)>                                               ;
         [FIELDS <fields,...>]                                          ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
         [VIA <rdd>]                                                    ;
         [INHERIT <hdnlist,...>]                                        ;
                                                                        ;
      => DbCopy(                                                        ;
                   <(file)>, { <(fields)> },                            ;
                   <{FOR}>, <{WHILE}>, <NEXT>, <rec>, <.rest.>          ;
		   <rdd>, { <(hdnlist)> } )

#command APPEND FROM <(file)> DELIMITED [WITH <*delim*>]                ;
         [FIELDS <fields,...>]                                          ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => DbAppDelim(                                                    ;
                       <(file)>, <(delim)>, { <(fields)> },             ;
                       <{FOR}>, <{WHILE}>, <NEXT>, <rec>, <.rest.>      ;
                     )


#command APPEND FROM <(file)> SDF                                       ;
         [FIELDS <fields,...>]                                          ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => DbAppSDF(                                                      ;
                     <(file)>, { <(fields)> },                          ;
                     <{FOR}>, <{WHILE}>, <NEXT>, <rec>, <.rest.>        ;
                   )


#command APPEND FROM <(file)>                                          ;
         [FIELDS <fields,...>]                                          ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
         [VIA <rdd>]                                                    ;
                                                                        ;
      => DbApp(                                                         ;
                  <(file)>, { <(fields)> },                             ;
                  <{FOR}>, <{WHILE}>, <NEXT>, <rec>, <.rest.>, <rdd>    ;
                )

#endif

#command SORT  TO <(file)>  [ON <fields,...>]                           ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => DbSort(                                                        ;
                   <(file)>, { <(fields)> },                            ;
                   <{FOR}>, <{WHILE}>, <NEXT>, <rec>, <.rest.>          ;
                 )

#command TOTAL TO <(file)> ON <key>                                     ;
         [FIELDS <fields,...>]                                          ;
         [FOR <for>]                                                    ;
         [WHILE <while>]                                                ;
         [NEXT <next>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => DbTotal(                                                       ;
                    <(file)>, <{key}>, { <(fields)> },                  ;
                    <{for}>, <{while}>, <next>, <rec>, <.rest.>         ;
                  )

** Todo FoxPro Nooptimize clause 


#command UPDATE  FROM <(alias)>  [ON <key>]                             ;
         [REPLACE <f1> WITH <x1> [, <fn> WITH <xn>]]                    ;
         [<rand:RANDOM>]                                                ;
                                                                        ;
      => DbUpdate(                                                      ;
                     <(alias)>, <{key}>, <.rand.>,                      ;
                     {|| _FIELD-><f1> := <x1> [, _FIELD-><fn> := <xn>]} ;
                   )


#command JOIN  WITH <(alias)>  [TO <file>]                              ;
         [FIELDS <fields,...>]                                          ;
         [FOR <for>]                                                    ;
                                                                        ;
      => DbJoin( <(alias)>, <(file)>, { <(fields)> }, <{for}> )
** Todo FoxPro Nooptimize clause 

#command COUNT TO <var>                                                 ;
         [FOR <for>]                                                    ;
         [WHILE <while>]                                                ;
         [NEXT <next>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => <var> := 0                                                     ;
       ; DbEval(                                                        ;
                 {|| <var> := <var> + 1},                               ;
                 <{for}>, <{while}>, <next>, <rec>, <.rest.>            ;
               )
** Todo FoxPro Nooptimize clause 

#command SUM  [<x1> [, <xn>]  TO  <v1> [, <vn>] ]                         ;
         [FOR <for>]                                                    ;
         [WHILE <while>]                                                ;
         [NEXT <next>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => <v1> := [ <vn> := ] 0                                          ;
       ; DbEval(                                                        ;
                 {|| <v1> := <v1> + <x1> [, <vn> := <vn> + <xn> ]},     ;
                 <{for}>, <{while}>, <next>, <rec>, <.rest.>            ;
               )

#command AVERAGE   <x1> [, <xn>]  TO  <v1> [, <vn>]                     ;
         [FOR <for>]                                                    ;
         [WHILE <while>]                                                ;
         [NEXT <next>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => M->__Avg := <v1> := [ <vn> := ] 0                              ;
                                                                        ;
       ; DbEval(                                                        ;
                 {|| M->__Avg := M->__Avg + 1,                          ;
                 <v1> := <v1> + <x1> [, <vn> := <vn> + <xn>] },         ;
                 <{for}>, <{while}>, <next>, <rec>, <.rest.>            ;
               )                                                        ;
                                                                        ;
       ; <v1> := <v1> / M->__Avg [; <vn> := <vn> / M->__Avg ]


// NOTE:  CLOSE <alias> must precede the others
#command CLOSE <alias>              => <alias>->( DbCloseArea() )

#command CLOSE                      => DbCloseArea()
#command CLOSE [al: DATABASES,ALL>] => DbCloseAll()
#command CLOSE INDEXES              => DbClearIndex()

#endif

** EOF
