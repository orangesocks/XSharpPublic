///////////////////////////////////////////////////////////////////////////
// FoxProCmd.xh
//
// XSharp FoxPro Preprocessor Directives
//
// Copyright (c) XSharp BV.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  
// See License.txt in the project root for license information.
//
// Caution: do not modify this file. It will be overwritten during product updates
//
#ifndef FOXPROCMD_XH
#define FOXPROCMD_XH

#xcommand ENDPROC [<*any*>] => END PROCEDURE
#xcommand ENDFUNC [<*any*>] => END FUNCTION
#xcommand ENDWITH [<*any*>] => END WITH
#xcommand ENDTRY  [<*any*>] => END TRY

// Replace FIELDS LIKE and FIELDS EXCEPT with single words to make matching expressions easier

#translate FIELDS LIKE => LIKE
#translate FIELDS EXCEPT => EXCEPT

// Scatter .. MEMVAR must be last !   

#command SCATTER [FIELDS <f1> [,<fn> ] ] [LIKE <%include%>] [EXCEPT <%exclude%> ]  [<memo: MEMO>] [<blank: BLANK>]  TO <arrayName> ;
          => <arrayName> := __ScatterArray(  {<(f1)>[, <(fn)> ]} ,  #<include>, #<exclude> , <.memo.>, <.blank.>  )

// Note that the objectName parameter is passed as a string because objectName may not have been created yet (when it is a MEMVAR).
// For SCATTER NAME to work with LOCALS and the ADDITIVE clause we therefore need to enable /fox2. 

#command SCATTER [FIELDS <f1> [,<fn> ]] [LIKE <%include%>] [EXCEPT <%exclude%> ]  [<memo: MEMO>] [<blank: BLANK>]  NAME <objectName> [<add: ADDITIVE>];
          => <objectName> := __ScatterObject( {<(f1)>[, <(fn)> ]} ,  #<include>, #<exclude> , <.memo.>, <.blank.> , <"objectName">,  <.add.>)

#command SCATTER [FIELDS <f1> [,<fn> ]] [LIKE <%include%>] [EXCEPT <%exclude%> ]  [<memo: MEMO>] [<blank: BLANK>] MEMVAR ;
          => __ScatterMemVar( {<(f1)>[, <(fn)> ]} ,  #<include>, #<exclude> , <.memo.>, <.blank.>  )


#command GATHER FROM <arrayName> [FIELDS <f1> [,<fn> ]] [LIKE <%include%>] [EXCEPT <%exclude%> ]  [<memo: MEMO>] ;
          => __GatherArray(<arrayName>, {<(f1)>[, <(fn)> ]} ,  #<include>, #<exclude> , <.memo.>)

#command GATHER FROM NAME <objectName> [FIELDS <f1> [,<fn> ]] [LIKE <%include%>] [EXCEPT <%exclude%> ]  [<memo: MEMO>] ;
          => __GatherObject(<objectName>, {<(f1)>[, <(fn)> ]} ,  #<include>, #<exclude> , <.memo.>)

#command GATHER FROM MEMVAR [FIELDS <f1> [,<fn> ]] [LIKE <%include%>] [ EXCEPT <%exclude%> ]  [<memo: MEMO>] ;
          => __GatherMemVar( {<(f1)>[, <(fn)> ]} ,  #<include>, #<exclude> , <.memo.>)


***
* Variations of the database commands with IN or ALIAS clause
***

** FoxPro allows to close a workarea like this

/*
#command USE <(db)>                                                     ;
             [VIA <rdd>]                                                ;
             [ALIAS <a>]                                                ;
             [<new: NEW>]                                               ;
             [<ex: EXCLUSIVE>]                                          ;
             [<sh: SHARED>]                                             ;
             [<ro: READONLY,NOUPDATE>]                                  ;
             [INDEX <(index1)> [, <(indexn)>]]                          ;
                                                                        ;
      => DbUseArea(                                                     ;
                    <.new.>, <rdd>, <(db)>, <(a)>,                      ;
                    if(<.sh.> .or. <.ex.>, !<.ex.>, NIL), <.ro.>        ;
                  )                                                     ;
                                                                        ;
      [; DbSetIndex( <(index1)> )]                                      ;
      [; DbSetIndex( <(indexn)> )]

**  Todo FoxPro [[DatabaseName!] TableName | SQLViewName | ?]
**  [IN nWorkArea | cTableAlias] [ONLINE] [ADMIN] [AGAIN]
**  [NOREQUERY [nDataSessionNumber]] [NODATA] 
**  [INDEX IndexFileList | ? [ORDER [nIndexNumber | IDXFileName | [TAG] TagName [OF CDXFileName] [ASCENDING | DESCENDING]]]]
**  [CONNSTRING cConnectionString | nStatementHandle ]

#command SET INDEX TO [ <(index1)> [, <(indexn)>]]                      ;
                                                                        ;
      => DbClearIndex()                                                 ;
                                                                        ;
      [; DbSetIndex( <(index1)> )]                                      ;
      [; DbSetIndex( <(indexn)> )]

**  Todo: [ORDER [TAG] <nIndex> | <cTagName> [ASCENDING | DESCENDING] [ADDITIVE]

#command INDEX ON <key> TO <(file)> [<u: UNIQUE>]                       ;
      => dbCreateIndex(                                                 ;
                        <(file)>, <"key">, <{key}>,                     ;
                        IIF( <.u.>, TRUE, NIL )                           ;
                      )

** Todo: TAG TagName [BINARY]
**   [COLLATE cCollateSequence] [OF CDXFileName] [FOR lExpression]
**   [COMPACT] [ASCENDING | DESCENDING] [UNIQUE | CANDIDATE] [ADDITIVE]

#command SEEK <xpr>  [<soft:SOFTSEEK>] [<lst:LAST>]  => dbSeek( <xpr> , <.soft.>, <.lst.>)
** Todo: Add FoxPro clauses ORDER <order> TAG <tag> OF <index> ASCENDING | DESCENDING 


#command COPY STRUCTURE EXTENDED TO <(file)>                      		;
      => DbCopyXStruct( <(file)> )
** FoxPro clauses [DATABASE DatabaseName [NAME LongTableName]] [FIELDS FieldList]

#command COPY STRUCTURE TO <(file)> [FIELDS <fields,...>]           ;
      => DbCopyStruct( <(file)>, { <(fields)> } )
** FoxPro clauses [[WITH] CDX | [WITH] PRODUCTION]  [DATABASE cDatabaseName [NAME cTableName]]


#command SET RELATION                                                   ;
         [<add:ADDITIVE>]                                               ;
         [TO <key1> INTO <(alias1)> [, [TO] <keyn> INTO <(aliasn)>]]    ;
                                                                        ;
      => if ( !<.add.> )                                                ;
       ;    DbClearRelation()                                           ;
       ; END                                                            ;
                                                                        ;
       ; DbSetRelation( <(alias1)>, <{key1}>, <"key1"> )                ;
      [; DbSetRelation( <(aliasn)>, <{keyn}>, <"keyn"> )]

** Todo: Add Tag Clause
** Todo: IN <area> which should prefix the calls to DbSetRelation 


#command SORT  TO <(file)>  [ON <fields,...>]                           ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => DbSort(                                                        ;
                   <(file)>, { <(fields)> },                            ;
                   <{FOR}>, <{WHILE}>, <NEXT>, <rec>, <.rest.>          ;
                 )
** Todo FoxPro Nooptimize clause and [ASCENDING | DESCENDING] clauses
** Todo Fields Like, Fields Except

#command SUM  [<x1> [, <xn>]  TO  <v1> [, <vn>] ]                         ;
         [FOR <for>]                                                    ;
         [WHILE <while>]                                                ;
         [NEXT <next>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => <v1> := [ <vn> := ] 0                                          ;
       ; DbEval(                                                        ;
                 {|| <v1> := <v1> + <x1> [, <vn> := <vn> + <xn> ]},     ;
                 <{for}>, <{while}>, <next>, <rec>, <.rest.>            ;
               )
** Todo FoxPro Nooptimize clause 
** Todo FoxPro [TO ARRAY ArrayName]   

#command AVERAGE   <x1> [, <xn>]  TO  <v1> [, <vn>]                     ;
         [FOR <for>]                                                    ;
         [WHILE <while>]                                                ;
         [NEXT <next>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => M->__Avg := <v1> := [ <vn> := ] 0                              ;
                                                                        ;
       ; DbEval(                                                        ;
                 {|| M->__Avg := M->__Avg + 1,                          ;
                 <v1> := <v1> + <x1> [, <vn> := <vn> + <xn>] },         ;
                 <{for}>, <{while}>, <next>, <rec>, <.rest.>            ;
               )                                                        ;
                                                                        ;
       ; <v1> := <v1> / M->__Avg [; <vn> := <vn> / M->__Avg ]

** Todo FoxPro Nooptimize clause 
** Todo FoxPro [TO ARRAY ArrayName]   


*/

#command USE IN <(area)> => DbCloseArea(<(area)>)



#command APPEND BLANK <x:IN,ALIAS> <(a)>        =>  (<(a)>) -> (DbAppend())
#command PACK <x:IN,ALIAS> <(a)>                => (<(a)>) -> (DbPack())
#command ZAP  <x:IN,ALIAS> <(a)>                => (<(a)>) -> (DbZap())
#command UNLOCK [RECORD <rcd>]  <x:IN,ALIAS> <(a)> => (<(a)>) -> (DbUnlock(<rcd>))
#command COMMIT <x:IN,ALIAS> <(a)>                => (<(a)>) -> (DbCommit())

#command GOTO <n>  		<x:IN,ALIAS> <(a)>     => (<(a)>) -> (DbGoto(<n>))
#command GO <n>   		<x:IN,ALIAS> <(a)>     => (<(a)>) -> (DbGoto(<n>))
#command GOTO TOP  		<x:IN,ALIAS> <(a)>     => (<(a)>) -> (DbGoTop())
#command GO TOP   		<x:IN,ALIAS> <(a)>     => (<(a)>) -> (DbGoTop())
#command GOTO BOTTOM 	<x:IN,ALIAS> <(a)>     => (<(a)>) -> (DbGoBottom())
#command GO BOTTOM  	<x:IN,ALIAS> <(a)>     => (<(a)>) -> (DbGoBottom())
#command SKIP 			<x:IN,ALIAS> <(a)>     => (<(a)>) -> ( DbSkip(1) )
#command SKIP <n> 		<x:IN,ALIAS> <(a)>     => (<(a)>) -> ( DbSkip(<n>) )

#command SEEK <xpr>  [<soft:SOFTSEEK>] [<lst:LAST>] <x:IN,ALIAS> <(a)>  => (<(a)>) -> (DbSeek( <xpr> , <.soft.>, <.lst.>))
** Todo: Add FoxPro clauses ORDER <order> TAG <tag> OF <index> ASCENDING | DESCENDING 

#command SET FILTER TO  <x:IN,ALIAS> <(a)>        => (<(a)>) -> (DbClearFilter())
#command SET FILTER TO <xpr> <x:IN,ALIAS> <(a)>   => (<(a)>) -> (DbSetFilter( <{xpr}>, <"xpr"> ))
#command SET FILTER TO <x:&>  <y:IN,ALIAS> <a>                          ;
      => IF ( Empty(<(x)>) )                                            ;
       ;    (<(a)>) -> (DbClearFilter())                                  ;
       ; ELSE                                                           ;
       ;    (<(a)>) -> (DbSetFilter( <{x}>, <(x)> ))                      ;
       ; END

#command REPLACE   <f1> WITH <x1> [, <fn> WITH <xn>]                    ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
         <x:IN,ALIAS> <(a)>                                               ;
      => (<(a)>) -> ( DbEval(                                             ;
                 {|| _FIELD-><f1> := <x1> [, _FIELD-><fn> := <xn>]},    ;
                 <{FOR}>, <{WHILE}>, <NEXT>, <rec>, <.rest.>            ;
               ))
** Todo: Add FoxPro NoOptimize clause

#command REPLACE <f1> WITH <v1> [, <fN> WITH <vN> ]   <x:IN,ALIAS> <(a)>   ;
      => (<(a)>) -> ( _FIELD-><f1> := <v1>) [; (<(a)>) -> ( _FIELD-><fN> := <vN> )]


#command DELETE                                                         ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
         <x:IN,ALIAS> <(a)>                                               ;
      => (<(a)>) -> (DbEval(                                                        ;
                 {|| DbDelete()},                                       ;
                 <{FOR}>, <{WHILE}>, <NEXT>, <rec>, <.rest.>            ;
               ))

** Todo: Add FoxPro NoOptimize clause


#command DELETE  <x:IN,ALIAS> <(a)>                =>  (<(a)>) -> (DbDelete())

#command RECALL                                                         ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
         <x:IN,ALIAS> <(a)>                                               ;
      => (<(a)>) -> (DbEval(                                                        ;
                 {|| DbRecall()},                                       ;
                 <{FOR}>, <{WHILE}>, <NEXT>, <rec>, <.rest.>            ;
               ))

#command RECALL  <x:IN,ALIAS> <(a)>                =>  (<(a)>) -> (DbRecall())
			   
** Todo: Add FoxPro NoOptimize clause

** Commands without IN/ALIAS clause

#command SCAN              ;
         [FOR <FOR>]       ;
         [WHILE <WHILE>]   ;
         [NEXT <NEXT>]     ;
         [RECORD <rec>]    ;
         [<rest:REST>]     ;
         [ALL]             ;
                           ;
      => IIF( <.FOR.>, DbLocate( <{FOR}>, <{WHILE}>, <NEXT>, <rec>, <.rest.> ), DbLocate( {||TRUE}, <{WHILE}>, <NEXT>, <rec>, <.rest.> ) ); DO WHILE found() 

** Todo FoxPro Nooptimize clause 

#command ENDSCAN => DbContinue(); ENDDO
#command END SCAN => DbContinue(); ENDDO




#command COPY TO ARRAY <arrayName> [FIELDS <f1> [,<fn> ] ]              ;
         [LIKE <%include%>] [EXCEPT <%exclude%> ]                       ;
         [FOR <for>]                                                    ;
         [WHILE <while>]                                                ;
         [NEXT <next>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [ALL]                                                          ;
                                                                        ;
      => <arrayName> := DbCopyToArray(                                  ;
                        {<(f1)>[, <(fn)> ]}, #<include>, #<exclude>,    ;
                        <{for}>, <{while}>, <next>, <rec>, <.rest.>     ;
                        <.noopt.>                                       ;
                        )
** Todo FoxPro clauses  
** [ [WITH] CDX ] | [ [WITH] PRODUCTION ] [NOOPTIMIZE] 
** Implementation of CSV,SDF,FOXPLUS, FOX2X is implemented. Rest not yet.


#command COPY TO <(file)>                                               ;
         [DATABASE <dbname> [NAME <longtablename>]]                     ;
         [WITH] [<cdx: CDX, PRODUCTION> ]                               ;
         [FIELDS <f1> [,<fn> ] ]                                        ;
         [LIKE <%include%>] [EXCEPT <%exclude%> ]                       ;
         [FOR <for>]                                                    ;
         [WHILE <while>]                                                ;
         [NEXT <next>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [ALL]                                                          ;
         [TYPE] [<type: FOXPLUS,FOX2X,DIF,MOD,SDF,SYLK,WK1,WKS,WR1,WRK,CSV,XLS,XL5 >]                                                          ;
         [AS <nCodePage>]                                               ;
      =>  DbCopyFox(                                                    ;
                        <(file)>, iif( <.type.>,#<type>,"DBF"),         ;
                        {<(f1)>[, <(fn)> ]}, <(include)>, <(exclude)> , ;
                        <{for}>, <{while}>, <next>, <rec>, <.rest.>,    ;
                        <nCodePage>, <(dbname)>, <(longtablename)>,     ;
                        <.cdx.>, <.noopt.>                              ;
                      )

#command COPY TO <(file)>  [FIELDS <f1> [,<fn> ] ]                      ;
         [LIKE <%include%>] [EXCEPT <%exclude%> ]                       ;
         [FOR <for>]                                                    ;
         [WHILE <while>]                                                ;
         [NEXT <next>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [ALL]                                                          ;
         [TYPE] DELIMITED WITH <delim>                                  ;
         [WITH CHARACTER <char>]                                        ;
         [AS <nCodePage>]                                               ;
                                                                        ;
      => DbCopyDelimFox(                                                ;
                        <(file)>, <(delim)>,<char>,                     ;
                        {<(f1)>[, <(fn)> ]}, #<include>, #<exclude>,    ;
                        <{for}>, <{while}>, <next>, <rec>, <.rest.>,    ;
                        <nCodePage>, <.noopt.>                          ;
                        )

#command COPY TO <(file)>  [FIELDS <f1> [,<fn> ] ]                      ;
         [LIKE <%include%>] [EXCEPT <%exclude%> ]                       ;
         [FOR <for>]                                                    ;
         [WHILE <while>]                                                ;
         [NEXT <next>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [ALL]                                                          ;
         [TYPE] DELIMITED                                               ;
         [WITH <tab: TAB, BLANK> ]                                      ;
         [AS <nCodePage>]                                               ;
                                                                        ;
      => DbCopyDelimFox(                                                ;
                        <(file)>, "\" + #<tab>, /* no char */ ,         ;
                        {<(f1)>[, <(fn)> ]}, #<include>, #<exclude>,    ;
                        <{for}>, <{while}>, <next>, <rec>, <.rest.>,    ;
                        <nCodePage>, <.noopt.>                          ;
                        )

#command COPY TO ARRAY <arrayName> [FIELDS <f1> [,<fn> ] ]              ;
         [LIKE <%include%>] [EXCEPT <%exclude%> ]                       ;
         [FOR <for>]                                                    ;
         [WHILE <while>]                                                ;
         [NEXT <next>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [ALL]                                                          ;
                                                                        ;
      => <arrayName> := DbCopyToArray(                                  ;
                        {<(f1)>[, <(fn)> ]}, #<include>, #<exclude>,    ;
                        <{for}>, <{while}>, <next>, <rec>, <.rest.>     ;
                        <.noopt.>                                       ;
                        )

#command APPEND FROM <(file)>                                           ;
         [FIELDS <fields,...>]                                          ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
         [TYPE] DELIMITED WITH <delim>                                  ;
         [WITH CHARACTER <char>]                                        ;
                                                                        ;
      => DbAppDelimFox(                                                 ;
                       <(file)>, <(delim)>, <char>,       ;
                       { <(fields)> }, <{FOR}>, <{WHILE}>, <NEXT>,      ;                       
                       <rec>, <.rest.>                                  ;
                     )


#command APPEND FROM <(file)>                                           ;
         [FIELDS <fields,...>]                                          ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
         [TYPE] DELIMITED                                               ;
         [WITH <tab: TAB, BLANK> ]                                      ;
                                                                        ;
      => DbAppDelimFox(                                                 ;
                       <(file)>, "\" + #<tab>,  ,                       ;
                       { <(fields)> }, <{FOR}>, <{WHILE}>, <NEXT>,      ;                       
                       <rec>, <.rest.>                                  ;
                     )


#command APPEND FROM <(file)>                                           ;
         [FIELDS <fields,...>]                                          ;
         [FOR <FOR>]                                                    ;
         [WHILE <WHILE>]                                                ;
         [NEXT <NEXT>]                                                  ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
         [TYPE] [<type: FOXPLUS,FOX2X,DIF,MOD,SDF,SYLK,WK1,WKS,WR1,WRK,CSV,XLS,XL5,XL8 >] ;
         [SHEET <sheet>]                                                ;
         [AS <nCodePage>]                                               ;
                                                                        ;
      => DbAppFox(                                                      ;
                     <(file)>, iif( <.type.>,#<type>,"DBF"),{<(fields)>},;
                     <{FOR}>, <{WHILE}>, <NEXT>, <rec>, <.rest.> ,      ;
                     <(sheet)>, <nCodePage>                             ;
                   )



#command APPEND FROM ARRAY <arrayName> [FIELDS <f1> [,<fn> ] ]          ;
         [LIKE <%include%>] [EXCEPT <%exclude%> ]                       ;
         [FOR <for>]                                                    ;
                                                                        ;
      => DbAppendFromArray(<arrayName>,                  ;
                        {<(f1)>[, <(fn)> ]}, #<include>, #<exclude>,    ;
                        <{for}> )


#command OPEN DATABASE <(db)>                                            ;
             [<ex: EXCLUSIVE >]                                          ;
             [<sh: SHARED> ]                                             ;
             [<ro: NOUPDATE> ]                                           ;
             [<val: VALIDATE>]                                           ;
         ;
        => XSharp.RDD.Dbc.Open( <(db)>, iif(<.sh.> .or. <.ex.>, !<.ex.>, .T.), <.ro.>, <.val.>)

#command SET DATABASE TO [<(db)>]                                        ;
        => XSharp.RDD.Dbc.Select( <(db)>)

#command CREATE DATABASE <(db)>                                          ;
        => XSharp.RDD.Dbc.Create( <(db)>)



#command ASSERT <expression> [MESSAGE <cMessageText>]  ;
        => __FoxAssert( <expression> , <"expression">, <cMessageText> )

#command SET ASSERTS <x:ON,OFF>           =>  Set(Set.Asserts, upper(<(x)>)=="ON" )
#command SET ASSERTS (<x>)                =>  Set(Set.Asserts, <x> )
#command SET SAFETY <x:ON,OFF>            =>  Set(Set.Safety, upper(<(x)>)=="ON" )
#command SET SAFETY (<x>)                 =>  Set(Set.Safety, <x> )


// Unsupported commands

#command SCATTER [<options,...>] FIELDS <f1> [<otherfields,...>] <clause:LIKE,EXCEPT>  <*otherclause*> => __FIELDSERROR__
#command GATHER  [<options,...>] FIELDS <f1> [<otherfields,...>] <clause:LIKE,EXCEPT>  <*otherclause*> => __FIELDSERROR__
#command COPY    [<options,...>] FIELDS <f1> [<otherfields,...>] <clause:LIKE,EXCEPT>  <*otherclause*> => __FIELDSERROR__
#command APPEND  [<options,...>] FIELDS <f1> [<otherfields,...>] <clause:LIKE,EXCEPT>  <*otherclause*> => __FIELDSERROR__

#command __FIELDSERROR__ => #error You cannot combine both a field list and an wildcard mask in a statement

#include "FoxProSql.xh"
#endif

