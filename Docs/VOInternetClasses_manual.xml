<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>VOInternetClasses</name>
  </assembly>
  <members>
    <member name="T:VO.CEmail">
      <summary>
        <para>Provide a class to store and decode all data for an e-mail.</para>
      </summary>
    </member>
    <member name="T:VO.CFtp">
      <summary>
        <para>Wrapper class for high-level File Transfer Protocol (FTP) functions provided by Microsoft in Wininet.dll.</para>
      </summary>
    </member>
    <member name="T:VO.CHttp">
      <summary>
        <para>Wrapper class for an Http (Hypertext transfer protocol) session.</para>
      </summary>
    </member>
    <member name="T:VO.CINetDial">
      <summary>
        <para>Class for establishing dial up connections</para>
      </summary>
    </member>
    <member name="T:VO.CMailAbstract">
      <summary>
        <para>Base class for CPop, CSmtp and CNNTP classes.</para>
      </summary>
      <remarks>
        <para>
          <b>
            <i>Important!</i>
          </b>
          <i>CMailAbstract is an abstract class and should not be used directly â€” instead, use one of its subclasses.</i>
        </para>
      </remarks>
    </member>
    <member name="T:VO.CNNTP">
      <summary>
        <para>Create an Internet News Server based on NNTP (Network News Transport Protocol).</para>
      </summary>
    </member>
    <member name="T:VO.CPop">
      <summary>
        <para>Provide a class for Internet Post Office Protocol (POP).</para>
      </summary>
    </member>
    <member name="T:VO.CSession">
      <summary>
        <para>Abstract class for wrapping an Internet session.</para>
      </summary>
    </member>
    <member name="T:VO.CSmtp">
      <summary>
        <para>Provide a class for Internet Protocol SMTP.</para>
      </summary>
    </member>
    <member name="T:VO.CSocket">
      <summary>
        <para>Provide a class for low-level TCP/IP programming.</para>
      </summary>
    </member>
    <member name="T:VO.CStorage">
      <summary>
        <para>Provide an interface to handle large Email Messages and attachments</para>
      </summary>
      <remarks>
        <para>This class is used Exclusively by the CEMail Class to read and write attachments.</para>
        <para>The class reads/writes attachments in a disk folder.</para>
        <para>
          If you want to store attachments on another location (for example a SQL Database) then you should subclass this class and override the implementation of the
          methods.
        </para>
        <para>CStorage also gives you an interface to store the raw data of received emails. During reception of an email the following three methods are called:</para>
        <para>RawNew()</para>
        <para>RawWrite()</para>
        <para>RawClose()</para>
        <para>You can use these methods to implement your own mechanism to save the raw email contents.</para>
      </remarks>
    </member>
    <member name="M:VO.CEmail.#ctor(XSharp.__Usual[])">
      <summary>
        <para>Construct a CEmail object.</para>
      </summary>
    </member>
    <member name="M:VO.CEmail.AddAttachment(XSharp.__Usual[])">
      <summary>
        <para>Adds an attachment to the email.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CEmail.CloneAttachments">
      <summary>
        <para>Clones the internal Attachment array.</para>
      </summary>
      <returns>
        <para>Nothing</para>
      </returns>
    </member>
    <member name="M:VO.CEmail.CreateHtml(System.String)">
      <summary>
        <para>Creates a HTML body based on the text body of the email message.</para>
      </summary>
      <returns>
        <para>cHTML</para>
        <para>a HTML copy of cText.</para>
      </returns>
    </member>
    <member name="M:VO.CEmail.CreateReplyBody(System.Boolean)">
      <summary>
        <para>Prepares a default text response.</para>
      </summary>
    </member>
    <member name="M:VO.CEmail.Decode(XSharp.__Usual[])">
      <summary>
        <para>Extract all information from the various parts of an e-mail.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CEmail.DeleteAttachment(System.UInt32)">
      <summary>
        <para>Adds an attachment to the email.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CEmail.GetAttachmentInfo(System.UInt32,System.UInt32)">
      <summary>
        <para>Method to decode all header elements of an email</para>
      </summary>
    </member>
    <member name="M:VO.CEmail.GetHeaderInfo(XSharp.__Usual[])">
      <summary>
        <para>Method to decode all header elements of an email</para>
      </summary>
    </member>
    <member name="M:VO.CEmail.MimeEncode(XSharp.__Usual[])">
      <summary>
        <para>Method to encode a string using a specific encoding or the default encoding of an email</para>
      </summary>
      <returns>
        <para>The encoded string.</para>
      </returns>
    </member>
    <member name="M:VO.CEmail.MimeHeader(XSharp.__Usual[])">
      <summary>
        <para>Method to encode an MIME Attachment header</para>
      </summary>
      <returns>
        <para>The encoded string.</para>
      </returns>
      <remarks>
        <para>
          <b>Description</b>
        </para>
        <para>The MimeHeader() method is called by the CEMail:StreamOut() method during the streaming of the message.</para>
      </remarks>
    </member>
    <member name="M:VO.CEmail.SaveAs(XSharp.__Usual[])">
      <summary>
        <para>Decode and save the specified encoded attachment of an e-mail as a local file.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CEmail.SetAttachmentInfo(System.UInt32,System.UInt32,XSharp.__Usual)">
      <summary>
        <para>This method allows you to replace elements of the internal attachment array of the email object.</para>
      </summary>
      <returns>
        <para>The old value for the attachment array element</para>
      </returns>
    </member>
    <member name="M:VO.CEmail.SetHeaderInfo(XSharp.__Usual[])">
      <summary>
        <para>Method to encode all header elements of an email</para>
      </summary>
    </member>
    <member name="M:VO.CEmail.StreamIn(System.String)">
      <summary>
        <para>This method gets called when an email messages is received. It calls into the Storage object to decode and store attachments.</para>
      </summary>
    </member>
    <member name="M:VO.CEmail.StreamOut">
      <summary>
        <para>Generate message contents</para>
      </summary>
    </member>
    <member name="M:VO.CEmail.StreamStart(XSharp.__Usual[])">
      <summary>
        <para>Initialize the Stream Status of an email message.</para>
      </summary>
    </member>
    <member name="P:VO.CEmail.AttachmentFileList">
      <summary>
        <para>Array containing the names of the attached files.</para>
      </summary>
    </member>
    <member name="P:VO.CEmail.AttachmentInfo">
      <summary>
        <para>Returns or sets the information about all attachments as a single string.</para>
      </summary>
      <remarks>
        <para>For each attachment there is a separate line.</para>
        <para>Each line contains: The Fully qualified filename, Content Type, Encoding, ID, Size, ContentId</para>
      </remarks>
    </member>
    <member name="P:VO.CEmail.BCCList">
      <summary>
        <para>Array of strings containing the e-mails of all blind carbon copy (BCC) recipients.</para>
      </summary>
    </member>
    <member name="P:VO.CEmail.Boundary">
      <summary>
        <para>String value used as boundary for different e-mail parts.</para>
      </summary>
    </member>
    <member name="P:VO.CEmail.CCList">
      <summary>
        <para>Array of strings containing the e-mails of all carbon copy (CC) recipients.</para>
      </summary>
    </member>
    <member name="P:VO.CEmail.DestList">
      <summary>
        <para>Array of strings containing the e-mail addresses of all recipients.</para>
      </summary>
    </member>
    <member name="P:VO.CEmail.MailPriority">
      <summary>
        <para>Numeric value representing the e-mail priority.</para>
      </summary>
    </member>
    <member name="P:VO.CEmail.ReturnReceipt">
      <summary>
        <para>A string containing the email address of a party to be sent a receipt advice. </para>
      </summary>
      <remarks>
        Some email clients may use this to contain a return receipt and others may use Disposition Notification instead
      </remarks>
    </member>
    <member name="M:VO.CFtp.#ctor(XSharp.__Usual[])">
      <summary>
        <para>Construct a CFtp object instance.</para>
      </summary>
    </member>
    <member name="M:VO.CFtp.ConnectRemote(XSharp.__Usual[])">
      <summary>
        <para>Connect an application to a remote FTP server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CFtp.CreateDir(XSharp.__Usual[])">
      <summary>
        <para>Create a new directory on the FTP server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CFtp.DeleteFile(XSharp.__Usual[])">
      <summary>
        <para>Delete a file stored on the FTP server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CFtp.Directory(XSharp.__Usual[])">
      <summary>
        <para>Create an array of directory and file information about the remote FTP server.</para>
      </summary>
      <returns>
        <para>
          An array of subarrays, with each subarray containing information about each file matching &lt;<i>cFileSpec</i>&gt;. The subarray elements are referenced as
          shown in the example under the CFtp:ConnectRemote() Method section.
        </para>
      </returns>
    </member>
    <member name="M:VO.CFtp.GetCurDir(XSharp.__Usual[])">
      <summary>
        <para>Get the name of the current directory on the remote FTP server for the current process.</para>
      </summary>
      <returns>
        <para>Name of the current directory, if successful; otherwise, NULL_STRING.</para>
      </returns>
    </member>
    <member name="M:VO.CFtp.GetFile(XSharp.__Usual[])">
      <summary>
        <para>Receive a file from the FTP server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CFtp.InternetStatus(XSharp.__Usual[])">
      <summary>
        <para>
          Method InternetStatus() is a callback placeholder to receive current status information for an FTP session. It should be overloaded by subclasses to
          implement the desired behavior.
        </para>
      </summary>
    </member>
    <member name="M:VO.CFtp.Open(XSharp.__Usual[])">
      <summary>
        <para>Initialize an application's use of the Win32 Internet functions.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CFtp.OpenFile(XSharp.__Usual[])">
      <summary>
        <para>Open a remote file for writing or reading.</para>
      </summary>
      <returns>
        <para>File handle, if successful; otherwise, NULL_PTR.</para>
      </returns>
    </member>
    <member name="M:VO.CFtp.PutFile(XSharp.__Usual[])">
      <summary>
        <para>Store a file on the FTP server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CFtp.RemoveDir(XSharp.__Usual[])">
      <summary>
        <para>Delete a directory from the remote FTP server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CFtp.RenameFile(XSharp.__Usual[])">
      <summary>
        <para>Rename a file stored on the FTP server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CFtp.SetCurDir(XSharp.__Usual[])">
      <summary>
        <para>Change the current directory on the remote FTP server for the current process.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.CFtp.Proxy">
      <summary>
        <para>A string containing the name of the proxy server (or servers) to use for Internet connections.</para>
      </summary>
    </member>
    <member name="M:VO.CHttp.#ctor(XSharp.__Usual[])">
      <summary>
        <para>Instantiates a new Http wrapper object.</para>
      </summary>
    </member>
    <member name="M:VO.CHttp.AddRequestHeaders(XSharp.__Usual[])">
      <summary>
        <para>Adds additional headers to the current request.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CHttp.CloseRemote(XSharp.__Usual[])">
      <summary>
        <para>Closes the http connection.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CHttp.CloseRequest(XSharp.__Usual[])">
      <summary>
        <para>Closes an http request.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CHttp.ConnectRemote(XSharp.__Usual[])">
      <summary>
        <para>Opens the http connection.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CHttp.Directory(XSharp.__Usual[])">
      <summary>
        <para>If an ftp server is accessed via http, this method returns an array of the files of the current directory.</para>
      </summary>
      <returns>
        <para>An array of the files in the current directory on the ftp server.</para>
      </returns>
    </member>
    <member name="M:VO.CHttp.GetCurDir(XSharp.__Usual[])">
      <summary>
        <para>Gets the name of the current directory on the remote server.</para>
      </summary>
      <returns>
        <para>The directory name as a string.</para>
      </returns>
    </member>
    <member name="M:VO.CHttp.GetDocumentByURL(XSharp.__Usual[])">
      <summary>
        <para>Retrieves a document from the server.</para>
      </summary>
      <returns>
        <para>The document as a string.</para>
      </returns>
    </member>
    <member name="M:VO.CHttp.GetFile(XSharp.__Usual[])">
      <summary>
        <para>
          Retrieves the remote file <i>cRemoteFile</i> to the (local) file <i>cNewFile</i>.
        </para>
      </summary>
      <returns>
        <para>TRUE if the file is saved, otherwise FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CHttp.GetResponse(XSharp.__Usual[])">
      <summary>
        <para>Gets the response for the current request.</para>
      </summary>
      <returns>
        <para>The response for the current request as a string.</para>
      </returns>
    </member>
    <member name="M:VO.CHttp.GetResponseHeader(XSharp.__Usual[])">
      <summary>
        <para>Gets the response header for the current request.</para>
      </summary>
      <returns>
        <para>The response header for the current request as a string.</para>
      </returns>
    </member>
    <member name="M:VO.CHttp.Open(XSharp.__Usual[])">
      <summary>
        <para>Opens the http connection.</para>
      </summary>
      <returns>
        <para>TRUE if the connection was opened, otherwise FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CHttp.OpenFile(XSharp.__Usual[])">
      <summary>
        <para>Opens a remote file.</para>
      </summary>
      <returns>
        <para>The handle of the requested file.</para>
      </returns>
    </member>
    <member name="M:VO.CHttp.OpenRequest(XSharp.__Usual[])">
      <summary>
        <para>Opens a new request.</para>
      </summary>
      <returns>
        <para>TRUE if the document was opened, otherwise FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CHttp.SendRequest(XSharp.__Usual[])">
      <summary>
        <para>Sends a request to the server.</para>
      </summary>
      <returns>
        <para>TRUE if the request is successful, otherwise FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CHttp.SetCurDir(XSharp.__Usual[])">
      <summary>
        <para>Changes the current directory on the remote server for the current process.</para>
      </summary>
      <returns>
        <para>The new directory name as a string.</para>
      </returns>
    </member>
    <member name="P:VO.CHttp.FtpRequest">
      <summary>
        <para>Indicates that the http connection is being used to access an ftp server.</para>
      </summary>
      <returns>
        <para>TRUE if the http connection is used to access an ftp server, otherwise FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.CHttp.Response">
      <summary>
        <para>Use this to get the response.</para>
      </summary>
      <returns>
        <para>The current response as a string.</para>
      </returns>
    </member>
    <member name="P:VO.CHttp.ResponseHeader">
      <summary>
        <para>Use this to get the response header.</para>
      </summary>
      <returns>
        <para>The current response header as a string.</para>
      </returns>
    </member>
    <member name="M:VO.CMailAbstract.#ctor(XSharp.__Usual[])">
      <summary>
        <para>Construct a CMailAbstract object.</para>
      </summary>
    </member>
    <member name="M:VO.CMailAbstract.Close(XSharp.__Usual[])">
      <summary>
        <para>De-initialize all internal values of an Internet session.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CMailAbstract.Open(XSharp.__Usual[])">
      <summary>
        <para>Initialize all internal startup values for an Internet session.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CMailAbstract.SendData(XSharp.__Usual[])">
      <summary>
        <para>Send data to a remote host.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.CMailAbstract.Error">
      <summary>
        <para>Numeric value representing the last occurring error code.</para>
      </summary>
    </member>
    <member name="P:VO.CMailAbstract.ErrorMsg">
      <summary>
        <para>A string representing the error description.</para>
      </summary>
    </member>
    <member name="P:VO.CMailAbstract.PassWord">
      <summary>
        <para>A string representing the password to be used.</para>
      </summary>
    </member>
    <member name="P:VO.CMailAbstract.RemoteHost">
      <summary>
        <para>String representing the address of the mail server.</para>
      </summary>
    </member>
    <member name="P:VO.CMailAbstract.RemotePort">
      <summary>
        <para>Numeric value representing the port number.</para>
      </summary>
    </member>
    <member name="P:VO.CMailAbstract.ReplyCode">
      <summary>
        <para>Numeric value representing the server's reply code.</para>
      </summary>
    </member>
    <member name="P:VO.CMailAbstract.ReplyString">
      <summary>
        <para>String representing the server's reply.</para>
      </summary>
    </member>
    <member name="P:VO.CMailAbstract.Timeout">
      <summary>
        <para>Numeric value representing the time-out in milliseconds.</para>
      </summary>
    </member>
    <member name="P:VO.CMailAbstract.UserName">
      <summary>
        <para>A string containing the user name to be used.</para>
      </summary>
    </member>
    <member name="M:VO.CMessage.#ctor(XSharp.__Usual[])">
      <summary>
        <para>Construct a new CMessage object.</para>
      </summary>
    </member>
    <member name="M:VO.CMessage.Decode(XSharp.__Usual[])">
      <summary>
        <para>Decodes a raw message string into its parts.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CMessage.GetAttachInfo(XSharp.__Usual[])">
      <summary>
        <para>Retrieves information about attachment(s).</para>
      </summary>
    </member>
    <member name="M:VO.CMessage.GetHeaderInfo(XSharp.__Usual[])">
      <summary>
        <para>Extracts all the header information and stores that information into the appropriate properties.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CMessage.SaveAs(XSharp.__Usual[])">
      <summary>
        <para>Decode and save the attachment.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CMessage.SetMailTime(XSharp.__Usual[])">
      <summary>
        <para>Converts the current time and date into an Internet timestamp string for the current message object.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.CMessage.AttachmentFileList">
      <summary>
        <para>An array of filenames for attachments. (Used only by CNews.)</para>
      </summary>
    </member>
    <member name="P:VO.CMessage.ContentType">
      <summary>
        <para>A string representing the content type for that section.</para>
      </summary>
    </member>
    <member name="P:VO.CMessage.Error">
      <summary>
        <para>A number representing the error most recently occurring.</para>
      </summary>
    </member>
    <member name="P:VO.CMessage.ErrorMsg">
      <summary>
        <para>A string representing the details of the last error.</para>
      </summary>
    </member>
    <member name="P:VO.CMessage.FromAddress">
      <summary>
        <para>A string representing the email address of the sender.</para>
      </summary>
    </member>
    <member name="P:VO.CMessage.FromName">
      <summary>
        <para>A string representing the name of the sender.</para>
      </summary>
    </member>
    <member name="P:VO.CMessage.MailBody">
      <summary>
        <para>A string representing the entire contents of the body of the email. This will include all attachments and multi-part extensions.</para>
      </summary>
    </member>
    <member name="P:VO.CMessage.MailDate">
      <summary>
        <para>Returns the creation date of the message.</para>
      </summary>
    </member>
    <member name="P:VO.CMessage.MailHeader">
      <summary>
        <para>A string representing the entire header contents for the email.</para>
      </summary>
    </member>
    <member name="P:VO.CMessage.MailTime">
      <summary>
        <para>Returns the creation time of the message as a string.</para>
      </summary>
    </member>
    <member name="P:VO.CMessage.MessageID">
      <summary>
        <para>A string representing the ID of the email.</para>
      </summary>
    </member>
    <member name="P:VO.CMessage.TimeStamp">
      <summary>
        <para>Returns the creation date and time of the message as a Time-stamp string.</para>
      </summary>
    </member>
    <member name="P:VO.CMessage.TransferEncoding">
      <summary>
        <para>A string representing the Transfer encoding type for the current section.</para>
      </summary>
    </member>
    <member name="M:VO.CNews.#ctor(XSharp.__Usual[])">
      <summary>
        <para>Construct a new CNews object.</para>
      </summary>
    </member>
    <member name="M:VO.CNews.GetAttachInfo(XSharp.__Usual[])">
      <summary>
        <para>Returns information about any attachments.</para>
      </summary>
    </member>
    <member name="M:VO.CNews.GetHeaderInfo(XSharp.__Usual[])">
      <summary>
        <para>Extracts all the header information and stores that information into the appropriate properties.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.CNews.FollowUpTo">
      <summary>
        <para>Returns a string representing the FollowUpTo field of the news message header.</para>
      </summary>
    </member>
    <member name="P:VO.CNews.NewsGroups">
      <summary>
        <para>Returns a string representing the NewsGroups field of the news message header.</para>
      </summary>
    </member>
    <member name="P:VO.CNews.Organization">
      <summary>
        <para>Returns a string representing the Organization field of the news message header.</para>
      </summary>
    </member>
    <member name="P:VO.CNews.Path">
      <summary>
        <para>Returns a string representing the Path field of the news message header.</para>
      </summary>
    </member>
    <member name="P:VO.CNews.Sender">
      <summary>
        <para>Returns a string representing the Sender field of the news message header.</para>
      </summary>
    </member>
    <member name="P:VO.CNews.Size">
      <summary>
        <para>Returns a string representing the size of the news message.</para>
      </summary>
    </member>
    <member name="M:VO.CNNTP.#ctor(XSharp.__Usual[])">
      <summary>
        <para>Construct a new NNTP object.</para>
      </summary>
    </member>
    <member name="M:VO.CNNTP.Authenticate(XSharp.__Usual[])">
      <summary>
        <para>Authenticates the user to a NNTP Server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CNNTP.CheckReply(XSharp.__Usual[])">
      <summary>
        <para>Determines if the reply from the server has been successful.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CNNTP.connect(XSharp.__Usual[])">
      <summary>
        <para>Establishes a connection to an Internet Mail Server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CNNTP.Disconnect(XSharp.__Usual[])">
      <summary>
        <para>Disconnect from the news server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CNNTP.GetArticle(XSharp.__Usual[])">
      <summary>
        <para>Retrieves a specified message from the selected group.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CNNTP.GetBody(XSharp.__Usual[])">
      <summary>
        <para>Retrieves a specified message body from the selected group.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CNNTP.GetHeader(XSharp.__Usual[])">
      <summary>
        <para>Retrieves a specified message header from the selected group.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CNNTP.GetList(XSharp.__Usual[])">
      <summary>
        <para>
          Returns a list of all groups from an NTTP Server containing <i>cSearch</i> in their names.
        </para>
      </summary>
      <returns>
        <para>An array of groups.</para>
      </returns>
    </member>
    <member name="M:VO.CNNTP.GetNewGroups(XSharp.__Usual[])">
      <summary>
        <para>Returns a list of all newly created groups from an NTTP Server.</para>
      </summary>
      <returns>
        <para>An array of groups.</para>
      </returns>
    </member>
    <member name="M:VO.CNNTP.GetStatus(XSharp.__Usual[])">
      <summary>
        <para>Retrieves a specified message status from the selected group.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CNNTP.RecvRemote(XSharp.__Usual[])">
      <summary>
        <para>Retrieves data from the news server via socket.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CNNTP.SetNewsGroup(XSharp.__Usual[])">
      <summary>
        <para>Selects a newsgroup from a NTTP Server for further processing.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CNNTP.SkipNext(XSharp.__Usual[])">
      <summary>
        <para>Sets the internal message pointer to the next available message of the current group.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CNNTP.SkipPrev(XSharp.__Usual[])">
      <summary>
        <para>Sets the internal message pointer to the previous available message of the current group.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.CNNTP.CurrentNews">
      <summary>
        <para>The current CNews object of the CNNTP class.</para>
      </summary>
    </member>
    <member name="P:VO.CNNTP.GroupName">
      <summary>
        <para>Returns a string representing the name of the currently selected group.</para>
      </summary>
    </member>
    <member name="P:VO.CNNTP.Message">
      <summary>
        <para>Returns the numeric ID of the message currently being processed.</para>
      </summary>
    </member>
    <member name="P:VO.CNNTP.MessageCount">
      <summary>
        <para>Returns the number of messages in the currently selected group.</para>
      </summary>
    </member>
    <member name="P:VO.CNNTP.MessageFirst">
      <summary>
        <para>Returns the numeric ID of the first available message in the currently selected group.</para>
      </summary>
    </member>
    <member name="P:VO.CNNTP.MessageID">
      <summary>
        <para>Returns a string representing the unique message ID of the message currently being processed.</para>
      </summary>
    </member>
    <member name="P:VO.CNNTP.MessageLast">
      <summary>
        <para>Returns the numeric ID of the last available message in the currently selected group.</para>
      </summary>
    </member>
    <member name="P:VO.CNNTP.ReplyString">
      <summary>
        <para>Returns a string with the latest reply from the NNTP Server.</para>
      </summary>
    </member>
    <member name="M:VO.CPop.#ctor(XSharp.__Usual[])">
      <summary>
        <para>Construct a CPop object.</para>
      </summary>
    </member>
    <member name="M:VO.CPop.CheckReply(XSharp.__Usual[])">
      <summary>
        <para>Check the response from a POP server for error codes.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CPop.connect(XSharp.__Usual[])">
      <summary>
        <para>Establish a connection to the remote POP server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CPop.DeleteMail(XSharp.__Usual[])">
      <summary>
        <para>Delete specified mail from a remote POP server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CPop.Disconnect(XSharp.__Usual[])">
      <summary>
        <para>Shut down the current POP connection.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CPop.GetMail(XSharp.__Usual[])">
      <summary>
        <para>Read specified mail from a remote POP server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CPop.GetStatus(XSharp.__Usual[])">
      <summary>
        <para>Retrieve the mail status for the current active user from a remote POP server.</para>
      </summary>
      <returns>
        <para>A string containing the current status.</para>
      </returns>
    </member>
    <member name="M:VO.CPop.ListMail(XSharp.__Usual[])">
      <summary>
        <para>Read all e-mails from a remote POP server.</para>
      </summary>
      <returns>
        <para>Array with all e-mails, if successful; otherwise, an empty array.</para>
      </returns>
    </member>
    <member name="M:VO.CPop.LogOn(XSharp.__Usual[])">
      <summary>
        <para>Log a user onto a connected POP server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CPop.RecvRemote(XSharp.__Usual[])">
      <summary>
        <para>Receive response data from a remote mail server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.CPop.MailCount">
      <summary>
        <para>Numeric value representing the number of e-mails for the specific user.</para>
      </summary>
    </member>
    <member name="P:VO.CPop.ReceiveBytes">
      <summary>
        <para>Numeric value representing the number of bytes received.</para>
      </summary>
    </member>
    <member name="P:VO.CPop.TotalBytes">
      <summary>
        <para>Total size of all e-mails for the specific user.</para>
      </summary>
    </member>
    <member name="M:VO.CSession.#ctor(XSharp.__Usual[])">
      <summary>
        <para>Construct a CSession object.</para>
      </summary>
    </member>
    <member name="M:VO.CSession.CloseFile(XSharp.__Usual[])">
      <summary>
        <para>Closes a remote file.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CSession.CloseRemote(XSharp.__Usual[])">
      <summary>
        <para>Closes the Internet connection.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CSession.ConnectRemote(XSharp.__Usual[])">
      <summary>
        <para>Opens a connection to the Internet server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CSession.Open(XSharp.__Usual[])">
      <summary>
        <para>Opens a connection to the Internet server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.CSession.AccessType">
      <summary>
        <para>The type of Internet session.</para>
      </summary>
      <remarks>
        <para>The default type is INTERNET_OPEN_TYPE_DIRECT.</para>
        <para>The alternate type is INTERNET_OPEN_TYPE_PROXY.</para>
      </remarks>
    </member>
    <member name="P:VO.CSession.Connected">
      <summary>
        <para>A logical value indicating the status of the connection.</para>
      </summary>
    </member>
    <member name="P:VO.CSession.ConnectHandle">
      <summary>
        <para>Internet connection handle.</para>
      </summary>
    </member>
    <member name="P:VO.CSession.Error">
      <summary>
        <para>The number of the last error code received.</para>
      </summary>
    </member>
    <member name="P:VO.CSession.ErrorMsg">
      <summary>
        <para>A string representing the last error message received.</para>
      </summary>
    </member>
    <member name="P:VO.CSession.Handle">
      <summary>
        <para>The Internet session handle.</para>
      </summary>
    </member>
    <member name="P:VO.CSession.PassWord">
      <summary>
        <para>The password necessary to establish the remote connection.</para>
      </summary>
    </member>
    <member name="P:VO.CSession.Port">
      <summary>
        <para>The Port number of the current session communication.</para>
      </summary>
    </member>
    <member name="P:VO.CSession.Proxy">
      <summary>
        <para>A string representing the proxy for the remote connection.</para>
      </summary>
    </member>
    <member name="P:VO.CSession.ProxyBypass">
      <summary>
        <para>A string representing the proxies to bypass when establishing the remote connection.</para>
      </summary>
    </member>
    <member name="P:VO.CSession.RemoteHost">
      <summary>
        <para>A string representing the Host name or IP address of the remote server.</para>
      </summary>
    </member>
    <member name="P:VO.CSession.UserName">
      <summary>
        <para>A string representing the User ID necessary to establish the remote connection.</para>
      </summary>
    </member>
    <member name="M:VO.CSmtp.#ctor(XSharp.__Usual[])">
      <summary>
        <para>Construct a CSmtp object.</para>
      </summary>
    </member>
    <member name="M:VO.CSmtp.CheckReply(XSharp.__Usual[])">
      <summary>
        <para>Check the response from a mail server for error codes.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CSmtp.connect(XSharp.__Usual[])">
      <summary>
        <para>Establish a connection to a remote SMTP server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CSmtp.Disconnect(XSharp.__Usual[])">
      <summary>
        <para>Shut down the current SMTP connection.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CSmtp.Logon(XSharp.__Usual[])">
      <summary>
        <para>Logs on to the remote host with the user name and password of the smtp class</para>
      </summary>
      <returns>
        <para>Logic indicating if the Login was succesful</para>
      </returns>
    </member>
    <member name="M:VO.CSmtp.RecvRemote(XSharp.__Usual[])">
      <summary>
        <para>Receive response data from a remote mail server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CSmtp.SendHeaderInfo(XSharp.__Usual[])">
      <summary>
        <para>Create a mail header and send it as part of an e-mail to a remote SMTP server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CSmtp.SendMail(XSharp.__Usual[])">
      <summary>
        <para>Send a complete e-mail to a remote SMTP server.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.CSmtp.Email">
      <summary>
        <para>An instance of the CEmail class.</para>
      </summary>
    </member>
    <member name="P:VO.CSmtp.EmailFormat">
      <summary>
        <para>The format of the email.</para>
      </summary>
    </member>
    <member name="P:VO.CSmtp.MailApplication">
      <summary>
        <para>A string that holds the name that is used when connection to mail servers</para>
      </summary>
    </member>
    <member name="P:VO.CSmtp.SecureSMTP">
      <summary>
        <para>A logic indicating if the CSmtp class should use Secure SMTP</para>
      </summary>
    </member>
    <member name="P:VO.CSmtp.TextEncoding">
      <summary>
        <para>The text encoding type of the email.</para>
      </summary>
    </member>
    <member name="M:VO.CSocket.#ctor(XSharp.__Usual[])">
      <summary>
        <para>Construct a CSocket object.</para>
      </summary>
    </member>
    <member name="M:VO.CSocket.accept">
      <summary>
        <para>Accept a new connection on a socket.</para>
      </summary>
      <returns>
        <para>A new CSocket object instance, if successful; otherwise, NULL_OBJECT.</para>
      </returns>
    </member>
    <member name="M:VO.CSocket.bind(System.UInt16,System.String,System.Int16)">
      <summary>
        <para>Associate a local address with a socket.</para>
      </summary>
    </member>
    <member name="M:VO.CSocket.Close">
      <summary>
        <para>Disconnects the socket and closes it.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CSocket.connect(System.String,System.UInt16)">
      <summary>
        <para>Establish a connection of the socket instance to a peer.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CSocket.DisConnect">
      <summary>
        <para>Shut down the current socket connection.</para>
      </summary>
      <remarks>
        <para>This disables sending/receiving on the socket, but does NOT close the socket.</para>
        <para>
          <b>Note that this function does NOT close the connection like it did in Visual Objects 2.5!</b>
        </para>
        <para>
          <b>To close a socket you need to call cSocket:Close()!</b>
        </para>
      </remarks>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CSocket.DisplayError">
      <summary>
        <para>Display error messages.</para>
      </summary>
    </member>
    <member name="M:VO.CSocket.GetLine">
      <summary>
        <para>Extract the first line from the socket data received via the current connection.</para>
      </summary>
      <returns>
        <para>String containing the received line of data, if successful; otherwise, NULL_STRING</para>
      </returns>
    </member>
    <member name="M:VO.CSocket.GetLineFrom(System.String@,System.UInt32@)">
      <summary>
        <para>Wait for connection and extract first line from incoming data.</para>
      </summary>
      <returns>
        <para>String containing the received line, if successful; otherwise, NULL_STRING</para>
      </returns>
    </member>
    <member name="M:VO.CSocket.getpeername(System.String@,System.Int32@)">
      <summary>
        <para>Get the address of the peer to which the socket is connected.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.CSocket.GetRaw">
      <summary>
        <para>Receive all available data from a socket.</para>
      </summary>
      <returns>
        <para>String containing the received data, if successful; otherwise, NULL_STRING.</para>
      </returns>
    </member>
    <member name="M:VO.CSocket.GetRawText(System.Boolean,System.Boolean,System.UInt32)">
      <summary>
        <para>Receive all available data from a socket.</para>
      </summary>
      <returns>
        <para>String containing the received data, if successful; otherwise, NULL_STRING.</para>
      </returns>
    </member>
    <member name="M:VO.CSocket.getsockname(System.String@,System.Int32@)">
      <summary>
        <para>Get the local name for a socket.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE</para>
      </returns>
    </member>
    <member name="M:VO.CSocket.listen(System.Int32)">
      <summary>
        <para>Establish a socket to listen for an incoming connection.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE</para>
      </returns>
    </member>
    <member name="M:VO.CSocket.SendLine(System.String)">
      <summary>
        <para>Send data terminated by CRLF to the connected socket.</para>
      </summary>
      <returns>
        <para>Number of data sent, if successful; otherwise, 0 (zero).</para>
      </returns>
    </member>
    <member name="M:VO.CSocket.SendLineTo(System.String,System.String,System.UInt16)">
      <summary>
        <para>Send data terminated by CRLF to a specific destination.</para>
      </summary>
      <returns>
        <para>Number of data sent, if successful; otherwise, 0 (zero).</para>
      </returns>
    </member>
    <member name="M:VO.CSocket.SendRaw(System.Void,System.UInt32)">
      <summary>
        <para>Send any data to the connected socket.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE</para>
      </returns>
    </member>
    <member name="M:VO.CSocket.SendRawText(System.String)">
      <summary>
        <para>Send any data to the connected socket.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE</para>
      </returns>
    </member>
    <member name="P:VO.CSocket.Error">
      <summary>
        <para>Numeric value representing the error code.</para>
      </summary>
    </member>
    <member name="P:VO.CSocket.ErrorMsg">
      <summary>
        <para>String with error information.</para>
      </summary>
    </member>
    <member name="P:VO.CSocket.Status">
      <summary>
        <para>Numeric value with the current status representing one of the following states:</para>
      </summary>
      <remarks>
        <para>Numeric value with the current status representing one of the following states:</para>
        <list type="table">
          <item>
            <term>SSTAT_UNINITIALIZED</term>
          </item>
          <item>
            <term>SSTAT_DISCONNECTED</term>
          </item>
          <item>
            <term>SSTAT_CONNECTING</term>
          </item>
          <item>
            <term>SSTAT_LISTENING</term>
          </item>
          <item>
            <term>SSTAT_DISCONNECTING</term>
          </item>
          <item>
            <term>SSTAT_CONNECTED</term>
          </item>
          <item>
            <term>SSTAT_ERRORSTATE</term>
          </item>
          <item>
            <term>SSTAT_TIMEDOUT</term>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:VO.CSocket.TimeOut">
      <summary>
        <para>Numeric value representing the time-out in milliseconds.</para>
      </summary>
    </member>
    <member name="M:VO.CStorage.AttachmentAdd(System.String,System.UInt32)">
      <summary>
        <para>This method is called when an email is received to initialize the saving of a new attachment.</para>
      </summary>
      <remarks>
        <para>The implementation in CStorage generates a unique ID and creates the (empty) file.</para>
      </remarks>
      <returns>
        &lt;<i>cID</i>&gt; STRING The unique ID. If AttachmentAdd() fails it returns a NULL_STRING.
      </returns>
    </member>
    <member name="M:VO.CStorage.AttachmentClose">
      <summary>
        <para>This method is called after receiving of an attachment or after reading of an attachment from the storage during sending.</para>
      </summary>
      <remarks>
        <para>The implementation in CStorage closes an open file.</para>
      </remarks>
    </member>
    <member name="M:VO.CStorage.AttachmentDelete(System.String)">
      <summary>
        <para>This method returns the full path of an attachment file addressed through cAttachID.</para>
      </summary>
      <returns>
        LOGIC TRUE when the attachment could be deleted.
      </returns>
    </member>
    <member name="M:VO.CStorage.AttachmentFullPath(System.String)">
      <summary>
        <para>This method returns the full path of an attachment file addressed through cAttachID.</para>
      </summary>
      <returns>
        &lt;<i>cID</i>&gt; STRING The full path of an attachment file
      </returns>
    </member>
    <member name="M:VO.CStorage.AttachmentOpen(System.String,System.UInt32)">
      <summary>
        <para>This method is called during sending of an email, if an attachment have to be sent. </para>
      </summary>
      <remarks>
        It prepares the loading process from the storage. In our case it addresses the attachment file and opens it.
      </remarks>
      <returns>
        LOGIC TRUE when the attachment could be opened successfully.
      </returns>
    </member>
    <member name="M:VO.CStorage.AttachmentRead">
      <summary>
        <para>This method is called during sending of an attachment. </para>
      </summary>
      <remarks>
        It reads a data block from the attachment file. In our implementation it reads 1536 bytes. The result
        string is the encoded value of this data block.
      </remarks>
      <returns>
        <i>STRING</i> The encoded value of this data block.
      </returns>
    </member>
    <member name="M:VO.CStorage.AttachmentSave(System.String,System.String)">
      <summary>
        <para>Stores the attachment with the ID cAttachID to the file cToFile.</para>
      </summary>
      <remarks>
        <para>cToFile must be a full path name. This method is called from CEMail:SaveAs().</para>
      </remarks>
      <returns>
        &lt;<i>cID</i>&gt; STRING The unique ID. If AttachmentAdd() fails it returns a NULL_STRING.
      </returns>
    </member>
    <member name="M:VO.CStorage.AttachmentWrite(System.String)">
      <summary>
        <para>This method is called multiple times per attachment during the receive process.</para>
      </summary>
      <returns>
        NOTHING
      </returns>
    </member>
    <member name="M:VO.CStorage.LoadEMail(System.String)">
      <summary>
        <para>This method returns a CEMail object filled with all data addressed through the cID.</para>
      </summary>
      <remarks>
        <para>You have to implement this method and the meaning of cID.</para>
        <b>THIS METHOD IS NOT IMPLEMENTED IN CSTORAGE AND NOT CALLED BY THE INTERNET CLASSES</b>
        remarks>
      </remarks>
      <returns>
        &lt;<i>oEmail</i>&gt;
      </returns>
    </member>
    <member name="M:VO.CStorage.RawClose">
      <summary>
        <para>This method is called when an email was received completely.</para>
      </summary>
      <returns>
        NOTHING
      </returns>
    </member>
    <member name="M:VO.CStorage.RawNew(VO.CEmail)">
      <summary>
        <para>This method is called at the beginning before any data is received.</para>
      </summary>
      <remarks>
        <para>You have to implement how you want to store and address the raw data here.</para>
      </remarks>
      <returns>
        <para>NOTHING</para>
      </returns>
    </member>
    <member name="M:VO.CStorage.RawWrite(System.String)">
      <summary>
        <para>
          Now this method is called multiple times until the complete email including all attachments is received. You have to implement how you want to store each
          data block.
        </para>
      </summary>
      <returns>
        &lt;<i>cID</i>&gt; STRING The unique ID. If AttachmentAdd() fails it returns a NULL_STRING.
      </returns>
    </member>
    <member name="M:VO.CStorage.SaveAttachments(VO.CEmail,System.Boolean)">
      <summary>
        <para>This method stores all attachments of an email into the storage.</para>
      </summary>
      <returns>
        &lt;<i>cID</i>&gt; STRING The unique ID. If AttachmentAdd() fails it returns a NULL_STRING.
      </returns>
    </member>
    <member name="M:VO.CStorage.SaveEMail(System.String,VO.CEmail)">
      <summary>
        <para>This method stores a CEMail object including all data under the address of the cID.</para>
      </summary>
      <remarks>
        <para>You have to implement this method and the meaning of cID.</para>
        <b>THIS METHOD IS NOT IMPLEMENTED IN CSTORAGE AND NOT CALLED BY THE INTERNET CLASSES</b>
      </remarks>
      <returns>
        <i>LOGIC</i> TRUE when the email was saved succesfully
      </returns>
    </member>
    <member name="P:VO.CStorage.AttachmentSize">
      <summary>
        <para>Returns the file size of a currently stored or an opened attachment file. This access is called during receiving an email.</para>
      </summary>
      <returns>
        <i>DWORD</i> The size of the attachment
      </returns>
    </member>
    <member name="P:VO.CStorage.NoSave">
      <summary>
        <para>You can use this assign to suppress the storing of the attachments into the storage. This makes sense, if you want to store only raw email files.</para>
      </summary>
    </member>
  </members>
</doc>
