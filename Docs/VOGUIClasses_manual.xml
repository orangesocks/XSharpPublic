<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>VOGUIClasses</name>
  </assembly>
  <members>
    <member name="T:VO.Accelerator">
      <summary>
        <para>Create an accelerator table.</para>
      </summary>
    </member>
    <member name="M:VO.Accelerator.#ctor(XSharp.__Usual)">
      <summary>
        <para>Load an accelerator table from a resource entity.</para>
      </summary>
      <param name="xResourceID">
      </param>
    </member>
    <member name="M:VO.Accelerator.AddAccelerator(XSharp.__Usual)">
      <summary>
        <para>Adds all accelerator keys of one accelerator object to another</para>
      </summary>
      <param name="oAccelerator">
      </param>
      <returns>
        <para>TRUE when successful, FALSE when not, for example because the object not dynamic anymore</para>
      </returns>
    </member>
    <member name="M:VO.Accelerator.AddKey(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Adds a new accelerator key to the accelerator table</para>
      </summary>
      <param name="nMenuItemId">
      </param>
      <param name="xKeyId">
      </param>
      <param name="lCtrl">
      </param>
      <param name="lAlt">
      </param>
      <param name="lShift">
      </param>
      <returns>
        <para>TRUE when successful, FALSE when not, for example because the object not dynamic anymore</para>
        <para>
          <b>Note</b>
        </para>
        <para>After the first use of a dynamic accelerator object, no more accelerators can be added..</para>&lt;span style="color: #000000;"&gt; &lt;/span&gt;
      </returns>
    </member>
    <member name="M:VO.Accelerator.Create">
      <summary>
        <para>Creates the underlying windows accelerator.</para>
      </summary>
      <returns>
        <para>The handle of the accelerator, if successful. A null handle (NULL_PTR) is returned if the control creation failed.</para>
      </returns>
    </member>
    <member name="M:VO.Accelerator.Destroy">
      <summary>
        <para>Provide a method to de-instantiate an Accelerator object.</para>
      </summary>
    </member>
    <member name="M:VO.Accelerator.Handle">
      <summary>
        <para>Return the handle for an accelerator.</para>
      </summary>
      <returns>
        <para>A handle describing the underlying system object.</para>
      </returns>
    </member>
    <member name="T:VO.AnimationControl">
      <summary>
        <para>Create an animation control.</para>
      </summary>
    </member>
    <member name="M:VO.AnimationControl.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct an animation control.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="oFileSpec">
      </param>
      <param name="kStyle">
      </param>
      <param name="hInst">
      </param>
    </member>
    <member name="M:VO.AnimationControl.Create">
      <inheritdoc />
    </member>
    <member name="P:VO.AnimationControl.FileSpec">
      <summary>
        <para>The FileSpec object that describes the associated AVI file.</para>
      </summary>
    </member>
    <member name="M:VO.AnimationControl.Open">
      <summary>
        <para>Open the AVI file and display its first frame in the animation control.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.AnimationControl.OpenResource(XSharp.__Usual)">
      <param name="xID">
      </param>
    </member>
    <member name="M:VO.AnimationControl.Play(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Play the AVI file in the animation control.</para>
      </summary>
      <param name="nFrom">
      </param>
      <param name="nTo">
      </param>
      <param name="nRepeatCount">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.AnimationControl.Seek(XSharp.__Usual)">
      <summary>
        <para>Direct the animation control to display a particular frame in the AVI file.</para>
      </summary>
      <param name="nFrame">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.AnimationControl.Stop">
      <summary>
        <para>Direct the animation control to stop the display of the AVI file.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="T:VO.App">
      <summary>
        <para>Create an entity that represents the overall application.</para>
      </summary>
    </member>
    <member name="M:VO.App.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct an application.</para>
        <para>
          <b>
            <i>Important!</i>
            <br />
          </b>
          <i>The runtime instantiates this object.</i>
        </para>
      </summary>
      <param name="oOwner">
      </param>
    </member>
    <member name="M:VO.App.Exec(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Start the event handling loop for the application.</para>
      </summary>
      <param name="kExecType">
      </param>
      <param name="oObject">
      </param>
      <returns>
        <para>A value of 0 indicates normal termination (no errors). A non-zero value indicates abnormal termination.</para>
      </returns>
    </member>
    <member name="M:VO.App.GetAccel">
      <summary></summary>
    </member>
    <member name="M:VO.App.GetAccelWindow">
      <summary></summary>
    </member>
    <member name="M:VO.App.GetDialogWindow">
      <summary></summary>
    </member>
    <member name="M:VO.App.GetMdiClientWindow">
      <summary></summary>
    </member>

    <member name="M:VO.App.Handle">
      <summary>
        <para>Return the handle for an application.</para>
      </summary>
      <returns>
        <para>A handle describing the underlying system object.</para>
      </returns>
    </member>
    <member name="M:VO.App.Quit">
      <summary>
        <para>Terminate the application by instructing the application to close itself.</para>
      </summary>
    </member>
    <member name="M:VO.App.Run(XSharp.__Usual)">
      <summary>
        <para>Invoke and execute a specified command.</para>
      </summary>
      <param name="sCommand">
      </param>
      <returns>
        <para>
          A long integer value indicating successful completion or an error. The numbers 0-32 correspond to a specific error type in Windows (e.g., 0 means "out of
          memory," 2 means "file not found," etc.); any other number indicates successful completion.
        </para>
      </returns>
    </member>
    <member name="M:VO.App.SetAccel(XSharp.__Usual)">
      <param name="hNewAccel">
      </param>
    </member>
    <member name="M:VO.App.SetAccelWindow(XSharp.__Usual)">
      <param name="hNewAccelWnd">
      </param>
    </member>
    <member name="M:VO.App.SetDialogWindow(XSharp.__Usual)">
      <param name="hNewDialogWnd">
      </param>
    </member>
    <member name="M:VO.App.SetMdiClientWindow(XSharp.__Usual)">
      <param name="hNewMdiClientWnd">
      </param>
    </member>
    <member name="T:VO.AppCommandEvent">
      <summary>
        Provide information about an AppCommand event, which is launched by the extra keys on an extended keyboard or mouse.
      </summary>
    </member>
    <member name="M:VO.AppCommandEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.AppCommandEvent.Command">
      <summary>
        <para>The command associated with this event.</para>
      </summary>
      <remarks>
        <para>
          <b>Possible values:</b>
        </para>
        <para>APPCOMMAND_BROWSER_BACKWARD</para>
        <para>APPCOMMAND_BROWSER_FORWARD</para>
        <para>APPCOMMAND_BROWSER_REFRESH</para>
        <para>APPCOMMAND_BROWSER_STOP</para>
        <para>APPCOMMAND_BROWSER_SEARCH</para>
        <para>APPCOMMAND_BROWSER_FAVORITES</para>
        <para>APPCOMMAND_BROWSER_HOME</para>
        <para>APPCOMMAND_VOLUME_MUTE</para>
        <para>APPCOMMAND_VOLUME_DOWN</para>
        <para>APPCOMMAND_VOLUME_UP</para>
        <para>APPCOMMAND_MEDIA_NEXTTRACK</para>
        <para>APPCOMMAND_MEDIA_PREVIOUSTRACK</para>
        <para>APPCOMMAND_MEDIA_STOP</para>
        <para>APPCOMMAND_MEDIA_PLAY_PAUSE</para>
        <para>APPCOMMAND_LAUNCH_MAIL</para>
        <para>APPCOMMAND_LAUNCH_MEDIA_SELECT</para>
        <para>APPCOMMAND_LAUNCH_APP1</para>
        <para>APPCOMMAND_LAUNCH_APP2</para>
        <para>APPCOMMAND_BASS_DOWN</para>
        <para>APPCOMMAND_BASS_BOOST</para>
        <para>APPCOMMAND_BASS_UP</para>
        <para>APPCOMMAND_TREBLE_DOWN</para>
        <para>APPCOMMAND_TREBLE_UP</para>
        <para>APPCOMMAND_MICROPHONE_VOLUME_MUTE</para>
        <para>APPCOMMAND_MICROPHONE_VOLUME_DOWN</para>
        <para>APPCOMMAND_MICROPHONE_VOLUME_UP</para>
        <para>APPCOMMAND_HELP</para>
        <para>APPCOMMAND_FIND</para>
        <para>APPCOMMAND_NEW</para>
        <para>APPCOMMAND_OPEN</para>
        <para>APPCOMMAND_CLOSE</para>
        <para>APPCOMMAND_SAVE</para>
        <para>APPCOMMAND_PRINT</para>
        <para>APPCOMMAND_UNDO</para>
        <para>APPCOMMAND_REDO</para>
        <para>APPCOMMAND_COPY</para>
        <para>APPCOMMAND_CUT</para>
        <para>APPCOMMAND_PASTE</para>
        <para>APPCOMMAND_REPLY_TO_MAIL</para>
        <para>APPCOMMAND_FORWARD_MAIL</para>
        <para>APPCOMMAND_SEND_MAIL</para>
        <para>APPCOMMAND_SPELL_CHECK</para>
        <para>APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE</para>
        <para>APPCOMMAND_MIC_ON_OFF_TOGGLE</para>
        <para>APPCOMMAND_CORRECTION_LIST</para>
        <para>APPCOMMAND_MEDIA_CHANNEL_DOWN</para>
        <para>APPCOMMAND_MEDIA_CHANNEL_UP</para>
        <para>APPCOMMAND_MEDIA_FASTFORWARD</para>
        <para>APPCOMMAND_MEDIA_PAUSE</para>
        <para>APPCOMMAND_MEDIA_PLAY</para>
        <para>APPCOMMAND_MEDIA_RECORD</para>
        <para>APPCOMMAND_MEDIA_REWIND</para>
      </remarks>
    </member>
    <member name="P:VO.AppCommandEvent.IsControl">
      <summary>
        <para>Returns TRUE if the Control Key is down; otherwise, FALSE.</para>
      </summary>
    </member>
    <member name="P:VO.AppCommandEvent.IsDeviceKey">
      <summary>
        <para>Returns TRUE if the device that issued the command was a keyboard; otherwise, FALSE.</para>
      </summary>
    </member>
    <member name="P:VO.AppCommandEvent.IsDeviceMouse">
      <summary></summary>
    </member>
    <member name="P:VO.AppCommandEvent.IsDeviceOEM">
      <summary>
        <para>Returns TRUE if the device that issued the command was an OEM device; otherwise, FALSE.</para>
      </summary>
    </member>
    <member name="P:VO.AppCommandEvent.IsLeftButton">
      <summary>
        <para>Returns TRUE if the Left mouse button is down; otherwise, FALSE.</para>
      </summary>
    </member>
    <member name="P:VO.AppCommandEvent.IsMiddleButton">
      <summary></summary>
    </member>
    <member name="P:VO.AppCommandEvent.IsRightButton">
      <summary></summary>
    </member>
    <member name="P:VO.AppCommandEvent.IsShift">
      <summary>
        <para>Returns TRUE if the Shift Key is down; otherwise, FALSE.</para>
      </summary>
    </member>
    <member name="P:VO.AppCommandEvent.IsXButton1">
      <summary></summary>
    </member>
    <member name="P:VO.AppCommandEvent.IsXButton2">
      <summary></summary>
    </member>
    <member name="P:VO.AppCommandEvent.oTarget">
      <summary>
        <para>Returns the target of the command.</para>
        <para>
          If it is a Key event the target is focused control or window. If it is a Mouse event the target is the control or window that is under the mouse
          pointer.
        </para>
      </summary>
    </member>
    <member name="T:VO.AppWindow">
      <summary>
        <para>Provide the base class from which all application windows are subclassed.</para>
      </summary>
      <remarks>
        <para>
          Use the methods of the AppWindow class to customize the appearance of top, shell, and child application windows (for example, the display of border styles,
          the system menu, or icons).
        </para>
      </remarks>
    </member>
    <member name="M:VO.AppWindow.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct an application window.</para>
      </summary>
      <param name="oOwner">
      </param>
    </member>
    <member name="M:VO.AppWindow.Default(XSharp.__Usual)">
      <param name="oEvent">
      </param>
    </member>
    <member name="M:VO.AppWindow.Destroy">
      <inheritdoc />
    </member>
    <member name="M:VO.AppWindow.Dispatch(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="M:VO.AppWindow.EnableBorder(XSharp.__Usual)">
      <summary>
        <para>Set the border style for an application window.</para>
      </summary>
      <param name="kBorderStyle">
      </param>
    </member>
    <member name="M:VO.AppWindow.EnableHorizontalScroll(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="M:VO.AppWindow.EnableMaxBox(XSharp.__Usual)">
      <summary>
        <para>Enable/disable a maximize box in an application window.</para>
      </summary>
      <param name="lEnable">
      </param>
    </member>
    <member name="M:VO.AppWindow.EnableMinBox(XSharp.__Usual)">
      <summary>
        <para>Enable/disable a minimize box in an application window.</para>
      </summary>
      <param name="lEnable">
      </param>
    </member>
    <member name="M:VO.AppWindow.EnableOleDropTarget(XSharp.__Usual)">
      <param name="lEnable">
      </param>
    </member>
    <member name="M:VO.AppWindow.EnableStatusBar(XSharp.__Usual)">
      <param name="lEnable">
      </param>
    </member>
    <member name="M:VO.AppWindow.EnableSystemMenu(XSharp.__Usual)">
      <param name="lEnable">
      </param>
    </member>
    <member name="M:VO.AppWindow.EnableToolBar(XSharp.__Usual)">
      <summary>
        <para>Enable/disable a toolbar in an application window.</para>
      </summary>
      <param name="lEnable">
      </param>
      <returns>
        <para>The toolbar object.</para>
      </returns>
    </member>
    <member name="M:VO.AppWindow.EnableVerticalScroll(XSharp.__Usual)">
      <param name="lEnable">
      </param>
    </member>
    <member name="M:VO.AppWindow.EndWindow(XSharp.__Usual)">
      <summary>
        <para>Remove this application window from view (passing control back to the routine which created the application window).</para>
      </summary>
      <param name="lSendMsg">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.AppWindow.ErrorMessage(XSharp.__Usual)">
      <summary>
        <para>Display a message in an error box.</para>
      </summary>
      <param name="uText">
      </param>
    </member>
    <member name="M:VO.AppWindow.OLEDragEnter(XSharp.__Usual)">
      <summary>
        <para>Called whenever the mouse enters the window's client area during a drag and drop operation.</para>
      </summary>
      <param name="oOleDragEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.AppWindow.OLEDragLeave(XSharp.__Usual)">
      <summary>
        <para>Called whenever the mouse leaves the window's client area during a drag and drop operation.</para>
      </summary>
      <param name="oOleDragEvent">
      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.AppWindow.OLEDragOver(XSharp.__Usual)">
      <summary>
        <para>Called whenever the mouse moves within the window's client area during a drag and drop operation.</para>
      </summary>
      <param name="oOleDragEvent">
      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.AppWindow.OLEDrop(XSharp.__Usual)">
      <summary>
        <para>Called whenever the mouse is released within the window's client area during a drag and drop operation.</para>
      </summary>
      <param name="oOleDragEvent">
      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.AppWindow.OLEInPlaceActivate">
      <summary></summary>
    </member>
    <member name="M:VO.AppWindow.OLEInPlaceDeactivate">
      <summary></summary>
    </member>
    <member name="P:VO.AppWindow.QuitOnClose">
      <summary>
        <para>A logical value. If set to TRUE, quits the application when this (main) window is closed. The default value is FALSE.</para>
      </summary>
    </member>
    <member name="M:VO.AppWindow.ReportException(XSharp.__Usual)">
      <param name="oRQ">

      </param>
    </member>
    <member name="M:VO.AppWindow.ReportNotification(XSharp.__Usual)">
      <param name="oRQ">

      </param>
    </member>
    <member name="M:VO.AppWindow.Show(XSharp.__Usual)">
      <summary>
        <para>Display an application window.</para>
      </summary>
      <param name="nShowState">

      </param>
    </member>
    <member name="P:VO.AppWindow.StatusBar">
      <summary>
        <para>The status bar currently associated with an application window.</para>
        <para>If none is associated, the status bar of the owner window is returned. If there is no status bar in the ownership hierarchy, NIL is returned.</para>
      </summary>
    </member>
    <member name="M:VO.AppWindow.StatusMessage(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Display a message in an application window's status bar.</para>
      </summary>
      <param name="oHL">
      </param>
      <param name="nType">
      </param>
    </member>
    <member name="M:VO.AppWindow.WarningMessage(XSharp.__Usual,XSharp.__Usual)">
      <param name="aPlace1">
      </param>
      <param name="aPlace2">
      </param>
    </member>
    <member name="T:VO.BaseListBox">
      <summary>
        <para>Provide the base class from which all list boxes are subclassed.</para>
      </summary>
    </member>
    <member name="M:VO.BaseListBox.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a list box.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="kStyle">
      </param>
      <param name="lDataAware">
      </param>
    </member>
    <member name="M:VO.BaseListBox.AddItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Add a new item to a list box at a specified position.</para>
      </summary>
      <param name="cItem">
      </param>
      <param name="nItemNumber">
      </param>
      <returns>
        <para>
          If the item was added, its position in the list box is returned (a value of 1 refers to the first position in the list box). If the item could not be added,
          0 is returned.
        </para>
      </returns>
    </member>
    <member name="M:VO.BaseListBox.Clear">
      <summary>
        <para>Clear a list box of all items.</para>
      </summary>
    </member>
    <member name="P:VO.BaseListBox.CurrentItem">
      <summary></summary>
    </member>
    <member name="P:VO.BaseListBox.CurrentItemNo">
      <summary></summary>
    </member>
    <member name="P:VO.BaseListBox.CurrentText">
      <summary></summary>
    </member>
    <member name="M:VO.BaseListBox.DeleteItem(XSharp.__Usual)">
      <summary>
        <para>Remove an item from a list box.</para>
      </summary>
      <param name="nItemNumber">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.BaseListBox.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a BaseListBox object.</para>
      </summary>
    </member>
    <member name="M:VO.BaseListBox.FindItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Search a list box for a specified string, and return the location of the first item in the list box that matches it.</para>
      </summary>
      <param name="cItem">
      </param>
      <param name="lWholeItem">
      </param>
      <param name="nStart">
      </param>
      <returns>
        <para>
          The position of the first item that contains the matching text, if a match is found (a value of 1 refers to the first position in the list box); if no match
          is found, 0 is returned.
        </para>
        <para>
          For example, if &lt;<i>cItem</i>&gt; matched the fifth string in the list box, the return value would be 5. This means that no earlier string in the list
          box matched it.
        </para>
      </returns>
    </member>
    <member name="M:VO.BaseListBox.GetItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Retrieve the text of a specified list box item.</para>
      </summary>
      <param name="nItemNumber">
      </param>
      <param name="nLength">
      </param>
      <returns>
        <para>The text of the specified item.</para>
      </returns>
    </member>
    <member name="P:VO.BaseListBox.ItemCount">
      <summary>
        <para>A numeric value representing the number of items in the list box.</para>
      </summary>
    </member>
    <member name="M:VO.BaseListBox.SetTop(XSharp.__Usual)">
      <summary>
        <para>Move a specified item to the top of the list box.</para>
      </summary>
      <param name="nItemNumber">
      </param>
    </member>
    <member name="T:VO.Bitmap">
      <summary>
        <para>
          Create a bitmap, which is a bit pattern entity — that is, a two-dimensional array of pixels, each pixel having color attributes (monochrome or
          color).
        </para>
        <para>Bitmaps are created from resource entities, and can be used to create brushes and icons.</para>
      </summary>
    </member>
    <member name="M:VO.Bitmap.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Load a bitmap from the resource entity.</para>
      </summary>
      <param name="xResourceID">
      </param>
      <param name="kLoadOption">
      </param>
      <param name="iWidth">
      </param>
      <param name="iHeight">
      </param>
    </member>
    <member name="M:VO.Bitmap.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a Bitmap object.</para>
      </summary>
    </member>
    <member name="M:VO.Bitmap.Handle">
      <summary>
        <para>Return the handle for a bitmap.</para>
      </summary>
      <returns>
        <para>A handle describing the underlying system object.</para>
      </returns>
    </member>
    <member name="P:VO.Bitmap.Size">
      <summary>
        <para>A Dimension object representing the size of the bitmap.</para>
      </summary>
    </member>
    <member name="T:VO.BitmapObject">
      <summary>
        <para>Create a Bitmap object; this type of entity is part of the DrawObject hierarchy, which provides a means of displaying and manipulating various objects.</para>
      </summary>
    </member>
    <member name="M:VO.BitmapObject.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a BitmapObject object.</para>
      </summary>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="oBitmap">
      </param>
    </member>
    <member name="M:VO.BitmapObject.Draw">
      <summary>
        <para>Draw the BitmapObject object on the window.</para>
      </summary>
    </member>
    <member name="T:VO.BoundingBox">
      <summary>
        <para>
          Create a bounding box, which is a set of four numbers that represent the bottom-left and top-right corners of a rectangle.
        </para>
      </summary>
      <remarks>
        <para>
          Typically, the rectangle is the smallest one that encloses both the overall size and position of another object (for example, a drawing or an area of a window that needs repainting).
        </para>
        <para>
          <b>Note:</b> A bounding box has no graphical representation — it is just four numbers encapsulated in a class.
        </para>
      </remarks>
    </member>
    <member name="M:VO.BoundingBox.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a bounding box.</para>
      </summary>
      <param name="oPoint">
      </param>
      <param name="xPoint">
      </param>
    </member>
    <member name="P:VO.BoundingBox.Bottom">
      <summary>
        <para>A numeric value representing the Y coordinate of the bottom side of a bounding box, in canvas coordinates.</para>
      </summary>
    </member>
    <member name="M:VO.BoundingBox.ConvertToScreen(XSharp.__Usual)">
      <param name="oWindow">
      </param>
    </member>
    <member name="P:VO.BoundingBox.Extent">
      <summary></summary>
    </member>
    <member name="P:VO.BoundingBox.Height">
      <summary>
        <para>A numeric value representing the height of the bounding box, measured in canvas coordinates.</para>
      </summary>
    </member>
    <member name="P:VO.BoundingBox.Left">
      <summary>
        <para>A numeric value representing the X coordinate of the left side of a bounding box, in canvas coordinates.</para>
      </summary>
    </member>
    <member name="P:VO.BoundingBox.Origin">
      <summary>
        <para>A point representing the location of a bounding box, in canvas coordinates.</para>
      </summary>
    </member>
    <member name="M:VO.BoundingBox.PointInside(XSharp.__Usual)">
      <summary>
        <para>Test whether a given point is within the bounds of a bounding box.</para>
      </summary>
      <param name="oPoint">
      </param>
      <returns>
        <para>TRUE if the point is in the bounding box; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.BoundingBox.Right">
      <summary>
        <para>A numeric value representing the X coordinate of the right side of a bounding box, in canvas coordinates.</para>
      </summary>
    </member>
    <member name="P:VO.BoundingBox.Size">
      <summary></summary>
    </member>
    <member name="P:VO.BoundingBox.Top">
      <summary>
        <para>A numeric value representing the Y coordinate of the top side of a bounding box, in canvas coordinates.</para>
      </summary>
    </member>
    <member name="M:VO.BoundingBox.Union_(XSharp.__Usual)">
      <param name="oBB">
      </param>
    </member>
    <member name="P:VO.BoundingBox.Width">
      <summary>
        <para>A numeric value representing the width of the bounding box, in canvas coordinates.</para>
      </summary>
    </member>
    <member name="T:VO.Brush">
      <summary>
        <para>Create a brush, which can be used by the Window:PaintBoundingBox() method and the DrawObject hierarchy.</para>
      </summary>
    </member>
    <member name="M:VO.Brush.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a brush.</para>
      </summary>
      <param name="xColor">
      </param>
      <param name="kHatchStyle">
      </param>
      <param name="oParent">
      </param>
    </member>
    <member name="M:VO.Brush.CreateNew(XSharp.__Usual,XSharp.__Usual)">
      <param name="xColor">
      </param>
      <param name="kHatchStyle">
      </param>
    </member>
    <member name="M:VO.Brush.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a Brush object.</para>
      </summary>
    </member>
    <member name="M:VO.Brush.Handle">
      <summary>
        <para>Return the handle for a brush.</para>
      </summary>
      <returns>
        <para>A handle describing the underlying system object.</para>
      </returns>
    </member>
    <member name="P:VO.Brush.Parent">
      <summary></summary>
    </member>
    <member name="T:VO.Button">
      <summary>
        <para>Provide the base class from which all buttons are subclassed.</para>
      </summary>
    </member>
    <member name="M:VO.Button.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a button.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="cText">
      </param>
      <param name="kStyle">
      </param>
      <param name="lDataAware">
      </param>
    </member>
    <member name="M:VO.Button.AsString">
      <summary></summary>
    </member>
    <member name="P:VO.Button.CurrentText">
      <summary>
        <para>For check boxes, push buttons, and radio buttons, Button:CurrentText contains NULL_STRING.</para>
      </summary>
    </member>
    <member name="P:VO.Button.Image">
      <summary>
        <para>An image object representing the icon or bitmap image that is displayed on a button.</para>
      </summary>
    </member>
    <member name="P:VO.Button.ImageList">
      <summary></summary>
    </member>
    <member name="M:VO.Button.SetStyle(XSharp.__Usual,XSharp.__Usual)">
      <param name="kStyle">
      </param>
      <param name="lEnable">
      </param>
    </member>
    <member name="T:VO.ButtonImageList">
      <summary>
        <para>Create an image list for use with buttons.</para>
      </summary>
    </member>
    <member name="M:VO.ButtonImageList.#ctor(XSharp.__Usual)">
      <summary>
        <para>Constructs an image list object that is used by the button class for WinXP support.</para>
      </summary>
      <param name="oImage">
      </param>
    </member>
    <member name="P:VO.ButtonImageList.Image">
      <summary>
        <para>The current image object in the ButtonImageList.</para>
      </summary>
    </member>
    <member name="T:VO.CheckBox">
      <summary>
        <para>Create check boxes, which are controls that can be toggled on or off by a user (or for 3-state check boxes, to a third state).</para>
      </summary>
    </member>
    <member name="M:VO.CheckBox.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a check box.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="cText">
      </param>
      <param name="kStyle">
      </param>
    </member>
    <member name="P:VO.CheckBox.Checked">
      <summary>
        <para>
          A logical value representing the current state of a check box. It is TRUE if the box is checked (or for 3-state check boxes, if it is in the third
          UNDETERMINED state), otherwise it is FALSE. The CheckBox:Checked assign also changes CheckBox:Value and CheckBox:TextValue. Also, if the CheckBox:Value is
          changed, CheckBox:ValueChanged is set to TRUE.
        </para>
      </summary>
    </member>
    <member name="M:VO.CheckBox.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a CheckBox object.</para>
      </summary>
    </member>
    <member name="P:VO.CheckBox.Image">
      <summary></summary>
    </member>
    <member name="P:VO.CheckBox.TextValue">
      <summary>
        <para>CheckBox:TextValue is initialized to FALSE on data windows, since the control contains no text.</para>
      </summary>
    </member>
    <member name="P:VO.CheckBox.Value">
      <summary>
        <para>
          CheckBox:Value contains TRUE if the check box is in the checked (ON) state or for 3-state check boxes, in the third UNDETERMINED state. It contains FALSE if
          it is in the unchecked state (OFF).
        </para>
      </summary>
    </member>
    <member name="T:VO.ChildAppWindow">
      <summary>
        <para>Create child application windows.</para>
      </summary>
    </member>
    <member name="M:VO.ChildAppWindow.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a child application window.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="lManaged">
      </param>
      <param name="lImpl">
      </param>
    </member>
    <member name="P:VO.ChildAppWindow.ContextMenu">
      <inheritdoc />
    </member>
    <member name="M:VO.ChildAppWindow.Default(XSharp.__Usual)">
      <param name="oEvent">
      </param>
    </member>
    <member name="M:VO.ChildAppWindow.Destroy">
      <inheritdoc />
    </member>
    <member name="M:VO.ChildAppWindow.EnableBorder(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="M:VO.ChildAppWindow.EnableHorizontalScroll(XSharp.__Usual)">
      <summary></summary>
    </member>
    <member name="M:VO.ChildAppWindow.EnableStatusBar(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="M:VO.ChildAppWindow.EnableVerticalScroll(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.ChildAppWindow.Menu">
      <inheritdoc />
    </member>
    <member name="M:VO.ChildAppWindow.Show(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.ChildAppWindow.StatusBar">
      <inheritdoc />
    </member>
    <member name="P:VO.ChildAppWindow.ToolBar">
      <inheritdoc />
    </member>
    <member name="T:VO.Clipboard">
      <summary>
        <para>
          Create an object to refer to the Windows clipboard, which allows the sharing of text and bitmaps between different applications. Unlike DDE, the data
          transfer is almost always user-initiated, such as when the user of an application selects the Paste menu command.
        </para>
      </summary>
    </member>
    <member name="M:VO.Clipboard.#ctor">
      <summary>
        <para>Construct a clipboard.</para>
      </summary>
    </member>
    <member name="M:VO.Clipboard.Clear">
      <summary>
        <para>Clear the contents of the clipboard.</para>
      </summary>
    </member>
    <member name="P:VO.Clipboard.FileCount">
      <summary>
        <para>Used to determine how many files were dropped.</para>
      </summary>
    </member>
    <member name="M:VO.Clipboard.GetItemSize(XSharp.__Usual)">
      <summary>
        <para>Retrieve the size of the item in the clipboard, specifying either a string or a bitmap object.</para>
      </summary>
      <param name="kFormat">
      </param>
    </member>
    <member name="M:VO.Clipboard.Insert(XSharp.__Usual)">
      <summary>
        <para>Insert text or a bitmap into the clipboard.</para>
      </summary>
      <param name="xType">
      </param>
    </member>
    <member name="M:VO.Clipboard.InsertRTF(XSharp.__Usual)">
      <summary>
        <para>Insert an RTF string into the clipboard.</para>
      </summary>
      <param name="cText">
      </param>
    </member>
    <member name="M:VO.Clipboard.RetrieveBitmap(XSharp.__Usual)">
      <param name="oBitmap">
      </param>
    </member>
    <member name="M:VO.Clipboard.RetrieveFiles(XSharp.__Usual)">
      <summary>
        <para>Retrieves an array of file names.</para>
      </summary>
      <param name="lMustExist">
      </param>
      <returns>
        <para>An array of file names.</para>
      </returns>
    </member>
    <member name="M:VO.Clipboard.RetrieveRTF(XSharp.__Usual)">
      <summary>
        <para>Retrieve an RTF string from the clipboard.</para>
      </summary>
      <param name="nStringLength">
      </param>
    </member>
    <member name="M:VO.Clipboard.RetrieveString(XSharp.__Usual)">
      <param name="nStringLength">
      </param>
    </member>
    <member name="T:VO.Color">
      <summary>
        <para>Select or create a color, which can be used by a Brush, Pen, or DrawObject object.</para>
      </summary>
    </member>
    <member name="M:VO.Color.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a color using an RGB triplet.</para>
      </summary>
      <param name="nRed">
      </param>
      <param name="nGreen">
      </param>
      <param name="nBlue">
      </param>
    </member>
    <member name="P:VO.Color.Blue">
      <summary>
        <para>A numeric value between 0 (lowest intensity) and 255 (highest intensity) representing the amount of blue in a color.</para>
      </summary>
    </member>
    <member name="P:VO.Color.ColorRef">
      <summary></summary>
    </member>
    <member name="P:VO.Color.Green">
      <summary>
        <para>A numeric value between 0 (lowest intensity) and 255 (highest intensity) representing the amount of green in a color.</para>
      </summary>
    </member>
    <member name="P:VO.Color.Red">
      <summary>
        <para>A numeric value between 0 (lowest intensity) and 255 (highest intensity) representing the amount of red in a color.</para>
      </summary>
    </member>
    <member name="T:VO.ComboBox">
      <summary>
        <para>Create a combo box, which is used when you need to provide the user with both a list of choices and an edit control (to optionally allow them to type in their own choice).</para>
      </summary>
    </member>
    <member name="M:VO.ComboBox.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a combo box.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="kComboType">
      </param>
      <param name="kStyle">
      </param>
    </member>
    <member name="P:VO.ComboBox.CurrentText">
      <summary>
        <para>
          ComboBox:CurrentText contains the text currently appearing in the edit box area of the combo box.
        </para>
      </summary>
      <remarks>
        <para>
          The CurrentText assign also changes TextValue and Value.
          If the assigned CurrentText does not match one of the displayed items, then CurrentItemNo is set to 0. If the assigned value represents a change, then
          ValueChanged will be set to TRUE.
        </para>
      </remarks>
    </member>
    <member name="P:VO.ComboBox.EditHandle">
      <summary>
        <para>The handle to the edit portion of a ComboBox control.</para>
      </summary>
    </member>
    <member name="P:VO.ComboBox.EditHeight">
      <summary>
        <para>Integer value specifying the height of the embedded edit control.</para>
      </summary>
    </member>
    <member name="M:VO.ComboBox.EnableAutoComplete(XSharp.__Usual)">
      <param name="dwFlags">
      </param>
    </member>
    <member name="M:VO.ComboBox.Font(XSharp.__Usual,XSharp.__Usual)">
      <param name="oNewFont">
      </param>
      <param name="lRescal">
      </param>
    </member>
    <member name="P:VO.ComboBox.ReadOnly">
      <summary></summary>
    </member>
    <member name="M:VO.ComboBox.RemoveEditBalloonTip">
      <summary></summary>
    </member>
    <member name="M:VO.ComboBox.SetCueBanner(XSharp.__Usual)">
      <summary>
        <para>Add a cue banner to the Edit portion of the ComboBox control.</para>
      </summary>
      <param name="cTitle">

      </param>
      <remarks>
        <para>Add a cue banner to the Edit portion of the ComboBox control.</para>
        <para>
          <b>NOTE: Only available on Windows XP or later.</b>
        </para>
      </remarks>
    </member>
    <member name="M:VO.ComboBox.ShowEditBalloonTip(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="cTitle">

      </param>
      <param name="cText">

      </param>
      <param name="dwIcon">

      </param>
    </member>
    <member name="T:VO.ComboBoxEx">
      <summary>
        <para>Encapsulate a ComboBoxEx control.</para>
      </summary>
    </member>
    <member name="M:VO.ComboBoxEx.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Instantiate a new ComboBoxEx object.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="kComboType">
      </param>
      <param name="kStyle">
      </param>
    </member>
    <member name="M:VO.ComboBoxEx.AddItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Add a new item to the ComboBoxEx object.</para>
      </summary>
      <param name="cItem">
      </param>
      <param name="nItemNumber">
      </param>
      <param name="uRetValue">
      </param>
      <param name="iImageIdx">
      </param>
      <param name="iSelectedIdx">
      </param>
      <param name="iOverlayIdx">
      </param>
      <param name="iIndent">
      </param>
      <returns>
        <para>The position of the newly inserted item.</para>
      </returns>
    </member>
    <member name="M:VO.ComboBoxEx.DeleteItem(XSharp.__Usual)">
      <summary>
        <para>Remove an item from the ComboBox object.</para>
      </summary>
      <param name="nItemNumber">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ComboBoxEx.Dispatch(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.ComboBoxEx.EditHandle">
      <summary></summary>
    </member>
    <member name="M:VO.ComboBoxEx.GetExCBStyle(XSharp.__Usual)">
      <summary></summary>
      <param name="kExStyle">
      </param>
      <returns></returns>
    </member>
    <member name="M:VO.ComboBoxEx.GetItemAttributes(XSharp.__Usual)">
      <param name="uItemNumber">
      </param>
    </member>
    <member name="P:VO.ComboBoxEx.ImageList">
      <summary>
        <para>The ImageList object containing the images for the items in the ComboBoxEx object.</para>
      </summary>
    </member>
    <member name="M:VO.ComboBoxEx.InsertItem(XSharp.__Usual)">
      <summary></summary>
      <param name="uComboBoxExItem">
      </param>
      <returns></returns>
    </member>
    <member name="P:VO.ComboBoxEx.Length">
      <summary>
        <para>The length of the current text. Overrides the Length property of its parent class to provide the same functionality in this specialized class.</para>
      </summary>
    </member>
    <member name="M:VO.ComboBoxEx.SetExCBStyle(XSharp.__Usual,XSharp.__Usual)">
      <summary></summary>
      <param name="kExStyle">
      </param>
      <param name="lEnable">
      </param>
      <returns></returns>
    </member>
    <member name="M:VO.ComboBoxEx.SetItemAttributes(XSharp.__Usual)">
      <param name="uComboBoxExItem">
      </param>
    </member>
    <member name="T:VO.ComboBoxExEndEditEvent">
      <summary>
        <para>Provide information about a ComboBoxEx EndEdit event</para>
      </summary>
    </member>
    <member name="M:VO.ComboBoxExEndEditEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.ComboBoxExEndEditEvent.IsChanged">
      <summary></summary>
    </member>
    <member name="P:VO.ComboBoxExEndEditEvent.NewSelection">
      <summary></summary>
    </member>
    <member name="P:VO.ComboBoxExEndEditEvent.TextValue">
      <summary></summary>
    </member>
    <member name="P:VO.ComboBoxExEndEditEvent.Why">
      <summary></summary>
    </member>
    <member name="T:VO.ComboBoxExItem">
      <summary>
        <para>This class contains all properties of a ComboBoxEx item.</para>
      </summary>
      <remarks>
        <para>It is used with the ComboBoxEx methods</para>
        <para>ComboBoxEx:SetItemAttributes()</para>
        <para>ComboBoxEx:GetItemAttributes()</para>
        <para>ComboBoxEx:InsertItem()</para>
      </remarks>

    </member>
    <member name="M:VO.ComboBoxExItem.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Instantiate a new ComboBoxExItem object.</para>
      </summary>
      <param name="cItem">
      </param>
      <param name="nItemNumber">
      </param>
      <param name="uRetValue">
      </param>
      <param name="iImageIdx">
      </param>
      <param name="iSelectedIdx">
      </param>
      <param name="iOverlayIdx">
      </param>
      <param name="iIndent">
      </param>
    </member>
    <member name="F:VO.ComboBoxExItem.ImageIndex">
      <summary></summary>
    </member>
    <member name="F:VO.ComboBoxExItem.Indent">
      <summary></summary>
    </member>
    <member name="F:VO.ComboBoxExItem.ItemIndex">
      <summary></summary>
    </member>
    <member name="F:VO.ComboBoxExItem.OverlayImageIndex">
      <summary></summary>
    </member>
    <member name="F:VO.ComboBoxExItem.SelectedImageIndex">
      <summary></summary>
    </member>
    <member name="F:VO.ComboBoxExItem.TextValue">
      <summary></summary>
    </member>
    <member name="F:VO.ComboBoxExItem.Value">
      <summary></summary>
    </member>
    <member name="T:VO.Control">
      <summary>
        <para>Provide the base class from which all controls are subclassed.</para>
      </summary>
    </member>
    <member name="M:VO.Control.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a control.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="cRegClass">
      </param>
      <param name="kStyle">
      </param>
      <param name="lDataAware">
      </param>
    </member>
    <member name="M:VO.Control.Activate(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the control has focus and a window is activated.</para>
      </summary>
      <param name="oEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Control.AsString">
      <summary>
        <para>Return the contents of the control (or its identifying label).</para>
      </summary>
    </member>
    <member name="P:VO.Control.Background">
      <summary>
        <para>
          The brush used for painting the background of the control. For example, in a single line edit control, the background is the color behind the text in the
          edit control.
        </para>
      </summary>
      <remarks>
        <para>
          <b>Note:</b> This method has no effect if three-dimensional controls have been enabled (via a call to the Enable3DControls() function).
        </para>
      </remarks>
    </member>
    <member name="P:VO.Control.Caption">
      <summary>
        <para>
          A string representing the caption of the control (i.e., the static text identifying the control). Examples include the label on the face of a button, the
          text written next to a check box or radio button, or the text on the border of a radio button group or group box.
        </para>

      </summary>
      <remarks>
        <para>
          Note that not all controls have a visible caption. For example, the ordinary edit control (MultiLineEdit class) does not have a visible
          caption — the text commonly displayed next to the edit is actually a separate control, placed there by the Window Editor. Thus, assigning a new value
          to the caption of this type of control does not change anything on the screen.
        </para>
      </remarks>
    </member>
    <member name="P:VO.Control.ContextMenu">
      <summary>
        <para>A menu object representing the local pop-up menu for a control.</para>
      </summary>
    </member>
    <member name="P:VO.Control.ControlID">
      <summary>
        <para>
          A number between 1 and 8000 representing the unique ID of a control.
        </para>
      </summary>
      <remarks>
        <para>
          Every control has its own unique ID to distinguish it from other controls (enabling the
          owner window to determine which control generated an event).
        </para>
      </remarks>
    </member>
    <member name="M:VO.Control.Create">
      <summary>
        <para>Creates the underlying windows control.</para>
      </summary>
      <returns>
        <para>The handle of the control, if successful. A null handle (NULL_PTR) is returned if the control creation failed.</para>
      </returns>
    </member>
    <member name="P:VO.Control.DataField">
      <summary></summary>
    </member>
    <member name="M:VO.Control.Deactivate(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the control has focus and a window is deactivated.</para>
      </summary>
      <param name="oEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Control.Default(XSharp.__Usual)">
      <param name="oEvent">

      </param>
    </member>
    <member name="M:VO.Control.Destroy">
      <summary>
        <para>Provide a method to de-instantiate any Control object.</para>
      </summary>
    </member>
    <member name="M:VO.Control.Disable">
      <summary>
        <para>Disable a control (until a subsequent call to Control:Enable()).</para>
      </summary>
    </member>
    <member name="M:VO.Control.DisableTheme">
      <summary>
        <para>Disable the WinXP theme for a control.</para>
      </summary>
    </member>
    <member name="M:VO.Control.Dispatch(XSharp.__Usual)">
      <summary>
        <para>Provide the prototype dispatcher for events within the system when the control has focus; routing various events to their appropriate event handlers.</para>
      </summary>
      <param name="oEvent">

      </param>
      <remarks>
        <para>
          <b>
            <i>Important!</i>
            <br />
          </b>
          <i>This is a callback method used by the runtime. Normally, it should not be called in your application code.</i>
        </para>
      </remarks>
      <returns>
        <para>A numeric value representing the event handler to handle the event.</para>
      </returns>
    </member>
    <member name="M:VO.Control.Drop(XSharp.__Usual)">
      <param name="oDragEvent">

      </param>
    </member>
    <member name="M:VO.Control.Enable)">
      <summary>
        <para>Enable a control that was previously disabled.</para>
      </summary>
    </member>
    <member name="F:VO.Control.EventReturnValue">
      <summary></summary>
    </member>
    <member name="M:VO.Control.Expose(XSharp.__Usual)">
      <summary>
      </summary>
      <summary></summary>
      <param name="oExposeEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="P:VO.Control.FieldSpec">
      <summary>
        <para>
          The field specification connected to the control.
        </para>
      </summary>
      <remarks>
        <para>
          From the field specification, you can retrieve additional information about the control — for example:
        </para>
        <para>cPicture := oControl:FieldSpec:Picture</para>
        <para>IF !oControl:FieldSpec:Validate(x)</para>
        <para>    oHLStatus := oControl:FieldSpec:Status</para>
        <para>ENDIF</para>
      </remarks>
    </member>

    <member name="M:VO.Control.FocusChange(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the control has focus and the input focus changes from the current control to another (or vice versa).</para>
      </summary>
      <param name="oFocusChangeEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Control.Handle(XSharp.__Usual)">
      <param name="uType">

      </param>

      <summary>
        <para>Return the handle for a control.</para>
      </summary>
      <returns>
        <para>A handle to the "window" (control), describing the underlying system object.</para>
      </returns>
    </member>
    <member name="M:VO.Control.HasBorder">
      <summary></summary>
    </member>
    <member name="M:VO.Control.HasStyle(System.Int32)">
      <param name="kStyle">

      </param>
    </member>
    <member name="M:VO.Control.Hide">
      <summary>
        <para>Hide a control so it is not visible (until a subsequent call to Control:Show()).</para>
      </summary>
    </member>
    <member name="M:VO.Control.HorizontalScroll(XSharp.__Usual)">
      <param name="oScrollEvent">

      </param>
    </member>
    <member name="P:VO.Control.HyperLabel">
      <summary>
        <para>The hyperlabel connected to the control. </para>
      </summary>
      <remarks>
        <para>From the hyperlabel, you can retrieve additional information about the control — for example:</para>
        <para>cCaption := oControl:HyperLabel:Caption</para>
        <para>cDescription := oControl:HyperLabel:Description</para>
        <para>cHelpContext := oControl:HyperLabel:HelpContext</para>
      </remarks>
    </member>
    <member name="P:VO.Control.IsDestroyed">
      <summary></summary>
    </member>
    <member name="P:VO.Control.IsEditable">
      <summary></summary>
    </member>
    <member name="M:VO.Control.IsEnabled">
      <summary></summary>
    </member>
    <member name="M:VO.Control.IsReadOnly">
      <summary></summary>
    </member>
    <member name="M:VO.Control.IsVisible">
      <summary>
        <para>Report if this control is visible (completely or partially) or hidden.</para>
      </summary>
      <returns>
        <para>TRUE if the control is visible; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.Control.KeyDown(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the control has focus and a key on the keyboard is pressed.</para>
      </summary>
      <param name="oKeyEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Control.KeyUp(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the control has focus and a key on the keyboard is released.</para>
      </summary>
      <param name="oKeyEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Control.LinkDF(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Connect a control to a data field in a data server.</para>
      </summary>
      <param name="oDS">

      </param>
      <param name="siDF">

      </param>
    </member>
    <member name="M:VO.Control.MenuInit(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a pop-up menu owned by the control is about to pop up.</para>
      </summary>
      <param name="oMenuInitEvent">
      </param>
    </member>
    <member name="M:VO.Control.MenuSelect(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when an item on a menu owned by the control is highlighted.</para>
      </summary>
      <param name="oMenuSelectEvent">
      </param>
    </member>

    <member name="P:VO.Control.Modified">
      <summary>
        <para>
          A logical value that is set to TRUE when a standard edit control or editable combo box is in the process of being modified. When the editing is completed
          and focus shifts to another control, Control:Modified is reset to FALSE. Control:Modified is initialized to FALSE when the control is created.
        </para>
      </summary>
    </member>
    <member name="M:VO.Control.MouseButtonDoubleClick(XSharp.__Usual)">
      <param name="oMouseEvent">
      </param>
    </member>
    <member name="M:VO.Control.MouseButtonDown(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the control has focus, the mouse pointer is positioned over the window, and a mouse button is clicked.</para>
      </summary>
      <param name="oMouseEvent">
      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Control.MouseButtonUp(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the control has focus, the mouse pointer is positioned over the window, and a mouse button is released.</para>
      </summary>
      <param name="oMouseEvent">
      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Control.MouseDrag(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the control has focus and a mouse with one or more buttons clicked is moved in the window.</para>
      </summary>
      <param name="oMouseEvent">
      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Control.MouseMove(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the control has focus and the mouse is moved in the control.</para>
      </summary>
      <param name="oMouseEvent">
      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Control.Move(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the control has focus and the control is moved (either by the user or by the application).</para>
      </summary>
      <param name="oMoveEvent">
      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>

    <member name="P:VO.Control.Name">
      <summary>
        <para>A string representing the name of the control. Do not confuse the name with the caption: the name is a programmer's ID and is never seen by the user.</para>
      </summary>
      <remarks>
        <para>
          The name is important in steering the built-in processing of the system. For example, the name of a push button is the name of the method that is invoked
          when the button is clicked, and the name of a control is the database field to which it is linked when a data window is linked to a data server.
        </para>
      </remarks>
    </member>
    <member name="P:VO.Control.NameSym">
      <summary>
        <para>A symbol representing the name of the control. Do not confuse the name with the caption: the name is a programmer's ID and is never seen by the user.</para>
      </summary>
      <remarks>
        <para>
          The name is important in steering the built-in processing of the system. For example, the name of a push button is the name of the method that is invoked
          when the button is clicked, and the name of a control is the database field to which it is linked when a data window is linked to a data server.
        </para>
      </remarks>
    </member>
    <member name="P:VO.Control.Origin">
      <summary>
        <para>A point representing the location of a control on its owner window, in canvas coordinates.</para>
      </summary>
    </member>
    <member name="M:VO.Control.OverRide(XSharp.__Usual)">
      <param name="lEnable">

      </param>
    </member>
    <member name="P:VO.Control.Owner">
      <summary>
        <para>The owner window of a control.</para>
      </summary>
    </member>
    <member name="P:VO.Control.OwnerAlignment">
      <summary>
        <para>Constant representing how the window will be aligned within its owner window. </para>
      </summary>
      <remarks>
        <para>If a value has been set for this property, any resizing of the owner</para>
        <para>window will cause the window to be automatically realigned, resized, and/or moved accordingly.</para>
        <para>
          <b>Note:</b> By default (or by setting OwnerAlignment to &lt;Auto&gt; in the Window Editor), a control will appear where it was placed by the programmer and
          will not be realigned, resized, and/or moved when its owner window is resized.
        </para>
        <para>There are two assigns that aid owner alignment:</para>
        <list type="bullet">
          <item>
            Control:OwnerAlignment  for controls
          </item>
          <item>
            Window:OwnerAlignment  for windows
          </item>
        </list>
        <para>
          Whenever one of these assigns is called, the current size and position of the control or window is saved to an internal array. The assign can be called as
          often as is required without any difficulty and it will simply over right the old values.
        </para>
        <para>Starting with build 2824 this property can take two different forms:</para>
        <list type ="bullet">
          <item>proportional mode</item>
          <item>linear mode</item>
        </list>
        <h2>Proportional OwnerAlignment</h2>
        <para>
          With <b>proportional mode</b> you use the OA_ defines to specify how the position and size of the controls should change
          when the size of the window changes. For example:
        </para>
        <para>
          With linear mode you do not use predefines OA_ defines but you specify the amount of change for each of the 4 properties of a control in code:
        </para>
        <list type="bullet">
          <item>The X position</item>
          <item>The Y position</item>
          <item>The Width</item>
          <item>The Height</item>
        </list>
      </remarks>
    </member>
    <member name="M:VO.Control.PerformValidations">
      <summary></summary>
    </member>
    <member name="P:VO.Control.ReadOnly">
      <summary></summary>
    </member>
    <member name="M:VO.Control.RegisterTimer(XSharp.__Usual,XSharp.__Usual)">
      <param name="nInterval">
      </param>
      <param name="lOneTime">
      </param>
    </member>
    <member name="M:VO.Control.RePaint">
      <summary></summary>
    </member>
    <member name="M:VO.Control.Resize(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the control has focus and the control changes size.</para>
      </summary>
      <param name="oResizeEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Control.RestoreUpdate">
      <summary>
        <para>Resume all drawing updates for a control (after Control:SuspendUpdate() is called).</para>
      </summary>
    </member>
    <member name="P:VO.Control.Server">
      <summary>
        <para>The server object that currently connected to this control. If no server is connected, the value is NIL.</para>
      </summary>
    </member>

    <member name="M:VO.Control.SetExStyle(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Pass input focus to a control, thereby directing all mouse and keyboard input to the control.</para>
      </summary>
      <param name="kExStyle">

      </param>
      <param name="lEnable">

      </param>
    </member>
    <member name="M:VO.Control.SetFocus">
      <summary></summary>
    </member>
    <member name="M:VO.Control.SetStyle(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set the style for the control.</para>
      </summary>
      <param name="kStyle">
      </param>
      <param name="lEnable">
      </param>
    </member>
    <member name="M:VO.Control.Show">
      <summary>
        <para>Display a control so it is visible.</para>
      </summary>
    </member>
    <member name="P:VO.Control.Size">
      <summary>
        <para>A dimension representing the size of a control.</para>
      </summary>
    </member>
    <member name="P:VO.Control.Status">
      <summary>
        <para>A hyperlabel indicating the status of the control after a validation attempt or other action.</para>
      </summary>
      <remarks>
        <para>
          If the validation passed or the operation was successful, this value is NULL_OBJECT; if not, it contains information about the failure, which can be
          retrieved and displayed — for example:
        </para>
        <para>IF !oControl:FieldSpec:Validate(x)</para>
        <para>    WarningBox{SELF, oControl:Status:Caption,;</para>
        <para>     oControl:Status:Description}:Show()</para>
        <para>ENDIF</para>
        <para>
          Hyperlabels are commonly used in the system, and in this case, the warning box is capable of accepting a hyperlabel and extracting the relevant information
          from it. Thus, this example can be simplified even further:
        </para>
        <para>IF !oControl:FieldSpec:Validate(x)</para>
        <para>    WarningBox{SELF,oControl:Status}:Show()</para>
        <para>ENDIF</para>
      </remarks>
    </member>
    <member name="P:VO.Control.Style">
      <summary></summary>
    </member>
    <member name="M:VO.Control.SuspendUpdate">
      <summary>
        <para>Temporarily suspend all drawing updates for a control; drawing resumes with a call to Control:RestoreUpdate().</para>
      </summary>
    </member>
    <member name="P:VO.Control.TextValue">
      <summary>
        <para>
          A string representing the value held in the control.
        </para>
      </summary>
      <remarks>
        <para>
          For example, in a standard edit control, the value can be "Jones" or "$14,683.00". In a check box, the
          value can be "TRUE" or "FALSE". For push buttons, Control:TextValue is set to NULL_STRING. In a list box or combo box, Control:TextValue holds the display
          value text. In a radio button group, Control:TextValue holds the caption text of the radio button that is currently selected.
        </para>
        <para>
          Note that the string is formatted according to the picture clause held in the field specification of the control; in turn, controls linked to a data server
          inherit the field specification - and hence picture clause - from the field of the server.
        </para>
      </remarks>
    </member>
    <member name="M:VO.Control.Timer">
      <summary></summary>
    </member>
    <member name="P:VO.Control.ToolTipText">
      <summary>
        <para>String value representing the tooltip text used when the user moves the mouse pointer over the control.</para>
      </summary>
      <remarks>
        <para>
          <b>Note:</b> Tooltips are not supported for static controls, such as fixed text, group boxes, etc.
        </para>
      </remarks>
    </member>
    <member name="P:VO.Control.UseHLForToolTip">
      <summary>
        <para>Logical value determining whether the descriptive text of a control's Hyperlabel should be used as the tooltip text.</para>
      </summary>
      <remarks>
        <para>
          <b>Note:</b> Any ToolTipText setting will override UseHLForToolTip.
        </para>
      </remarks>
    </member>
    <member name="M:VO.Control.ValidateControl">
      <summary></summary>
    </member>
    <member name="P:VO.Control.Value">
      <summary>
        <para>
          The value held in the control, in whatever data type the control holds.
        </para>
      </summary>
      <remarks>
        <para>
          Control:Value is thus of the usual data type. For example, in a regular edit
          control, the value can be the string "Jones" or the number 14683. In a check box, Control:Value can be TRUE or FALSE. In a list box or combo box, the
          Control:Value is generally one of the return values (unless the control is bound to a field where the actual contents is not one of the allowable choices). In
          a radio button group, Control:Value holds the group value (specified in the Window Editor) of the radio button that is currently selected; if none is selected,
          Control:Value is set to NIL.
        </para>
        <para>
          The data type of the control's Value is determined by its field specification; in turn, controls linked to a data server inherit the field
          specification — and hence data type — from the field of the server. When the control is made data-aware, by setting its name to the name of
          a field in the server attached to the data window, Control:Value is able to automatically read from and write to this field.
        </para>
        <para>
          <b>Note:</b> Value may not always be consistent with the state of the control, as indicated to the end-user. For example, if the data value for the field is
          not one of the allowed choices for a list box or combo box return value, or among the group value settings for the radio buttons in a radio button group, the
          control will be in a "no-match" situation. In this case the control will revert to its initial unselected state.
        </para>
      </remarks>
    </member>
    <member name="P:VO.Control.ValueChanged">
      <summary>
        <para>
          A logical value representing whether the control's Value has been changed from its prior setting.
        </para>
      </summary>
      <remarks>
        <para>
          TRUE indicates that it has been changed from its prior
          setting, while FALSE indicates it has not. The Control:ValueChanged access is especially useful when the control is bound to a field in a server, since it is
          reset to FALSE each time you move to a new record. It is set to TRUE if you have changed from the original data value.
        </para>
      </remarks>
    </member>
    <member name="M:VO.Control.VerticalScroll(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the control has focus and a vertical scroll bar is scrolled.</para>
      </summary>
      <param name="oScrollEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="T:VO.ControlEvent">
      <summary>
        <para>Provide information about a control that generated a control event</para>
      </summary>
    </member>
    <member name="M:VO.ControlEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>

    <member name="P:VO.ControlEvent.Control">
      <summary>
        <para>The control that generated this control event.</para>
      </summary>
      <remarks>
        <para>
          <b>Note:</b> If the control that generated the control event was not created as a system control, this value is NIL. This can happen if a dialog window was
          specified in the resource entity, but was not registered in the system (that is, the window is not part of the DialogWindow class).
        </para>
      </remarks>
    </member>
    <member name="P:VO.ControlEvent.ControlID">
      <summary>
        <para>
          A number between 1 and 8000 representing the unique ID of the control that generated this control event. Every control has its own unique ID to distinguish
          it from other controls (enabling the owner window to determine which control generated an event).
        </para>
      </summary>
    </member>
    <member name="P:VO.ControlEvent.Description">
      <summary>
        <para>
          A string representing the description of the control that generated this control event. The description is contained in the control's hyperlabel. This value
          is a NULL_STRING if the control has no description.
        </para>
      </summary>
    </member>
    <member name="P:VO.ControlEvent.HelpContext">
      <summary>
        <para>A string representing the help context ID of the control that generated this control event. This ID is contained in the control's hyperlabel.</para>
      </summary>
      <remarks>
        <para>
          <b>Note:</b> A help context ID indicates the place in the hypertext system where the system looks for help concerning this control.
        </para>
      </remarks>
    </member>
    <member name="P:VO.ControlEvent.HyperLabel">
      <summary>
        <para>
          The hyperlabel connected to the control event. From the hyperlabel, you can retrieve additional information about the control event — for
          example:
        </para>
      </summary>
      <remarks>
        <para>cCaption := oControlEvent:HyperLabel:Caption</para>
        <para>cDescription := oControlEvent:HyperLabel:Description</para>
        <para>cHelpContext := oControlEvent:HyperLabel:HelpContext</para>
      </remarks>
    </member>
    <member name="P:VO.ControlEvent.Name">
      <summary>
        <para>
          A string representing the name of the control that generated the event. Do not confuse the name with the caption: the name is a programmer's ID and is never
          seen by the user.
        </para>
      </summary>
    </member>
    <member name="P:VO.ControlEvent.NameSym">
      <summary>
        <para>
          A symbol representing the name of the control that generated the event. Do not confuse the name with the caption: the name is a programmer's ID and is never
          seen by the user.
        </para>
      </summary>
    </member>
    <member name="T:VO.ControlFocusChangeEvent">
      <summary>
        <para>Provide information about a control that generated a FocusChangeevent</para>
      </summary>
    </member>
    <member name="M:VO.ControlFocusChangeEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.ControlFocusChangeEvent.Control">
      <summary></summary>
    </member>
    <member name="T:VO.ControlNotifyEvent">
      <summary>
        <para>Provide information about a control notification event, which is generated when a control is required to notify its parent window of an event.</para>
      </summary>
    </member>

    <member name="M:VO.ControlNotifyEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.ControlNotifyEvent.Control">
      <summary>
        <para>The Control object that generated this event.</para>
      </summary>
    </member>
    <member name="P:VO.ControlNotifyEvent.NotifyCode">
      <summary></summary>
    </member>
    <member name="T:VO.ControlWindow">
      <summary>
        <para>Create a control as part of the Window hierarchy, thereby allowing the behavior of the control to be customized using event handlers.</para>
      </summary>
    </member>
    <member name="M:VO.ControlWindow.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct a control window from an existing control.</para>
      </summary>
      <param name="oControl">

      </param>
    </member>
    <member name="P:VO.ControlWindow.Control">
      <summary>
        <para>
          The control on which the control window is based. This information allows you to use the control window's inherited methods, so that you can use its
          built-in services.
        </para>
      </summary>
    </member>
    <member name="P:VO.ControlWindow.ControlID">
      <summary>
        <para>
          A number between 1 and 8000 representing the unique ID of the control on which the control window is based. Every control has its own unique ID to
          distinguish it from other controls (enabling the owner window to determine which control generated an event).
        </para>
      </summary>
    </member>
    <member name="M:VO.ControlWindow.Default(XSharp.__Usual)">
      <param name="oEvent">
      </param>
    </member>
    <member name="M:VO.ControlWindow.Destroy">
      <summary>
        <para>Free memory resources allocated for a ControlWindow object and its derived objects.</para>
      </summary>
    </member>
    <member name="M:VO.ControlWindow.Disable">
      <inheritdoc />
    </member>
    <member name="M:VO.ControlWindow.Dispatch(XSharp.__Usual)">
      <inheritdoc />
    </member>

    <member name="M:VO.ControlWindow.Enable">
      <inheritdoc />
    </member>
    <member name="M:VO.ControlWindow.Hide">
      <inheritdoc />
    </member>
    <member name="P:VO.ControlWindow.HyperLabel">
      <inheritdoc />
    </member>

    <member name="P:VO.ControlWindow.Modified">
      <summary>
        <para>
          A logical value indicating whether the control on which the control window is based has been changed by the user since it was last set. TRUE indicates that
          the control has changed (even if it has not yet been validated or has failed validation); FALSE indicates that it has not.
        </para>
      </summary>
    </member>
    <member name="P:VO.ControlWindow.Origin">
      <summary>
        <para>A point representing the position of a control window on its owner window, in canvas coordinates.</para>
      </summary>
    </member>
    <member name="M:VO.ControlWindow.Override">
      <summary></summary>
    </member>
    <member name="M:VO.ControlWindow.SetFocus">
      <summary>
        <para>Pass input focus to a control window, thereby directing all mouse and keyboard input to its associated control.</para>
      </summary>
    </member>
    <member name="P:VO.ControlWindow.Size">
      <summary>
        <para>A dimension representing the size of a control window.</para>
      </summary>
    </member>
    <member name="T:VO.CurHand">
      <summary>A class that represents the cursor in the shape of a hand.</summary>

    </member>
    <member name="M:VO.CurHand.#ctor">
      <summary>Initializes a new instance of the CurHand class.</summary>
    </member>
    <member name="T:VO.Cursor">
      <summary>
        <para>Create a text cursor, which is used to visually represent the position in a window where the next piece of text appears.</para>
      </summary>
    </member>
    <member name="M:VO.Cursor.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a cursor.</para>
      </summary>
      <param name="oOwner">

      </param>
      <param name="oObject">

      </param>
      <param name="lDimmed">

      </param>
    </member>
    <member name="M:VO.Cursor.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a Cursor object.</para>
      </summary>
    </member>
    <member name="M:VO.Cursor.Handle(XSharp.__Usual)">
      <summary>
        <para>Return the handle for a cursor.</para>
      </summary>
      <param name="nHandleType">
      </param>
      <returns>
        <para>A handle describing the underlying system object.</para>
      </returns>
    </member>
    <member name="M:VO.Cursor.Hide">
      <summary>
        <para>Hide a cursor so it is not visible (until a subsequent call to Cursor:Show()).</para>
      </summary>
    </member>
    <member name="P:VO.Cursor.Position">
      <summary>
        <para>A point — in owner window canvas coordinates — representing the current position of the cursor.</para>
      </summary>
    </member>
    <member name="M:VO.Cursor.Show">
      <summary>
        <para>Display a cursor so it is visible.</para>
      </summary>
    </member>
    <member name="T:VO.CustomControl">
      <summary>
        <para>Provide a base custom control class from which to derive specialized custom controls.</para>
      </summary>
    </member>
    <member name="M:VO.CustomControl.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a custom control.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="kStyle">
      </param>
      <param name="lDataAware">
      </param>
    </member>
    <member name="T:VO.DataBrowser">
      <summary>
        <para>Create a data browser, which is a spreadsheet-like table for displaying information from a data server.</para>
      </summary>
    </member>
    <member name="M:VO.DataBrowser.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a data browser.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
    </member>
    <member name="M:VO.DataBrowser.AddColumn(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Add one or more columns to a data browser.</para>
      </summary>
      <param name="oGColumn">
      </param>
      <param name="nIndex">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.DataBrowser.AsString">
      <summary>
        <para>Return an identifying label for the data browser.</para>
      </summary>
    </member>
    <member name="P:VO.DataBrowser.Background">
      <summary>
        <para>The brush used for painting the background of this data browser.</para>
      </summary>
    </member>

    <member name="M:VO.DataBrowser.CanUndo">
      <summary>
        <para>Determine if the most recent changes to a data browser column can be undone (using DataBrowser:Undo()).</para>
      </summary>
      <returns>
        <para>TRUE if the operation can be undone; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.DataBrowser.Caption">
      <summary>
        <para>A string representing the caption of the data browser for use in its title bar. By default, the data browser uses the caption defined in its hyperlabel.</para>
      </summary>
      <remarks>
        <para>
          Assigning a blank caption (" ") causes the title bar to be displayed with no text. Assigning a NULL_STRING causes the title bar to be hidden. Note that by
          embedding newline (Chr(10)) characters in the caption string, the title bar changes height to accommodate multiple lines.
        </para>
      </remarks>
    </member>
    <member name="P:VO.DataBrowser.CellEdit">
      <summary></summary>
    </member>
    <member name="M:VO.DataBrowser.ChangeBackground(XSharp.__Usual,XSharp.__Usual)">
      <param name="oBrush">
      </param>
      <param name="kWhere">
      </param>
    </member>
    <member name="M:VO.DataBrowser.ChangeFont(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set a new font in a particular area of the data browser.</para>
      </summary>
      <param name="oFont">
      </param>
      <param name="kWhere">
      </param>
      <returns>
        <para>The font previously assigned to the changed area.</para>
      </returns>
    </member>
    <member name="M:VO.DataBrowser.ChangeTextColor(XSharp.__Usual,XSharp.__Usual)">
      <param name="oColor">
      </param>
      <param name="kWhere">
      </param>
    </member>
    <member name="M:VO.DataBrowser.Clear">
      <summary>
        <para>
          If one or more cells in the data browser are selected, clear their contents; if only some characters in a cell are selected, remove only those
          characters.
        </para>
      </summary>
    </member>
    <member name="M:VO.DataBrowser.ColPos">
      <summary>
        <para>Return the position of the currently focused column.</para>
      </summary>
    </member>
    <member name="P:VO.DataBrowser.ColumnCount">
      <summary>
        <para>A numeric value indicating the number of columns in the data browser.</para>
      </summary>
    </member>
    <member name="M:VO.DataBrowser.ColumnFocusChange(XSharp.__Usual,XSharp.__Usual)">
      <param name="oDataColumn">
      </param>
      <param name="lHasFocus">
      </param>
    </member>
    <member name="M:VO.DataBrowser.ColumnMoved(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a column is moved.</para>
      </summary>
      <param name="oColumn">
      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.DataBrowser.ColumnReSize(XSharp.__Usual)">
      <param name="oColumn">

      </param>
    </member>
    <member name="M:VO.DataBrowser.Copy">
      <summary>
        <para>Copy the current selection in the data browser to the clipboard.</para>
      </summary>
    </member>
    <member name="P:VO.DataBrowser.CurrentColumn">
      <summary>
        <para>The current data column in the data browser (i.e., the one that contains the cursor).</para>
      </summary>
    </member>
    <member name="M:VO.DataBrowser.Cut">
      <summary>
        <para>Cut the current selection in the data browser to the clipboard.</para>
      </summary>
    </member>
    <member name="M:VO.DataBrowser.Default(XSharp.__Usual)">
      <param name="oEvent">
      </param>
    </member>
    <member name="M:VO.DataBrowser.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a DataBrowser object.</para>
      </summary>
    </member>
    <member name="M:VO.DataBrowser.Dispatch(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.DataBrowser.EditFont">
      <summary></summary>
    </member>
    <member name="M:VO.DataBrowser.EnableBorder(XSharp.__Usual)">
      <param name="kBorderType">
      </param>
    </member>
    <member name="M:VO.DataBrowser.EnableColumnMove(XSharp.__Usual)">
      <param name="lAllowMove">
      </param>
    </member>
    <member name="M:VO.DataBrowser.EnableColumnReSize(XSharp.__Usual)">
      <param name="lAllowResize">
      </param>
    </member>
    <member name="M:VO.DataBrowser.EnableColumnTitles(XSharp.__Usual)">
      <param name="lEnable">
      </param>
    </member>
    <member name="M:VO.DataBrowser.EnableGrid(XSharp.__Usual)">
      <summary>
        <para>Enable/disable the display of a grid. If this method is not called, the grid is enabled, by default.</para>
      </summary>
      <param name="lShowGrid">
      </param>
    </member>
    <member name="M:VO.DataBrowser.EnableHorizontalScroll(XSharp.__Usual)">
      <param name="lAllowScroll">
      </param>
    </member>
    <member name="M:VO.DataBrowser.EnableHorizontalSplit(XSharp.__Usual)">
      <param name="lShowSplit">
      </param>
    </member>
    <member name="M:VO.DataBrowser.EnableVerticalScroll(XSharp.__Usual)">
      <param name="lAllowScroll">
      </param>
    </member>
    <member name="M:VO.DataBrowser.EnableVerticalSplit(XSharp.__Usual,XSharp.__Usual)">
      <param name="lShowSplit">
      </param>
      <param name="nMode">
      </param>
    </member>
    <member name="M:VO.DataBrowser.Error(XSharp.__Usual)">
      <summary>
        <para>Provide a method for handling error conditions raised during data browser processing.</para>
      </summary>
      <param name="oErrorObj">

      </param>

      <remarks>
        <para>
          <b>Note:</b> This is an event handler and is automatically called by other methods; the developer does not normally need to call the DataBrowser:Error()
          method, but might want to override it.
        </para>
      </remarks>
    </member>
    <member name="P:VO.DataBrowser.Font">
      <summary>
        <para>The font to be used for the text area of the data browser.</para>
      </summary>
    </member>
    <member name="M:VO.DataBrowser.GetColumn(XSharp.__Usual)">
      <summary>
        <para>Retrieve a specified column in this data browser.</para>
      </summary>
      <param name="xColumnID">
      </param>
      <returns>
        <para>The specified data column or NIL if it could not be found.</para>
      </returns>
    </member>
    <member name="P:VO.DataBrowser.HiBackground">
      <summary></summary>
    </member>
    <member name="M:VO.DataBrowser.NewRow">
      <summary></summary>
    </member>
    <member name="M:VO.DataBrowser.Notify(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>An event handler that reflects events that have occurred in the server connected to this data browser.</para>
        <para>
          Important! <br />Notify() is automatically called by the server, and should normally not be called by application code.
        </para>
      </summary>
      <param name="kNotification">
      </param>
      <param name="uDescription">
      </param>
      <returns>
        <para>
          NIL except if NOTIFYINTENTTOMOVE is specified for &lt;<i>kNotifyName</i>&gt;. In this case, the return value is TRUE if successful; otherwise, FALSE.
        </para>
      </returns>
    </member>
    <member name="P:VO.DataBrowser.Owner">
      <summary>
        <para>The owner window of the data browser.</para>
      </summary>
    </member>
    <member name="M:VO.DataBrowser.Paste">
      <summary>
        <para>Paste the current contents of the clipboard into the current data browser cell.</para>
      </summary>
    </member>
    <member name="P:VO.DataBrowser.Pointer">
      <summary>
        <para>The Pointer object to be used in the text area of the data browser.</para>
      </summary>
    </member>
    <member name="F:VO.DataBrowser.ptrControlDefaultProc">
      <summary></summary>
    </member>
    <member name="M:VO.DataBrowser.Refresh">
      <summary>
        <para>Forces the contents of the data browser to be updated from the data server.</para>
      </summary>
    </member>
    <member name="M:VO.DataBrowser.RemoveColumn(XSharp.__Usual)">
      <param name="uColumnOrIndex">
      </param>
    </member>
    <member name="M:VO.DataBrowser.RestoreUpdate">
      <summary></summary>
    </member>
    <member name="P:VO.DataBrowser.RowCount">
      <summary>
        <para>A numeric value indicating the number of rows in the data browser.</para>
      </summary>
    </member>
    <member name="M:VO.DataBrowser.SetCaption(XSharp.__Usual)">
      <summary>
        <para>Set the caption for the data browser title bar.</para>
      </summary>
      <param name="cText">
      </param>
    </member>
    <member name="M:VO.DataBrowser.SetColumn(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Replace an existing column in the data browser with another column.</para>
      </summary>
      <param name="oDataColumn">
      </param>
      <param name="nColumnNumber">
      </param>
      <returns>
        <para>The replaced data column, if successful; otherwise, NULL_OBJECT.</para>
      </returns>
    </member>
    <member name="M:VO.DataBrowser.SetColumnFocus(XSharp.__Usual)">
      <param name="oColumn">
      </param>
    </member>
    <member name="M:VO.DataBrowser.SetPointer(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set a new pointer to be used when the mouse moves over a particular area of the data browser.</para>
      </summary>
      <param name="oPointer">
      </param>
      <param name="kWhere">
      </param>
    </member>
    <member name="M:VO.DataBrowser.SetStandardStyle(XSharp.__Usual)">
      <param name="kStyle">
      </param>
    </member>
    <member name="M:VO.DataBrowser.Show">
      <summary>
        <para>Show this data browser.</para>
      </summary>
    </member>
    <member name="M:VO.DataBrowser.SuspendUpdate">
      <summary></summary>
    </member>
    <member name="P:VO.DataBrowser.TextColor">
      <summary>
        <para>The text color to be used for the text area of the data browser.</para>
      </summary>
    </member>
    <member name="M:VO.DataBrowser.Undo">
      <summary>
        <para>Undo recent changes to a row in the data browser.</para>
      </summary>
    </member>
    <member name="M:VO.DataBrowser.Use(XSharp.__Usual)">
      <summary>
        <para>Connect the data browser to a data server in a client-server relationship.</para>
      </summary>
      <param name="oServer">

      </param>

      <remarks>
        <para>
          <b>Note:</b> If the browser is used as a browse view of a data window, there is no reason to use this method; the browser is automatically connected to the
          server of the window it belongs to.
        </para>
      </remarks>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.DataBrowser.Validate">
      <summary>
        <para>Determine whether the currently focused record is valid.</para>
      </summary>
      <returns>
        <para>TRUE if the record is valid; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="T:VO.DataColumn">
      <summary>
        <para>Create columns for use in a data browser.</para>
      </summary>
    </member>
    <member name="M:VO.DataColumn.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a data column.</para>
      </summary>
      <param name="nWidth">
      </param>
      <param name="xColumnID">
      </param>
    </member>
    <member name="P:VO.DataColumn.Alignment">
      <summary>
        <para>One of the following constants representing the alignment of this data column:</para>
        <list type="table">
          <listheader>
            <term>Constant</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>GBAALIGNCENTER</term>
            <description>Center aligned</description>
          </item>
          <item>
            <term>GBAALIGNLEFT</term>
            <description>Left aligned (This is the default for text.)</description>
          </item>
          <item>
            <term>GBAALIGNRIGHT</term>
            <description>Right aligned (This is the default for numeric data.)</description>
          </item>
        </list>
      </summary>
    </member>
    <member name="M:VO.DataColumn.AsString(XSharp.__Usual)">
      <summary>
        <para>Return the current value in the current row of this data column as a formatted string.</para>
      </summary>
      <param name="uParam">
      </param>
    </member>
    <member name="P:VO.DataColumn.Background">
      <summary>
        <para>The brush used for painting the background of this data column.</para>
      </summary>
    </member>
    <member name="P:VO.DataColumn.Block">
      <summary>
        <para>A code block associated with the data column. If set, it is used to filter the data in/out of the data column.</para>
      </summary>
    </member>
    <member name="P:VO.DataColumn.BlockOwner">
      <summary>
        <para>
          The owner of the code block associated with the data column. If a code block is assigned, this object will be called when the code block is evaluated. For
          an example, see .
        </para>
      </summary>
    </member>
    <member name="P:VO.DataColumn.Caption">
      <summary>
        <para>
          A string representing the caption of this data column for use in its caption area. By default, the data column uses the caption defined in its
          hyperlabel.
        </para>
      </summary>
      <remarks>
        <para>
          You can specify a caption in a manner similar to the DataBrowser:Caption property (for example, assigning a blank caption ("") causes the caption area to be
          displayed with no text). Note that the height of the caption area is automatically made large enough to accommodate the captions of all columns in the owning
          data browser.
        </para>
      </remarks>
    </member>
    <member name="P:VO.DataColumn.CellBackground">
      <summary>
        <para>
          The Brush object used to paint the background of a cell if DataColumn:EnableCellDraw has been called. This object should not be a local variable of the
          cell-painting method supplied to DataColumn:EnableCellDraw.
        </para>
      </summary>
    </member>
    <member name="P:VO.DataColumn.CellTextColor">
      <summary>
        <para>
          The Color object used to paint the text in a cell if DataColumn:EnableCellDraw has been called. This object should not be a local variable of the
          cell-painting method supplied to DataColumn:EnableCellDraw.
        </para>
      </summary>
    </member>
    <member name="M:VO.DataColumn.ChangeBackground(XSharp.__Usual,XSharp.__Usual)">
      <param name="oBrush">
      </param>
      <param name="kWhere">
      </param>
    </member>
    <member name="M:VO.DataColumn.ChangeTextColor(XSharp.__Usual,XSharp.__Usual)">
      <param name="oColor">
      </param>
      <param name="kWhere">
      </param>
    </member>
    <member name="M:VO.DataColumn.ClearStatus">
      <summary></summary>
    </member>
    <member name="P:VO.DataColumn.DataField">
      <summary></summary>
    </member>
    <member name="M:VO.DataColumn.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a DataColumn object.</para>
      </summary>
    </member>
    <member name="M:VO.DataColumn.DisableCellDraw">
      <summary></summary>
    </member>
    <member name="M:VO.DataColumn.DrawCellData(XSharp.__Usual)">
      <param name="uValue">
      </param>
    </member>
    <member name="M:VO.DataColumn.EnableCellDraw(XSharp.__Usual)">
      <param name="symMethodName">
      </param>
    </member>
    <member name="M:VO.DataColumn.EnableColumnMove(XSharp.__Usual)">
      <param name="lAllowMove">
      </param>
    </member>
    <member name="M:VO.DataColumn.EnableColumnReSize(XSharp.__Usual)">
      <param name="lAllowResize">
      </param>
    </member>
    <member name="P:VO.DataColumn.FieldSpec">
      <summary>
        <para>
          The FieldSpec object connected to this data column. This is used for validation purposes, as well as calculating default widths and alignment
          characteristics.
        </para>
      </summary>
    </member>
    <member name="M:VO.DataColumn.GetCaption">
      <summary></summary>
    </member>
    <member name="M:VO.DataColumn.GetEditObject(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="oOwner">
      </param>
      <param name="iID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDim">
      </param>
    </member>
    <member name="M:VO.DataColumn.GetModified">
      <summary>
        <para>Determine whether the value in column has been modified.</para>
      </summary>
      <returns>
        <para>TRUE if the value in the column has been modified; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.DataColumn.GetValue">
      <summary>
        <para>Get the value of the current data column.</para>
      </summary>
    </member>

    <member name="P:VO.DataColumn.HyperLabel">
      <summary>
        <para>
          The hyperlabel connected to this data column. From the hyperlabel, you can retrieve additional information about the data column — for
          example:
        </para>
        <para>cCaption := oDataColumn:HyperLabel:Caption</para>
        <para>cDescription := oDataColumn:HyperLabel:Description</para>
        <para>cHelpContext := oDataColumn:HyperLabel:HelpContext</para>
      </summary>
    </member>
    <member name="M:VO.DataColumn.LinkDF(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Connect a column to a field in a data server.</para>
      </summary>
      <param name="oDataServer">
      </param>
      <param name="nFieldData">
      </param>
    </member>
    <member name="P:VO.DataColumn.Modified">
      <summary>
        <para>
          A logical value indicating whether the contents of the <i>current row</i> of this data column has been changed by the user since it was last set. TRUE
          indicates that it has changed (even if it has not yet been validated or has failed validation); FALSE indicates that it has not.
        </para>
      </summary>
    </member>
    <member name="P:VO.DataColumn.Name">
      <summary>
        <para>A string representing the name of this data column.</para>
      </summary>
    </member>
    <member name="P:VO.DataColumn.NameSym">
      <summary>
        <para>A symbol representing the name of this data column.</para>
      </summary>
    </member>
    <member name="P:VO.DataColumn.Owner">
      <summary>
        <para>The data browser that owns this data column.</para>
      </summary>
    </member>
    <member name="M:VO.DataColumn.PerformValidations">
      <summary></summary>
    </member>
    <member name="P:VO.DataColumn.PixelWidth">
      <summary></summary>
    </member>
    <member name="P:VO.DataColumn.Server">
      <summary>
        <para>The data server to which this data column is currently connected, if any.</para>
      </summary>
    </member>
    <member name="M:VO.DataColumn.SetCaption(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set the caption for the data column.</para>
      </summary>
      <param name="cText">
      </param>
      <param name="kAlignment">
      </param>
    </member>
    <member name="M:VO.DataColumn.SetModified(XSharp.__Usual)">
      <summary>
        <para>Mark the current data column, signifying that it has been modified.</para>
      </summary>
      <param name="lModified">
      </param>
    </member>
    <member name="M:VO.DataColumn.SetStandardStyle(XSharp.__Usual)">
      <param name="kStyle">
      </param>
    </member>
    <member name="M:VO.DataColumn.SetValue(XSharp.__Usual)">
      <summary>
        <para>Set the value of the current data column.</para>
      </summary>
      <param name="cNewValue">
      </param>
      <returns>
        <para>A string representing the current value of the data column.</para>
      </returns>
    </member>
    <member name="P:VO.DataColumn.Status">
      <summary>
        <para>A hyperlabel that indicates the results of validations or recent actions to this data column.</para>
        <para>If the validation passed or the operation was successful, this value is NULL_OBJECT; if not, it contains information about the cause of the error.</para>
      </summary>
    </member>
    <member name="P:VO.DataColumn.TextColor">
      <summary>
        <para>The text color to be used for the text area of this data column.</para>
      </summary>
    </member>
    <member name="P:VO.DataColumn.TextValue">
      <summary>
        <para>
          A string representing the value held in the current row of this data column.
        </para>
      </summary>
      <remarks>
        <para>
          Note that this string is formatted according to the picture clause held in the
          FieldSpec object inherited from the associated server field.
        </para>
      </remarks>
    </member>
    <member name="P:VO.DataColumn.Value">
      <summary>
        <para>The value held in the current row of this data column, in whatever data type is held in the FieldSpec object inherited from the associated server field.</para>
      </summary>
    </member>
    <member name="P:VO.DataColumn.ValueChanged">
      <summary>
        <para>
          A logical value indicating whether the data column value has been changed to a "valid" value, since it was last set. TRUE indicates that it has been changed
          to a valid value; FALSE indicates that it has not.
        </para>
      </summary>
    </member>
    <member name="P:VO.DataColumn.VisualPos">
      <summary>
        <para>Returns the number of the data column with respect to its visual position within a data browser from left to right.</para>
      </summary>
    </member>
    <member name="P:VO.DataColumn.Width">
      <summary>
        <para>The width of this data column in canvas coordinates.</para>
      </summary>
    </member>
    <member name="T:VO.DataDialog">
      <summary>
        <para>
          Create a data window that behaves like a modal dialog window (also commonly referred to as a <b>dialog box</b>).
        </para>
      </summary>
    </member>

    <member name="M:VO.DataDialog.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a data dialog window.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="oSource">
      </param>
      <param name="nResourceID">
      </param>
      <param name="nDialogStyle">
      </param>
    </member>
    <member name="T:VO.DataListView">
      <summary>
        <para>Create a data list view as a faster, read-only, standalone control and an alternative to a data browser.</para>
      </summary>
      <remarks>
        <para>
          <b>Note:</b> Please see Description below for its limitations.
        </para>
      </remarks>
    </member>
    <member name="M:VO.DataListView.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a data list view.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="kStyle">
      </param>
    </member>
    <member name="M:VO.DataListView.DeleteAll">
      <summary>
        <para>Delete all items in a data list view.</para>
      </summary>
      <returns>
        <para>TRUE if all items were deleted successfully; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.DataListView.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a DataListView object.</para>
      </summary>
    </member>
    <member name="M:VO.DataListView.FIELDGET(XSharp.__Usual)">
      <summary>
        <para>Return the contents of a specified field of the data server associated with the data list view.</para>
      </summary>
      <param name="nFieldPos">
      </param>
      <returns>
        <para>The field's contents. The data type of the return value depends on the data type of the field.</para>
      </returns>
    </member>
    <member name="M:VO.DataListView.Notify(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Provide an event handler that reflects events that have occurred in the server connected to this data list view.</para>
        <para>
          Important! <br />Notify() is automatically called by the server. Normally, it should not be called in your application code.
        </para>
      </summary>
      <param name="kNotification">
      </param>
      <param name="uDescription">
      </param>
      <returns>
        <para>
          NIL, except if NOTIFYINTENTTOMOVE is specified for &lt;<i>kNotifyName</i>&gt;. In this case, the return value is TRUE if successful; otherwise, FALSE.
        </para>
      </returns>
    </member>
    <member name="P:VO.DataListView.Owner">
      <summary>
        <para>The owner of this DataListView control.</para>
      </summary>
    </member>
    <member name="M:VO.DataListView.Refresh">
      <summary>
        <para>Force the contents of the data list view to be updated from the data server.</para>
      </summary>
    </member>
    <member name="P:VO.DataListView.Server">
      <summary>
        <para>The data server associated with the data list view.</para>
      </summary>
    </member>
    <member name="M:VO.DataListView.Use(XSharp.__Usual)">
      <summary>
        <para>Associate a data server with the data list view.</para>
      </summary>
      <param name="oNewServer">
      </param>
      <returns>
        <para>TRUE, if the server could be assigned successfully; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="T:VO.DataWindow">
      <summary>
        <para>Create a data window which is capable of interacting intelligently with a data server.</para>
      </summary>
    </member>
    <member name="M:VO.DataWindow.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a data window.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="oSource">
      </param>
      <param name="nResourceID">
      </param>
      <param name="nDialogStyle">
      </param>
    </member>
    <member name="M:VO.DataWindow.Activate(XSharp.__Usual)">
      <param name="oEvent">
      </param>
    </member>
    <member name="P:VO.DataWindow.AllowServerClose">
      <summary>
        <para>
          A logical value specifying whether the server is automatically closed with the data window. By default, this is set to TRUE in the DataWindow:Init()
          method.
        </para>
      </summary>
    </member>

    <member name="M:VO.DataWindow.Append">
      <summary>
        <para>Append a blank record to the data server connected to this data window and position the window on this new record.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.DataWindow.AutoScroll">
      <summary></summary>
    </member>
    <member name="P:VO.DataWindow.Background">
      <summary></summary>
    </member>
    <member name="P:VO.DataWindow.Browser">
      <summary>
        <para>The DataBrowser object to use when this data window is displayed in browse view.</para>
        <para>
          A data window does not necessarily need to own a particular data browser. If a data window has no browser and the application chooses to view it in browse
          mode, the runtime automatically creates a browser for the window, populating it with one column for each field in the server. The column headings are taken
          from the server, using the hyperlabels of its fields.
        </para>
      </summary>
    </member>
    <member name="P:VO.DataWindow.BrowserClass">
      <summary>
        <para>A symbol specifying the class used for the data window's browse mode. Valid values are: #DATABROWSER, #DATALISTVIEW, or any user-defined class.</para>
        <para>The default is #DATABROWSER.</para>
      </summary>
    </member>

    <member name="M:VO.DataWindow.ButtonClick(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a check box, push button, or radio button is clicked with the mouse.</para>
      </summary>
      <param name="oControlEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>

    <member name="M:VO.DataWindow.Cancel">
      <summary>
        <para>Discard all information entered in this data window and close the window.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.DataWindow.CanvasErase">
      <summary>
        <para>Erase the current canvas area of this data window and repaint it using either the background brush or the system's default background color.</para>
      </summary>
    </member>
    <member name="P:VO.DataWindow.Caption">
      <summary></summary>
    </member>
    <member name="M:VO.DataWindow.ChangeFont(XSharp.__Usual,XSharp.__Usual)">
      <param name="oFont">
      </param>
      <param name="lUpdate">
      </param>
    </member>
    <member name="M:VO.DataWindow.CheckStatus">
      <summary>
        <para>Test the information currently displayed in the controls in this data window to see if it passes all validation rules defined to the connected server.</para>
      </summary>
      <returns>
        <para>TRUE if the window passes all validation checks; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.DataWindow.Clear">
      <summary>
        <para>Clear the current selection in this data window.</para>
      </summary>
    </member>
    <member name="M:VO.DataWindow.ClearRelations">
      <summary></summary>
    </member>
    <member name="P:VO.DataWindow.ClipperKeys">
      <summary>
        <para>
          A logical value indicating that the CA-Clipper navigation keys (i.e., the Direction and Return keys) are to be used for this data window (TRUE if yes, FALSE
          if no).
        </para>
      </summary>
    </member>
    <member name="M:VO.DataWindow.Close(XSharp.__Usual)">
      <summary>
        <para>Invoked just as the data window is about to close.</para>
      </summary>
      <param name="oEvent">
      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.DataWindow.Commit">
      <summary>
        <para>Force all pending updates to this data window's server to be permanently written to disk.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.DataWindow.ConcurrencyControl">
      <summary></summary>
    </member>
    <member name="P:VO.DataWindow.ContextMenu">
      <summary>
        <para>Retrieve or set the context menu on the datawindow.</para>
      </summary>
      <remarks>
        <para>This can be used in two ways.</para>
        <para>The DataWindow and its Browser usually share the same ContextMenu and in this situation the assign can be used like this –</para>
        <para>&lt;oDataWindow&gt;:ContextMenu := MyContextMenu{}</para>
        <para>If you want the context menus to be different you can now use code like this –</para>
        <para>&lt;oDataWindow&gt;:[ContextMenu,#FormView] := MyContextMenu{}</para>
        <para>to just set the FormView context menu, and this –</para>
        <para>&lt;oDataWindow&gt;:[ContextMenu,#BrowseView] := MyOtherContextMenu{}</para>
        <para>to set the BrowseView context menu.</para>
      </remarks>
    </member>
    <member name="M:VO.DataWindow.ControlFocusChange(XSharp.__Usual)">
      <param name="oControlFocusChangeEvent">

      </param>
    </member>
    <member name="P:VO.DataWindow.Controls">
      <summary></summary>
    </member>
    <member name="M:VO.DataWindow.Copy">
      <summary>
        <para>Copy the current selection in this data window to the clipboard.</para>
      </summary>
    </member>
    <member name="P:VO.DataWindow.CurrentControl">
      <summary></summary>
    </member>
    <member name="P:VO.DataWindow.CurrentView">
      <summary>
        <para>A symbol representing the view mode of the data window, as #BrowseView or #FormView.</para>
      </summary>
    </member>

    <member name="M:VO.DataWindow.Cut">
      <summary>
        <para>Delete the current selection in this data window and copy it to the clipboard.</para>
      </summary>
    </member>
    <member name="M:VO.DataWindow.DeActivate(XSharp.__Usual)">
      <param name="oEvent">

      </param>
    </member>
    <member name="M:VO.DataWindow.DeactivateAllOLEObjects(XSharp.__Usual)">
      <param name="oExcept">

      </param>
    </member>
    <member name="P:VO.DataWindow.DeferUse">
      <summary>
        <para>
          A logical value specifying whether the Use() operation for connecting the data window to the associated server should be deferred until the data window is
          first displayed. This is useful, for example, in a situation where multiple data windows build up pages for a tab control. The default is FALSE.
        </para>
      </summary>
    </member>
    <member name="M:VO.DataWindow.Delete">
      <summary>
        <para>Delete the current record in the attached server and update the window based on the change.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.DataWindow.DeleteValidated">
      <summary></summary>
    </member>
    <member name="M:VO.DataWindow.Destroy">
      <summary>
        <para>Free memory resources allocated for a window and its derived objects.</para>
      </summary>
    </member>
    <member name="M:VO.DataWindow.DisableConditionalControls">
      <summary></summary>
    </member>
    <member name="M:VO.DataWindow.Dispatch(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="M:VO.DataWindow.Draw(XSharp.__Usual)">
      <summary>
        <para>Display a Draw object on this data window.</para>
      </summary>
      <param name="oDrawObject">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.DataWindow.EditChange(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the text in an edit control is changed.</para>
      </summary>
      <param name="oControlEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.DataWindow.EnableConditionalControls">
      <summary></summary>
    </member>
    <member name="M:VO.DataWindow.EnableDragDropClient(XSharp.__Usual,XSharp.__Usual)">
      <param name="lEnable">
      </param>
      <param name="lSurfaceOnly">
      </param>
    </member>
    <member name="M:VO.DataWindow.EnableStatusBar(XSharp.__Usual)">
      <param name="lEnable">
      </param>
    </member>
    <member name="M:VO.DataWindow.EnableToolTips(XSharp.__Usual)">
      <param name="lEnable">
      </param>
    </member>
    <member name="M:VO.DataWindow.Error(XSharp.__Usual)">
      <summary>
        <para>Provide a method for handling error conditions raised during data window processing.</para>
      </summary>
      <param name="oErrorObj">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.DataWindow.Expose(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked whenever part of the data window needs repainting.</para>
      </summary>
      <param name="oExposeEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.DataWindow.FIELDGET(XSharp.__Usual)">
      <summary>
        <para>Retrieve the current value of the indicated control in this data window (and the data server field associated with this control, if any).</para>
      </summary>
      <param name="uFieldID">
      </param>
      <returns>
        <para>The field's contents. The data type of the return value depends on the data type of the field.</para>
      </returns>
    </member>
    <member name="M:VO.DataWindow.FIELDPUT(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set the value of the control in this data window (and the data server field associated with this control, if any).</para>
      </summary>
      <param name="uFieldId">
      </param>
      <param name="uNewValue">
      </param>
      <returns>
        <para>The newly assigned value if the operation was successful; otherwise, NIL.</para>
      </returns>
    </member>
    <member name="M:VO.DataWindow.FocusChange(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the input focus changes from the current data window to another window (or vice versa).</para>
      </summary>
      <param name="oFocusChangeEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="P:VO.DataWindow.Foreground">
      <summary></summary>
    </member>
    <member name="M:VO.DataWindow.GetAllChildren">
      <summary></summary>
    </member>
    <member name="M:VO.DataWindow.GoBottom">
      <summary>
        <para>Position the data server connected to this data window on the last logical record and update the window based on the change.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.DataWindow.GoTo(XSharp.__Usual)">
      <summary>
        <para>Position the data server connected to this data window on a specified record number and update the window based on the change.</para>
      </summary>
      <param name="nRecNo">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.DataWindow.GoTop">
      <summary>
        <para>Position the data server connected to this data window on the first logical record and update the window based on the change.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.DataWindow.HelpRequest(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the user requests help from the application using one of the available context-sensitive help mechanisms.</para>
      </summary>
      <param name="oHelpRequestEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.DataWindow.Hide">
      <summary>
        <para>Hide this data window so it is not visible.</para>
      </summary>
    </member>
    <member name="M:VO.DataWindow.HorizontalScroll(XSharp.__Usual)">
      <param name="oScrollEvent">

      </param>
    </member>
    <member name="M:VO.DataWindow.HorizontalSlide(XSharp.__Usual)">
      <param name="oSlideEvent">

      </param>
    </member>
    <member name="M:VO.DataWindow.HorizontalSpin(XSharp.__Usual)">
      <param name="oSpinEvent">

      </param>
    </member>
    <member name="M:VO.DataWindow.InsertObject">
      <summary>
        <para>Use the standard Insert Object dialog to insert an OLE object into the focused OLEObject of the data window.</para>
      </summary>
    </member>
    <member name="M:VO.DataWindow.IsDialog">
      <summary></summary>
    </member>
    <member name="P:VO.DataWindow.LastFocus">
      <summary></summary>
    </member>
    <member name="M:VO.DataWindow.LineTo(XSharp.__Usual)">
      <summary>
        <para>Draw a line on this data window (using the current pen) from the current pen position to a specified point.</para>
      </summary>
      <param name="uPoint">
      </param>
    </member>
    <member name="M:VO.DataWindow.ListBoxClick(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when an item in a list box owned by this data window is double-clicked.</para>
      </summary>
      <param name="oControlEvent">
      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.DataWindow.ListBoxSelect(XSharp.__Usual)">
      <param name="oControlEvent">

      </param>
    </member>
    <member name="P:VO.DataWindow.Menu">
      <summary></summary>
    </member>
    <member name="M:VO.DataWindow.MouseButtonDown(XSharp.__Usual)">
      <param name="oMouseEvent">

      </param>
    </member>
    <member name="M:VO.DataWindow.MoveTo(XSharp.__Usual)">
      <summary>
        <para>Move the current pen to a point on the data window's canvas area.</para>
      </summary>
      <param name="oPoint">
      </param>
      <returns>
        <para>A point representing the previous location of the pen, in canvas coordinates.</para>
      </returns>
    </member>
    <member name="M:VO.DataWindow.Notify(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>An event handler that reflects events that have occurred in the server connected to this data window.</para>
      </summary>
      <param name="kNotification">

      </param>
      <param name="uDescription">

      </param>

      <remarks>
        <para>
          <b>
            <i>Important!</i>
            <br />
          </b>
          <i>Notify() is automatically called by the server, and should normally not be called by application code.</i>
        </para>
      </remarks>
      <returns>
        <para>
          SELF, except if NOTIFYINTENTTOMOVE is specified for &lt;<i>kNotifyName</i>&gt;. In this case, the return value is TRUE if successful; otherwise, FALSE.
        </para>
      </returns>
    </member>
    <member name="M:VO.DataWindow.OK">
      <summary>
        <para>Accept all information entered in this data window and close the window.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.DataWindow.OLEInPlaceActivate">
      <summary></summary>
    </member>
    <member name="M:VO.DataWindow.OLEInPlaceDeactivate">
      <summary></summary>
    </member>
    <member name="P:VO.DataWindow.Origin">
      <summary>
        <para>The point representing the new location of this data window, in the canvas coordinates of its owner.</para>
      </summary>
    </member>
    <member name="P:VO.DataWindow.OwnerAlignment">
      <summary></summary>
    </member>
    <member name="P:VO.DataWindow.OwnerServer">
      <summary></summary>
    </member>
    <member name="M:VO.DataWindow.PaintBoundingBox(XSharp.__Usual,XSharp.__Usual)">
      <param name="oBB">

      </param>
      <param name="kPM">

      </param>
    </member>
    <member name="M:VO.DataWindow.Paste">
      <summary>
        <para>Replace the current selection in this data window with the contents of the clipboard.</para>
      </summary>
    </member>
    <member name="M:VO.DataWindow.PasteSpecial">
      <summary>
        <para>Use the standard Paste Special dialog to insert an OLE object into the focused OLEObject of the data window.</para>
      </summary>
    </member>
    <member name="P:VO.DataWindow.Pen">
      <summary></summary>
    </member>
    <member name="P:VO.DataWindow.Pointer">
      <summary></summary>
    </member>
    <member name="M:VO.DataWindow.PreValidate">
      <summary>
        <para>Called after any status change in this data window to allow controls and menu commands to be enabled/disabled based on the current validation status.</para>
      </summary>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="P:VO.DataWindow.PreventAutoLayout">
      <summary>
        <para>
          A logical value indicating that the AutoLayout behavior of the data window is blocked (TRUE if yes, FALSE if no). An empty data window does not create
          controls automatically when it first uses a new data server.
        </para>
      </summary>
    </member>
    <member name="M:VO.DataWindow.QueryClose(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked just before the data window closes to confirm if the application really wants to close the window.</para>
      </summary>
      <param name="oQCE">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
        <para>
          <b>Note:</b> If you reimplement this method in your subclass, it is recommended that you first call SUPER:QueryClose() within the method to obtain its
          default behavior.
        </para>
      </remarks>
      <returns>
        <para>TRUE if the data window is to be closed; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.DataWindow.RadioGroups">
      <summary></summary>
    </member>
    <member name="M:VO.DataWindow.RegisterConditionalControls(XSharp.__Usual)">
      <param name="oCC">

      </param>
    </member>
    <member name="M:VO.DataWindow.RePaint">
      <summary>
        <para>Send an ExposeEvent to repaint the data window's canvas area.</para>
      </summary>
    </member>
    <member name="M:VO.DataWindow.RepaintBoundingBox(XSharp.__Usual)">
      <param name="oBB">
      </param>
    </member>
    <member name="M:VO.DataWindow.Resize(XSharp.__Usual)">
      <param name="oResizeEvent">
      </param>
    </member>
    <member name="M:VO.DataWindow.Seek(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Search for a value in the data server connected to this data window based on a controlling search order and update the window based on the change.</para>
      </summary>
      <param name="uValue">
      </param>
      <param name="lSoftSeek">
      </param>
      <returns>
        <para>
          TRUE if successful; otherwise, FALSE. Note that a FALSE value can indicate either that the value was not found or that the server does not support this
          search operation. Use the DataWindow:Status property to determine the exact cause of a failure.
        </para>
      </returns>
    </member>
    <member name="P:VO.DataWindow.Server">
      <summary>
        <para>The DataServer object currently connected to this data window. If no server is connected, this value is NIL.</para>
      </summary>
    </member>
    <member name="M:VO.DataWindow.SetAlignStartSize(XSharp.__Usual)">
      <summary></summary>
      <param name="oSize">

      </param>
    </member>
    <member name="M:VO.DataWindow.SetContextMenu(VO.Menu,XSharp.__Symbol)">
      <param name="oNewMenu">
      </param>
      <param name="symView">
      </param>
    </member>
    <member name="M:VO.DataWindow.SetDialog(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="lResizable">
      </param>
      <param name="lMaximizeBox">
      </param>
      <param name="lMinimizeBox">
      </param>
    </member>
    <member name="M:VO.DataWindow.SetRelation(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>
          Set a relation from the data server connected to this data window to the data server of another, creating an owner-child relationship between the two
          servers and the two windows.
        </para>
      </summary>
      <param name="oDWChild">

      </param>
      <param name="uRelation">

      </param>
      <param name="cRelation">

      </param>

      <remarks>
        <para>
          <b>Note:</b> This operation may not be supported, depending on whether the servers used supports relations and are of compatible types. The prototypical
          implementation is the standard Xbase DBServer:SetRelation() method provided.
        </para>
      </remarks>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.DataWindow.SetSelectiveRelation(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="oDWChild">

      </param>
      <param name="uRelation">

      </param>
      <param name="cRelation">

      </param>
    </member>
    <member name="M:VO.DataWindow.Show(XSharp.__Usual)">
      <summary>
        <para>Display this data window.</para>
      </summary>
      <param name="nShowState">
      </param>
    </member>
    <member name="P:VO.DataWindow.Size">
      <summary>
        <para>The dimension representing the size of this data window in canvas coordinates.</para>
      </summary>
    </member>
    <member name="M:VO.DataWindow.Skip(XSharp.__Usual)">
      <summary>
        <para>Move forward or backward in the server by a specified number of records.</para>
      </summary>
      <param name="uRelativePosition">
      </param>
      <returns>
        <para>
          TRUE if operation was successful; otherwise, FALSE. Skip() can fail for several different reasons. It can fail validation, there may not be that many
          records to move, the write that precedes the move can fail because of lock conflicts with other users that control the server, or the server can have become
          unavailable due to technical problems. Use DataWindow:Status to determine the reason for the failure.
        </para>
      </returns>
    </member>
    <member name="M:VO.DataWindow.SkipNext">
      <summary>
        <para>Move to the next record (identical to Skip(1)).</para>
      </summary>
      <returns>
        <para>TRUE if operation was successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.DataWindow.SkipPrevious">
      <summary>
        <para>Move to the previous record (identical to Skip(-1)).</para>
      </summary>
      <returns>
        <para>TRUE if operation was successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.DataWindow.Status">
      <summary>
        <para>
          A hyperlabel identifying the status of this data window after the last operation. If the last operation was successful, this value is NULL_OBJECT; if
          something went wrong (whether it raised an error condition or merely returned a failure code), DataWindow:Status returns an informative hyperlabel.
        </para>
      </summary>
    </member>
    <member name="P:VO.DataWindow.StatusBar">
      <summary></summary>
    </member>
    <member name="M:VO.DataWindow.StatusOK">
      <summary>
        <para>Indicate the current validation status of the window through a return code and by setting the DataWindow:Status property.</para>
      </summary>
    </member>
    <member name="P:VO.DataWindow.SubForms">
      <summary></summary>
    </member>
    <member name="P:VO.DataWindow.Surface">
      <summary></summary>
    </member>
    <member name="F:VO.DataWindow.symFormDialog">
      <summary></summary>
    </member>
    <member name="M:VO.DataWindow.TextPrint(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Display a given string on the data window at a specified location using the current font and the current pen color.</para>
      </summary>
      <param name="cText">
      </param>
      <param name="oPoint">
      </param>
    </member>
    <member name="P:VO.DataWindow.ToolBar">
      <summary></summary>
    </member>
    <member name="M:VO.DataWindow.ToolBarHeightChanged(XSharp.__Usual)">
      <param name="oControlNotifyEvent">
      </param>
    </member>
    <member name="M:VO.DataWindow.Undo">
      <summary>
        <para>Undo recent changes made in this data window.</para>
      </summary>
    </member>
    <member name="M:VO.DataWindow.UndoAll">
      <summary>
        <para>Undo all changes made in this data window since the last record movement or Commit() operation.</para>
      </summary>
    </member>
    <member name="M:VO.DataWindow.UpdateActiveObject">
      <summary></summary>
    </member>
    <member name="M:VO.DataWindow.Use(XSharp.__Usual)">
      <summary>
        <para>Connect the data window to a data server in a client-server relationship.</para>
      </summary>
      <param name="oDataServer">
      </param>
      <returns>
        <para>
          TRUE if the connection was successful; otherwise, FALSE. The operation fails under the following conditions: if the window has controls and columns but none
          matches the names of the fields of the server and, of course, if there is a technical problem with the server.
        </para>
      </returns>
    </member>
    <member name="M:VO.DataWindow.VerticalScroll(XSharp.__Usual)">
      <param name="oScrollEvent">
      </param>
    </member>
    <member name="M:VO.DataWindow.VerticalSlide(XSharp.__Usual)">
      <param name="oSlideEvent">
      </param>
    </member>
    <member name="M:VO.DataWindow.VerticalSpin(XSharp.__Usual)">
      <param name="oSpinEvent">
      </param>
    </member>
    <member name="M:VO.DataWindow.ViewAs(XSharp.__Usual)">
      <summary>
        <para>Specify the view mode of the data window, as browse view or form view.</para>
      </summary>
      <param name="symViewType">
      </param>
    </member>
    <member name="M:VO.DataWindow.ViewForm">
      <summary>
        <para>Select form view for the data window.</para>
      </summary>
    </member>
    <member name="M:VO.DataWindow.ViewTable">
      <summary>
        <para>Select browse view for the data window.</para>
      </summary>
    </member>
    <member name="T:VO.DateRange">
      <summary>
        <para>An auxiliary class used by the DateTimePicker and MonthCalendar controls to represent a date range.</para>
      </summary>
    </member>
    <member name="M:VO.DateRange.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a DateRange object.</para>
      </summary>
      <param name="dStart">
      </param>
      <param name="dEnd">
      </param>
    </member>
    <member name="P:VO.DateRange.Max">
      <summary>
        <para>The date representing the upper limit of the date range.</para>
      </summary>
    </member>
    <member name="P:VO.DateRange.Min">
      <summary>
        <para>The date representing the lower limit of the date range.</para>
      </summary>
    </member>
    <member name="T:VO.DateTimePicker">
      <summary>
        <para>Encapsulate a DateTimePicker control.</para>
      </summary>
    </member>
    <member name="M:VO.DateTimePicker.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a DateTimePicker object.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="dwStyle">
      </param>
      <param name="lDataAware">
      </param>
    </member>
    <member name="P:VO.DateTimePicker.DateRange">
      <summary>
        <para>A DateRange object setting the range of allowable dates.</para>
      </summary>
    </member>
    <member name="P:VO.DateTimePicker.Format">
      <summary>
        <para>Sets the display format of the DateTimePicker control. The assign expects a string containing any of the following fragments:</para>
        <b>String Fragment</b>
        <b>Description</b>
        "d" The one- or two-digit day.
        "dd" The two-digit day. Single-digit day values are preceded by a zero (0).
        "ddd" The three-character weekday abbreviation.
        "dddd" The full weekday name.
        "h" The one- or two-digit hour in 12-hour format.
        "hh" The two-digit hour in 12-hour format. Single-digit values are preceded by a zero (0).
        "H" The one- or two-digit hour in 24-hour format.
        "HH" The two-digit hour in 24-hour format. Single-digit values are preceded by a zero (0).
        "m" The one- or two-digit minute.
        "mm" The two-digit minute. Single-digit values are preceded by a zero (0).
        "M" The one- or two-digit month number.
        "MM" The two-digit month number. Single-digit values are preceded by a zero (0).
        "MMM" The three-character month abbreviation.
        "MMMM" The full month name.
        "t" The one-letter AM/PM abbreviation (that is, AM is displayed as "A").
        "tt" The two-letter AM/PM abbreviation (that is, AM is displayed as "AM").
        "y" The one-digit year (that is, 1999 would be displayed as "9").
        "yy" The last two digits of the year (that is, 1999 would be displayed as "99").
        "yyy" The full year (that is, 1999 would be displayed as "1999").
      </summary>
    </member>
    <member name="P:VO.DateTimePicker.MCBackgroundColor">
      <summary></summary>
    </member>
    <member name="P:VO.DateTimePicker.MCFont">
      <summary>
        <para>A Font object specifying the font of the MonthCalendar pop-up window, if the DateTimePicker is in date mode.</para>
      </summary>
    </member>
    <member name="P:VO.DateTimePicker.MCMonthBackgroundColor">
      <summary></summary>
    </member>
    <member name="P:VO.DateTimePicker.MCTextColor">
      <summary>
        <para>A Color object describing the text color of the MonthCalendar pop-up window, if the DateTimePicker is in date mode.</para>
      </summary>
    </member>
    <member name="P:VO.DateTimePicker.MCTitleBackgroundColor">
      <summary></summary>
    </member>
    <member name="P:VO.DateTimePicker.MCTitleTextColor">
      <summary></summary>
    </member>
    <member name="P:VO.DateTimePicker.MCTrailingTextColor">
      <summary></summary>
    </member>
    <member name="P:VO.DateTimePicker.NullFormat">
      <summary></summary>
    </member>
    <member name="M:VO.DateTimePicker.ParentNotify(XSharp.__Usual,XSharp.__Usual)">
      <param name="nCode">
      </param>
      <param name="lParam">
      </param>
    </member>
    <member name="M:VO.DateTimePicker.PerformValidations">
      <summary></summary>
    </member>
    <member name="P:VO.DateTimePicker.SelectedDate">
      <summary>
        <para>A date specifying the currently selected date.</para>
      </summary>
    </member>
    <member name="P:VO.DateTimePicker.SelectedTime">
      <summary>
        <para>A string (format "HH:MM:SS") specifying the currently selected time.</para>
      </summary>
    </member>
    <member name="M:VO.DateTimePicker.SetDateTime(XSharp.__Date,System.String)">
      <param name="dNewDate">
      </param>
      <param name="sNewTime">
      </param>
    </member>
    <member name="P:VO.DateTimePicker.TextValue">
      <summary>
        <para>The current value in string format. This is needed internally to allow the binding of a DateTimePicker control to a database field.</para>
      </summary>
    </member>
    <member name="P:VO.DateTimePicker.Value">
      <summary></summary>
    </member>
    <member name="T:VO.DateTimeSelectionEvent">
      <summary>
        <para>Provide information about a date time selection event, which is generated when a user selected a Date or Time in a DateTimePicker control.</para>
      </summary>
    </member>
    <member name="M:VO.DateTimeSelectionEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.DateTimeSelectionEvent.SelectedDate">
      <summary>
        <para>A date value indicating the date the user selected in the control</para>
      </summary>
    </member>
    <member name="P:VO.DateTimeSelectionEvent.SelectedTime">
      <summary>
        <para>A string value indicating the time the user selected in the control</para>
      </summary>
    </member>
    <member name="T:VO.DialogWindow">
      <summary>
        <para>
          Create a dialog window (also commonly referred to as a <b>dialog box</b>), which allows the application and end user to interact. This type of dialog can be
          modal or modeless (see the description below).
        </para>
      </summary>
    </member>
    <member name="M:VO.DialogWindow.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a dialog window.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xResourceID">
      </param>
      <param name="lModal">
      </param>
    </member>
    <member name="M:VO.DialogWindow.Activate(XSharp.__Usual)">
      <param name="oEvent">
      </param>
    </member>
    <member name="M:VO.DialogWindow.Active">
      <summary></summary>
    </member>
    <member name="M:VO.DialogWindow.ButtonClick(XSharp.__Usual)">
      <param name="oControlEvent">
      </param>
    </member>
    <member name="M:VO.DialogWindow.ChangeFont(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Change the font used by this dialog window.</para>
      </summary>
      <param name="New_Font">
      </param>
      <param name="lRescale">
      </param>
      <returns>
        <para>The font previously assigned to the dialog window.</para>
      </returns>
    </member>
    <member name="P:VO.DialogWindow.ClipperKeys">
      <summary>
        <para>
          A logical value indicating that the CA-Clipper navigation keys (i.e., the Direction and Return keys) are to be used for this dialog window (TRUE if yes,
          FALSE if no).
        </para>
      </summary>
    </member>
    <member name="M:VO.DialogWindow.ControlFocusChange(XSharp.__Usual)">
      <param name="oControlFocusChangeEvent">
      </param>
    </member>
    <member name="M:VO.DialogWindow.DeActivate(XSharp.__Usual)">
      <param name="oEvent">
      </param>
    </member>
    <member name="M:VO.DialogWindow.Default(XSharp.__Usual)">
      <param name="oEvent">
      </param>
    </member>
    <member name="M:VO.DialogWindow.Destroy">
      <inheritdoc />
    </member>
    <member name="M:VO.DialogWindow.EditChange(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="M:VO.DialogWindow.EditFocusChange(XSharp.__Usual)">
      <param name="oEditFocusChangeEvent">
      </param>
    </member>
    <member name="M:VO.DialogWindow.EndDialog(XSharp.__Usual)">
      <summary>
        <para>
          Remove this dialog window from view (passing control back to the routine which created the dialog window) and post a result code indicating how it was
          closed.
        </para>
      </summary>
      <param name="iResult">

      </param>

      <remarks>
        <para>
          <b>Note:</b> This result code can then be passed to the routine that called the dialog window if the routine invokes DialogWindow:Result.
        </para>
      </remarks>
    </member>
    <member name="M:VO.DialogWindow.ExecModal">
      <summary>
        <para>Allows the programmer greater control over Windows message handling in dialog windows.</para>
      </summary>
    </member>
    <member name="M:VO.DialogWindow.HelpRequest(XSharp.__Usual)">
      <param name="oHelpRequestEvent">

      </param>
    </member>

    <member name="P:VO.DialogWindow.IsModal">
      <summary></summary>
    </member>
    <member name="P:VO.DialogWindow.LastFocus">
      <summary></summary>
    </member>
    <member name="M:VO.DialogWindow.ListBoxClick(XSharp.__Usual)">
      <param name="oControlEvent">

      </param>
    </member>
    <member name="M:VO.DialogWindow.ListBoxSelect(XSharp.__Usual)">
      <param name="oControlEvent">
      </param>
    </member>
    <member name="P:VO.DialogWindow.Owner">
      <summary></summary>
    </member>
    <member name="M:VO.DialogWindow.PostShowDialog">
      <summary></summary>
    </member>
    <member name="P:VO.DialogWindow.Result">
      <summary>
        <para>
          A numeric result code posted by the DialogWindow:EndDialog() method returned to the system when this dialog window was closed.
        </para>
      </summary>
      <remarks>
        <para>
          A numeric result code posted by the DialogWindow:EndDialog() method returned to the system when this dialog window was closed. (For example, it may have
          posted a 0 if the Cancel push button was pressed or a 1 if OK was pressed.)
        </para>
        <para>
          <b>Note:</b> DialogWindow:Result should be invoked by the owner's method that showed the dialog window to determine the action that closed the dialog
          window.
        </para>
      </remarks>
    </member>
    <member name="M:VO.DialogWindow.Show(XSharp.__Usual)">
      <param name="kShowState">

      </param>
    </member>
    <member name="M:VO.DialogWindow.ShowModal(XSharp.__Usual)">
      <param name="lActive">

      </param>
    </member>
    <member name="T:VO.Dimension">
      <summary>
        <para>
          Create a Dimension object, which is used to describe the size of two-dimensional objects using ordered pair coordinates (width, height or <i>x</i>,
          <i>y</i>).
        </para>
      </summary>
      <remarks>
        <para>
          <b>Note:</b> When a dimension is used to describe irregularly-shaped objects, it specifies the size of the smallest bounding box that can fully enclose the
          object.
        </para>
      </remarks>
    </member>

    <member name="M:VO.Dimension.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a dimension.</para>
      </summary>
      <param name="nWidth">

      </param>
      <param name="nHeight">

      </param>
    </member>
    <member name="P:VO.Dimension.Height">
      <summary>
        <para>A numeric value representing this dimension's height.</para>
      </summary>
    </member>
    <member name="P:VO.Dimension.Width">
      <summary>
        <para>A numeric value representing this dimension's width.</para>
      </summary>
    </member>
    <member name="T:VO.DragDropClient">
      <summary>
        <para>Create the client for use in a drag-and-drop operation.</para>
      </summary>
    </member>
    <member name="M:VO.DragDropClient.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct a drag-and-drop client.</para>
        <para>
          <b>
            <i>Important!</i>
            <br />
          </b>
          <i>
            Normally, this method should not be called in your application code. Instead use Window:EnableDragDropClient(TRUE) to create a
            drag-and-drop client.
          </i>
        </para>
      </summary>
      <param name="oOwner">
      </param>
    </member>
    <member name="M:VO.DragDropClient.Destroy">
      <summary></summary>
    </member>
    <member name="M:VO.DragDropClient.Dispatch(XSharp.__Usual)">
      <param name="oEvent">
      </param>
    </member>
    <member name="M:VO.DragDropClient.DragLeave(XSharp.__Usual)">
      <param name="oEvent">
      </param>
    </member>
    <member name="M:VO.DragDropClient.DragOver(XSharp.__Usual)">
      <summary>
        <para>Notify the application of a DragOver event and accept or reject the drop.</para>
      </summary>
      <param name="oDragEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
      <returns>
        <para>
          The client can refuse a drag-and-drop operation by returning FALSE from this method (usually because a certain file type is not accepted). Windows then
          changes the pointer to a no-entry sign. The method returns TRUE if a drop is accepted.
        </para>
      </returns>
    </member>
    <member name="M:VO.DragDropClient.Drop(XSharp.__Usual)">
      <summary>
        <para>Retrieve information about a load from the drag event and act on each file in the selection.</para>
      </summary>
      <param name="oDragEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="P:VO.DragDropClient.Owner">
      <summary></summary>
    </member>
    <member name="T:VO.DragDropServer">
      <summary>
        <para>Create the server for use in a drag-and-drop operation.</para>
      </summary>
    </member>
    <member name="M:VO.DragDropServer.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct a drag-and-drop server.</para>
        <para>
          <b>
            <i>Important!</i>
            <br />
          </b>
          <i>
            Normally, this method should not be called in your application code. Instead use Window:EnableDragDropServer(TRUE) to make the
            window a drag-and-drop server.
          </i>
        </para>
      </summary>
      <param name="oOwner">

      </param>
    </member>
    <member name="M:VO.DragDropServer.Destroy">
      <summary></summary>
    </member>
    <member name="M:VO.DragDropServer.StartDrag(XSharp.__Usual)">
      <param name="acFilesToDrag">
      </param>
    </member>
    <member name="T:VO.DragEvent">
      <summary>
        <para>
          Provide information about a drag event, which enables the drag-and-drop client (the receiving window) to track the progress of the mouse during the drag
          operation and to identify the files that the user can drop.
        </para>
      </summary>
    </member>
    <member name="M:VO.DragEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>

    <member name="P:VO.DragEvent.Control">
      <summary>
        <para>
          A control object returning the control whenever a drop-and-drag event has occurred inside a control with WS_EX_ACCEPTFILES set. If WS_EX_ACCEPTFILES is
          TRUE, the control accepts files and triggers a call to its parent Drop() method.
        </para>
      </summary>
    </member>
    <member name="P:VO.DragEvent.FileCount">
      <summary>
        <para>A numeric value representing the number of files in the drag-and-drop load that generated this drag event.</para>
      </summary>
    </member>
    <member name="M:VO.DragEvent.FileName(XSharp.__Usual)">
      <summary>
        <para>Return the name of a specified file in the drag-and-drop load that generated this drag event.</para>
      </summary>
      <param name="nfile">
      </param>
    </member>
    <member name="P:VO.DragEvent.Origin">
      <summary>
        <para>A point representing the location of the mouse in canvas coordinates at the time this drag event was generated.</para>
      </summary>
    </member>
    <member name="T:VO.DrawObject">
      <summary>
        <para>Provide the base class from which all DrawObject objects are subclassed.</para>
      </summary>
    </member>
    <member name="M:VO.DrawObject.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct a DrawObject object.</para>
      </summary>
      <param name="oPoint">
      </param>
    </member>
    <member name="P:VO.DrawObject.BoundingBox">
      <summary>
        <para>A bounding box representing the smallest rectangle (in the owner window's canvas coordinates) which encloses this DrawObject object.</para>
      </summary>
    </member>
    <member name="M:VO.DrawObject.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a DrawObject object.</para>
      </summary>
    </member>
    <member name="M:VO.DrawObject.Draw">
      <summary>
        <para>Display a DrawObject object.</para>
      </summary>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
        <para>
          <b>Note:</b> The default implementation of the DrawObject:Draw() method has no effect. You should derive your class from DrawObject and overload the Draw()
          method to contain the code to draw the new object. This method can then be called by Window:Draw().
        </para>
      </remarks>
    </member>
    <member name="M:VO.DrawObject.Handle(XSharp.__Usual)">
      <summary>
        <para>Return the handle for a DrawObject object.</para>
      </summary>
      <param name="nHandleType">
      </param>
      <returns>
        <para>
          A handle to the device context for the window on which the object is to be drawn. The runtime will release this handle when necessary. You should not
          save it to a variable.
        </para>
        <para>
          <b>Note:</b> This method only has an effect in an overridden DrawObject:Draw() method.
        </para>
      </returns>
    </member>
    <member name="M:VO.DrawObject.HitTest(XSharp.__Usual)">
      <summary>
        <para>Determine if a given point lies within the bounding box of a DrawObject object.</para>
      </summary>
      <param name="oPoint">
      </param>
      <returns>
        <para>TRUE if the point lies within the bounding box of the DrawObject object; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.DrawObject.Origin">
      <summary>
        <para>A point representing the origin of this DrawObject object in canvas coordinates.</para>
      </summary>
    </member>
    <member name="P:VO.DrawObject.RasterOperation">
      <summary>
        <para>A constants indicating the raster operation in use for this DrawObject object:</para>
      </summary>
      <remarks>
        <para>One of the following constants, indicating the raster operation in use for this DrawObject object:</para>
        <list type="table">
          <listheader>
            <term>Constant</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>ROPBACKGROUND</term>
            <description>
              Draw this object using the background color of the window.
            </description>
          </item>
          <item>
            <term>ROPINVERT</term>
            <description>Invert the object currently displayed. This operation can be used for elastic banding, moving objects, and so forth.</description>
          </item>
          <item>
            <term>ROPOVERWRITE</term>
            <description>Overwrite the current display. This is the default.</description>
          </item>
          <item>
            <term>ROPXOR</term>
            <description>Exclusive OR with the current window contents.</description>
          </item>
        </list>
        <para>
          This property allows you to specify how the drawing affects whatever is already on the window. The XOR operation, for example, is useful for temporary
          drawings you want to be able to remove, restoring the original image.
        </para>
      </remarks>
    </member>
    <member name="P:VO.DrawObject.Size">
      <summary>
        <para>A dimension representing the size of this DrawObject object.</para>
      </summary>
    </member>
    <member name="T:VO.Edit">
      <summary>
        <para>Provide the base class from which all edit controls are subclassed.</para>
      </summary>
    </member>
    <member name="M:VO.Edit.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct an edit control.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="kStyle">
      </param>
    </member>
    <member name="M:VO.Edit.CanUndo">
      <summary>
        <para>Determine if the Edit:Undo() method can be called for this edit control.</para>
      </summary>
      <returns>
        <para>TRUE if Edit:Undo() can be invoked; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.Edit.Caption">
      <summary>
        <para>Caption text is not displayed for single-line or multiline edit controls. It can be used to store general text information.</para>
      </summary>
    </member>
    <member name="M:VO.Edit.Clear">
      <summary>
        <para>Delete the current selection in this edit control.</para>
      </summary>
    </member>
    <member name="M:VO.Edit.Copy">
      <summary>
        <para>Copy the current selection in this edit control to the clipboard.</para>
      </summary>
    </member>
    <member name="M:VO.Edit.Cut">
      <summary>
        <para>Delete the current selection in this edit control and copy it to the clipboard.</para>
      </summary>
    </member>
    <member name="M:VO.Edit.Font(XSharp.__Usual,XSharp.__Usual)">
      <param name="oNewFont">
      </param>
      <param name="lRescal">
      </param>
    </member>
    <member name="M:VO.Edit.IsPassword">
      <summary></summary>
    </member>
    <member name="P:VO.Edit.Margins">
      <summary>
        <para>A Dimension object specifying the left and right margins of the edit control.</para>
      </summary>
    </member>
    <member name="P:VO.Edit.Modified">
      <summary>
        <para>
          A logical value indicating whether an editable control is in the process of being modified. While you are editing the text, it is set to TRUE. When the edit
          is completed and focus shifts to another control, Edit:Modified is reset to FALSE.
        </para>
      </summary>
    </member>
    <member name="M:VO.Edit.Paste(XSharp.__Usual)">
      <summary>
        <para>Replace the current selection in this edit control with a string, if specified, or the contents of the clipboard.</para>
      </summary>
      <param name="cNewString">
      </param>
    </member>
    <member name="P:VO.Edit.ReadOnly">
      <summary>
        <para>
          A logical value specifying the read-only state of an edit control. This property allows you to change the read-only state at runtime. Note that changing the
          ReadOnly style via Edit:SetStyle(ES_READONLY) is not respected by the edit control at runtime.
        </para>
      </summary>
    </member>
    <member name="M:VO.Edit.SelectAll">
      <summary></summary>
    </member>
    <member name="P:VO.Edit.SelectedText">
      <summary>
        <para>A string representing the text that is currently selected in this edit control.</para>
      </summary>
    </member>
    <member name="P:VO.Edit.Selection">
      <summary>
        <para>
          The position of the cursor in the edit control. For example, a Selection of {5,10} means the text from position 5 through 9 inclusive is selected, while a
          Selection of {5,5} means the cursor is positioned in front of the fifth character.
        </para>
      </summary>
    </member>
    <member name="M:VO.Edit.SelectNone">
      <summary></summary>
    </member>
    <member name="M:VO.Edit.SetSelectionFocus">
      <summary></summary>
    </member>
    <member name="P:VO.Edit.TextLimit">
      <summary>
        <para>
          A numeric value representing the maximum number of characters this edit control can hold. A value of 0 indicates that there is no limit being imposed. If
          the limit specified is less than the size of the text already in the buffer, the existing text is truncated.
        </para>
      </summary>
    </member>
    <member name="P:VO.Edit.TextValue">
      <summary>
        <para>
          A string representing the value held in the control. For example, in a standard edit control, the value can be "Jones" or "$14,683.00". The Edit:TextValue
          assign also changes the Edit:CurrentText and Edit:Value.
        </para>
        <para>
          Note that the string is formatted according to the picture clause held in the field specification of the edit field; in turn, edit fields linked to a data
          server inherit the field specification — and hence picture — from the field of the server.
        </para>
      </summary>
    </member>
    <member name="M:VO.Edit.Undo">
      <summary>
        <para>Undo the last modification to the text in this edit control.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="T:VO.EditFocusChangeEvent">
      <summary>
        <para>
          Provide information about an EditFocusChangeEvent, generated when an edit control (i.e., SingleLineEdit, MultiLineEdit, or EditWindow) gains or loses the
          keyboard focus.
        </para>
      </summary>
    </member>
    <member name="M:VO.EditFocusChangeEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.EditFocusChangeEvent.GotFocus">
      <summary></summary>
    </member>
    <member name="T:VO.EditWindow">
      <summary>
        <para>Create an edit control as part of the Window hierarchy, thereby allowing the behavior of the edit control to be customized using event handlers.</para>
      </summary>
    </member>
    <member name="M:VO.EditWindow.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Create an edit window.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
    </member>
    <member name="M:VO.EditWindow.AsString">
      <summary>
        <para>Return the contents of the edit window.</para>
      </summary>
    </member>
    <member name="M:VO.EditWindow.Clear">
      <summary>
        <para>Delete the current selection in this edit window.</para>
      </summary>
    </member>
    <member name="M:VO.EditWindow.Copy">
      <summary>
        <para>Copy the text that is currently selected in an edit window to the clipboard.</para>
      </summary>
    </member>
    <member name="M:VO.EditWindow.Cut">
      <summary>
        <para>Delete the text that is currently selected in an edit window and copy it to the clipboard.</para>
      </summary>
    </member>
    <member name="P:VO.EditWindow.Font">
      <summary></summary>
    </member>
    <member name="M:VO.EditWindow.GetLine(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Get a specified line of text in this edit window.</para>
      </summary>
      <param name="nLineNumber">
      </param>
      <param name="nMaxLength">
      </param>
      <returns>
        <para>The text of the specified line.</para>
      </returns>
    </member>
    <member name="P:VO.EditWindow.Length">
      <summary>
        <para>A numeric value representing the number of characters in this edit window.</para>
      </summary>
    </member>
    <member name="P:VO.EditWindow.LineCount">
      <summary>
        <para>A numeric value representing the number of text lines in this edit window.</para>
      </summary>
    </member>
    <member name="M:VO.EditWindow.LineDown">
      <summary>
        <para>Scroll the text in this edit window down by a single line.</para>
      </summary>
    </member>
    <member name="M:VO.EditWindow.LineUp">
      <summary>
        <para>Scroll the text in this edit window up by a single line.</para>
      </summary>
    </member>
    <member name="M:VO.EditWindow.PageDown">
      <summary>
        <para>Scroll the text in this edit window down by a single page.</para>
      </summary>
    </member>
    <member name="M:VO.EditWindow.PageUp">
      <summary>
        <para>Scroll the text in this edit window up by a single page.</para>
      </summary>
    </member>
    <member name="M:VO.EditWindow.Paste(XSharp.__Usual)">
      <summary>
        <para>Replace the text that is currently selected in an edit window with the contents of the clipboard.</para>
      </summary>
      <param name="cNewString">
      </param>
    </member>
    <member name="M:VO.EditWindow.ScrollHorizontal(XSharp.__Usual)">
      <param name="nChars">
      </param>
    </member>
    <member name="M:VO.EditWindow.ScrollVertical(XSharp.__Usual)">
      <param name="nLines">
      </param>
    </member>
    <member name="P:VO.EditWindow.Selection">
      <summary>
        <para>A Selection object, representing the currently selected text in the edit window.</para>
        <para>
          For example, a Selection value of {5,10} means the text from position 5 through 9 inclusive is selected, while a Selection value of {5,5} means the cursor
          is positioned in front of the fifth character.
        </para>
      </summary>
    </member>
    <member name="P:VO.EditWindow.TextLimit">
      <summary>
        <para>
          A numeric value representing the maximum number of characters the edit window can hold. A value of 0 indicates that there is no limit being imposed. If the
          limit specified is less than the size of the text already in the buffer, the existing text is truncated.
        </para>
      </summary>
    </member>
    <member name="P:VO.EditWindow.TextValue">
      <summary>
        <para>A string representing the value held in the edit window. For example, the value can be "Jones" or "$14,683.00".</para>
      </summary>
    </member>
    <member name="M:VO.EditWindow.Undo">
      <summary>
        <para>Undo the last modification to the text in this edit window.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.EditWindow.Value">
      <summary>
        <para>The value held in the edit field in whatever data type the edit window holds. For example, the value can be the string "Jones" or the number 14683.</para>
        <para>
          The data type of the edit window is determined by its field specification; in turn, edit windows linked to a data server inherit the field
          specification — and hence data type — from the field of the server.
        </para>
      </summary>
    </member>
    <member name="T:VO.EllipseObject">
      <summary>
        <para>
          Create an EllipseObject object; this type of entity is part of the DrawObject hierarchy, which provides a means of displaying and manipulating various
          objects.
        </para>
      </summary>
    </member>
    <member name="M:VO.EllipseObject.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct an EllipseObject object.</para>
      </summary>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="oPen">
      </param>
      <param name="oBrush">
      </param>
    </member>
    <member name="M:VO.EllipseObject.Draw">
      <summary>
        <para>Draw this EllipseObject object.</para>
      </summary>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="T:VO.ErrorBox">
      <summary>
        <para>Present the user with an error message box.</para>
      </summary>
    </member>
    <member name="M:VO.ErrorBox.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct an error message box.</para>
      </summary>
      <param name="uParent">
      </param>
      <param name="uText">
      </param>
    </member>
    <member name="T:VO.Event">
      <summary>
        <para>Provide the base class from which all events are subclassed.</para>
      </summary>
    </member>

    <member name="M:VO.Event.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct an event.</para>
        <para>
          <b>
            <i>Important!</i>
            <br />
          </b>
          <i>The GUI Runtime instantiates events.</i>
        </para>
      </summary>
      <param name="_hWnd">

      </param>
      <param name="_uMsg">

      </param>
      <param name="_wParam">

      </param>
      <param name="_lParam">

      </param>
      <param name="_oWindow">

      </param>
    </member>
    <member name="P:VO.Event.Handle">
      <summary></summary>
    </member>
    <member name="F:VO.Event.hWnd">
      <summary></summary>
    </member>
    <member name="F:VO.Event.lParam">
      <summary></summary>
    </member>
    <member name="P:VO.Event.Message">
      <summary>
        <para>A word representing the Windows API message associated with the given event.</para>
        <para>This can be used in the Dispatch() method of EventContext class for processing of custom messages.</para>
      </summary>
    </member>
    <member name="F:VO.Event.oWindow">
      <summary></summary>
    </member>
    <member name="F:VO.Event.uMsg">
      <summary></summary>
    </member>
    <member name="P:VO.Event.Window">
      <summary>
        <para>
          An object indicating the window or control in which the event occurred. This is helpful, for example, for distinguishing between similar menu events coming
          from the same context menu attached to different controls.
        </para>
      </summary>
    </member>
    <member name="F:VO.Event.wParam">
      <summary></summary>
    </member>
    <member name="T:VO.EventContext">
      <summary>
        <para>
          Provide the base class from which all event-handling classes are subclassed, embodying the elements needed by any objects that receive
          events.
        </para>
      </summary>
    </member>
    <member name="M:VO.EventContext.#ctor">
      <summary>
        <para>Construct an event context.</para>
      </summary>
    </member>
    <member name="M:VO.EventContext.Destroy">
      <summary>
        <para>Destroy the event context permanently.</para>
      </summary>
    </member>
    <member name="M:VO.EventContext.Override">
      <summary></summary>
    </member>
    <member name="P:VO.EventContext.SelfPtrStruc">
      <summary></summary>
    </member>
    <member name="T:VO.ExplorerWindow">
      <summary>
        <para>Create an explorer window.</para>
      </summary>
    </member>
    <member name="M:VO.ExplorerWindow.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct an ExplorerWindow object.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="lLabels">
      </param>
      <param name="symTreeViewClassName">
      </param>
      <param name="symListViewClassName">
      </param>
    </member>
    <member name="M:VO.ExplorerWindow.Destroy">
      <summary></summary>
    </member>
    <member name="P:VO.ExplorerWindow.LabelLeft">
      <summary>
        <para>The left fixed text control in a four-pane explorer window. In a two-pane explorer window, this returns NULL_OBJECT.</para>
      </summary>
    </member>
    <member name="P:VO.ExplorerWindow.LabelRight">
      <summary>
        <para>The right fixed text control in a four-pane explorer window. In a two-pane explorer window, this returns NULL_OBJECT.</para>
      </summary>
    </member>
    <member name="P:VO.ExplorerWindow.ListView">
      <summary>
        <para>The list view control in a two- or four-pane explorer window.</para>
      </summary>
    </member>
    <member name="M:VO.ExplorerWindow.ListViewColumnClick(XSharp.__Usual)">
      <param name="oEvt">
      </param>
    </member>
    <member name="P:VO.ExplorerWindow.TreeView">
      <summary>
        <para>The tree view control in a two- or four-pane explorer window.</para>
      </summary>
    </member>
    <member name="T:VO.ExposeEvent">
      <summary>
        <para>Provide information about an ExposeEvent, used to notify a window that it may need to be repainted.</para>
      </summary>
    </member>
    <member name="M:VO.ExposeEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.ExposeEvent.ExposedArea">
      <summary>
        <para>A bounding box — in canvas coordinates — representing the exposed area that caused this expose event.</para>
        <para>Use this method to optimize your repainting routines so that they paint only the area which requires refreshing.</para>
      </summary>
    </member>
    <member name="T:VO.FixedBitmap">
      <summary>
        <para>
          Create a FixedBitmap object. Unlike the bitmaps created by the Bitmap class, fixed bitmaps are <b>static</b> — they do not need to be redisplayed
          every time an ExposeEvent occurs. FixedBitmap objects can be created dynamically or from a resource entity.
        </para>
      </summary>
    </member>
    <member name="M:VO.FixedBitmap.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a FixedBitmap object.</para>
      </summary>
      <param name="uOwner">
      </param>
      <param name="uID">
      </param>
      <param name="uPoint">
      </param>
      <param name="uDimension">
      </param>
      <param name="uResID">
      </param>
    </member>
    <member name="M:VO.FixedBitmap.AsString">
      <summary>
        <para>Return the identifying label of the fixed bitmap.</para>
      </summary>
    </member>
    <member name="M:VO.FixedBitmap.SetBitmap(XSharp.__Usual)">
      <summary>
        <para>Associate a bitmap image with the FixedBitmap static control.</para>
      </summary>
      <param name="oBitmap">
      </param>
    </member>
    <member name="T:VO.FixedIcon">
      <summary>
        <para>
          Create a FixedIcon object. Unlike the icons created by the Icon class, fixed icons are <b>static</b> — they do not need to be redisplayed every
          time an ExposeEvent occurs. FixedIcon objects can be created dynamically or from a resource entity.
        </para>
      </summary>
    </member>
    <member name="M:VO.FixedIcon.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a FixedIcon object.</para>
      </summary>
      <param name="uOwner">
      </param>
      <param name="uID">
      </param>
      <param name="uPoint">
      </param>
      <param name="uResID">
      </param>
    </member>
    <member name="M:VO.FixedIcon.AsString">
      <summary>
        <para>Return the identifying label of the fixed icon.</para>
      </summary>
    </member>
    <member name="M:VO.FixedIcon.SetIcon(XSharp.__Usual)">
      <param name="oIcon">
      </param>
    </member>
    <member name="T:VO.FixedImage">
      <summary>
        <para>Provide the base class from which FixedBitmap and FixedIcon are subclassed.</para>
      </summary>
    </member>
    <member name="M:VO.FixedImage.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a FixedImage control.</para>
      </summary>
      <param name="uOwner">
      </param>
      <param name="uID">
      </param>
      <param name="uPoint">
      </param>
      <param name="uDimension">
      </param>
      <param name="uResID">
      </param>
    </member>
    <member name="M:VO.FixedImage.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a FixedImage object.</para>
      </summary>
    </member>
    <member name="T:VO.FixedText">
      <summary>
        <para>
          Create a FixedText object. Unlike text displayed with Window:TextPrint(), fixed text from a FixedText object is <b>static</b> — they do not need
          to be redisplayed every time an ExposeEvent occurs. FixedText objects can be created dynamically or from a resource entity.
        </para>
      </summary>
      <remarks>
        <para>
          <b>Note:</b> The text in a FixedText object can be changed by assigning TextControl:TextValue. In such a case, it may be necessary to resize the FixedText
          object because the size of the control dictates the clipping region for the displayed text.
        </para>
      </remarks>
    </member>
    <member name="M:VO.FixedText.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a FixedText object.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="cText">
      </param>
      <param name="lDataAware">
      </param>
    </member>
    <member name="M:VO.FixedText.Dispatch(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="F:VO.FixedText.lDrawThemeBackground">
      <summary></summary>
    </member>
    <member name="F:VO.FixedText.lUseDrawText">
      <summary></summary>
    </member>
    <member name="P:VO.FixedText.Margin">
      <summary></summary>
    </member>
    <member name="M:VO.FixedText.SetDrawStyle(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set the alignment style for the text in a FixedText object.</para>
      </summary>
      <param name="dwDrawStyle">
      </param>
      <param name="lEnable">
      </param>
    </member>
    <member name="M:VO.FixedText.SetStandardStyle(XSharp.__Usual)">
      <param name="kTextStyle">
      </param>
    </member>
    <member name="T:VO.FocusChangeEvent">
      <summary>
        <para>Provide information about a FocusChangeEvent, used to indicate a change in window focus (i.e., gaining or losing focus).</para>
      </summary>
    </member>
    <member name="M:VO.FocusChangeEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.FocusChangeEvent.GotFocus">
      <summary>
        <para>A logical value determining whether a window has either gained keyboard focus (TRUE) or is about to lose it (FALSE).</para>
      </summary>
    </member>
    <member name="T:VO.Font">
      <summary>
        <para>Create a font, which describes how characters are displayed on a window.</para>
      </summary>
    </member>
    <member name="M:VO.Font.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a font.</para>
      </summary>
      <param name="kFont">
      </param>
      <param name="oDimension">
      </param>
      <param name="sTypeFace">
      </param>
    </member>
    <member name="P:VO.Font.Bold">
      <summary>
        <para>A logical value determining whether a font is displayed in a bold typeface (TRUE if yes; otherwise, FALSE).</para>
        <para>
          <b>Note:</b> Only one of Font:Light, Font:Normal, and Font:Bold properties can be TRUE for any font.
        </para>
      </summary>
    </member>
    <member name="P:VO.Font.CharSet">
      <summary></summary>
    </member>
    <member name="P:VO.Font.ClipPrecision">
      <summary></summary>
    </member>
    <member name="M:VO.Font.ConvPntToDim(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Convert a specified point size for the font into a Dimension object.</para>
      </summary>
      <param name="nPntSize">
      </param>
      <param name="hDCConv">
      </param>
      <returns>
        <para>The Dimension object representing the specified point size.</para>
      </returns>
    </member>
    <member name="M:VO.Font.Create(XSharp.__Usual,XSharp.__Usual)">
      <param name="lPrinter">
      </param>
      <param name="hdc">
      </param>
    </member>
    <member name="M:VO.Font.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a Font object.</para>
      </summary>
    </member>
    <member name="P:VO.Font.Escapement">
      <summary></summary>
    </member>
    <member name="P:VO.Font.FaceName">
      <summary></summary>
    </member>
    <member name="P:VO.Font.Family">
      <summary></summary>
    </member>
    <member name="M:VO.Font.Handle">
      <summary>
        <para>Return the handle for a font.</para>
      </summary>
      <returns>
        <para>A handle describing the underlying system object.</para>
      </returns>
    </member>
    <member name="P:VO.Font.Height">
      <summary></summary>
    </member>
    <member name="P:VO.Font.Italic">
      <summary>
        <para>A logical value determining whether a font is displayed in a italic typeface (TRUE if yes; otherwise, FALSE).</para>
      </summary>
    </member>
    <member name="P:VO.Font.Light">
      <summary>
        <para>A logical value determining whether a font is displayed in a light typeface (TRUE if yes; otherwise, FALSE). Light is the opposite of bold.</para>
        <para>
          <b>Note:</b> Only one of Font:Light, Font:Normal, and Font:Bold can be TRUE for any font.
        </para>
      </summary>
    </member>
    <member name="P:VO.Font.Normal">
      <summary>
        <para>A logical value determining whether a font is displayed in a normal typeface (TRUE if yes; otherwise, FALSE).</para>
        <para>
          <b>Note:</b> Only one of Font:Light, Font:Normal, and Font:Bold can be TRUE for any font.
        </para>
      </summary>
    </member>
    <member name="P:VO.Font.Orientation">
      <summary></summary>
    </member>
    <member name="P:VO.Font.OutPrecision">
      <summary></summary>
    </member>
    <member name="P:VO.Font.PitchAndFamily">
      <summary></summary>
    </member>
    <member name="P:VO.Font.PitchFixed">
      <summary>
        <para>A logical value determining whether a font is displayed in a fixed pitch typeface (TRUE if yes; otherwise, FALSE).</para>
        <para>
          <b>Note:</b> Either the Font:PitchFixed or Font:PitchVariable property can be TRUE for any font, but not both properties.
        </para>
      </summary>
    </member>
    <member name="P:VO.Font.PitchVariable">
      <summary>
        <para>A logical value determining whether a font is displayed in a variable pitch typeface (TRUE if yes; otherwise, FALSE).</para>
        <para>
          <b>Note:</b> Either the Font:PitchFixed or Font:PitchVariable property can be TRUE for any font, but not both properties.
        </para>
      </summary>
    </member>
    <member name="P:VO.Font.PointSize">
      <summary></summary>
    </member>
    <member name="P:VO.Font.Quality">
      <summary></summary>
    </member>
    <member name="P:VO.Font.Size">
      <summary></summary>
    </member>
    <member name="M:VO.Font.SizeText(XSharp.__Usual)">
      <param name="cString">
      </param>
    </member>
    <member name="P:VO.Font.Strikethru">
      <summary>
        <para>
          A logical value determining whether a font is displayed in a strikethrough typeface (TRUE if yes; otherwise, FALSE). A strikethough typeface places a line
          through every character.
        </para>
      </summary>
    </member>
    <member name="P:VO.Font.Underline">
      <summary>
        <para>A logical value determining whether a font is displayed in an underline typeface (TRUE if yes; otherwise, FALSE).</para>
      </summary>
    </member>
    <member name="P:VO.Font.Weight">
      <summary></summary>
    </member>
    <member name="P:VO.Font.Width">
      <summary></summary>
    </member>
    <member name="T:VO.FormattedTextObject">
      <summary>
        <para>Provide a way to format a string specifying position (origin), font, and color.</para>
      </summary>
    </member>
    <member name="M:VO.FormattedTextObject.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Create a FormattedTextObject object.</para>
      </summary>
      <param name="oPoint">
      </param>
      <param name="cText">
      </param>
      <param name="oFont">
      </param>
      <param name="oColor">
      </param>
    </member>
    <member name="M:VO.FormattedTextObject.Draw">
      <summary></summary>
    </member>
    <member name="P:VO.FormattedTextObject.TabSize">
      <summary>
        <para>A numeric value representing the tab size — in characters — for a FormattedTextObject object. The default tab size is 8.</para>
      </summary>
    </member>
    <member name="T:VO.GroupBox">
      <summary>
        <para>Create a group box, which can be used to group related controls together.</para>
      </summary>
    </member>
    <member name="M:VO.GroupBox.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a group box.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="cText">
      </param>
      <param name="lDataAware">
      </param>
    </member>
    <member name="M:VO.GroupBox.AsString">
      <summary>
        <para>Return an identifying label for the group box.</para>
      </summary>
    </member>
    <member name="P:VO.GroupBox.CurrentText">
      <summary>
        <para>This property is provided to override the inherited functionality from the TextControl class, as it does not apply to group boxes.</para>
      </summary>
    </member>
    <member name="T:VO.HelpDisplay">
      <summary>
        <para>Create a link to the help system in use.</para>
      </summary>
    </member>
    <member name="M:VO.HelpDisplay.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a help display to be used for a specified help database.</para>
      </summary>
      <param name="cFileName">
      </param>
      <param name="oOwnerWindow">
      </param>
      <param name="lWin32Processing">
      </param>
    </member>
    <member name="F:VO.HelpDisplay.DefaultPageOnContents">
      <summary></summary>
    </member>
    <member name="M:VO.HelpDisplay.Destroy">
      <summary></summary>
    </member>
    <member name="M:VO.HelpDisplay.EnableHTMLHelp(XSharp.__Usual,XSharp.__Usual)">
      <param name="lEnable">
      </param>
      <param name="cPopUpTopic">
      </param>
    </member>
    <member name="M:VO.HelpDisplay.HelpError">
      <summary>
        <para>Determine if the previous HelpDisplay operation was successful.</para>
      </summary>
      <returns>
        <para>One of the following constants, indicating the success or failure of the previously called HelpDisplay:</para>
        <list type="table">
          <listheader>
            <term>Constant</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>HDCANTOPENFILE</term>
            <description>The help operation could not open the help database.</description>
          </item>
          <item>
            <term>HDINVALIDKEY</term>
            <description>An invalid key was used for HelpDisplay:Show().</description>
          </item>
          <item>
            <term>HDOK</term>
            <description>The operation was successful.</description>
          </item>
          <item>
            <term>HDOUTOFMEMORY</term>
            <description>
              The operation failed due to insufficient memory or other system resources.
            </description>
          </item>
          <item>
            <term>HDUNKNOWN</term>
            <description>It was not possible to determine why the last operation failed.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:VO.HelpDisplay.Show(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Instruct the help system to provide the help topic associated with a given keyword.</para>
      </summary>
      <param name="cKeyword">
      </param>
      <param name="symLookupType">
      </param>
      <returns>
        <para>TRUE if the lookup action took place correctly; otherwise, FALSE.</para>
      </returns>
      <remarks>
        <para>
          <b>Note:</b> A TRUE value does not imply the key was found.
        </para>
      </remarks>
    </member>
    <member name="F:VO.HelpDisplay.Win32Processing">
      <summary></summary>
    </member>
    <member name="T:VO.HelpRequestEvent">
      <summary>
        <para>
          Provide information about a HelpRequestEvent, used to describe the context and item combinations for which help is requested. (This can be help for
          controls, menu commands, and specific areas of a window.)
        </para>
      </summary>
    </member>
    <member name="M:VO.HelpRequestEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.HelpRequestEvent.HelpContext">
      <summary>
        <para>A string representing the help context ID of the control that generated this control event. </para>
      </summary>
      <remarks>
        <para>A string representing the help context ID of the control that generated this control event. This ID is contained in the control's hyperlabel.</para>
        <para>
          <b>Note:</b> A help context ID indicates the place in the hypertext system where the system looks for help concerning this control.
        </para>
      </remarks>
    </member>
    <member name="P:VO.HelpRequestEvent.HelpInfo">
      <summary>
        <para>A pointer to a _winHelpInfo structure if the help request is generated from a WM_HELP message otherwise Null_Ptr.</para>
      </summary>
    </member>
    <member name="P:VO.HelpRequestEvent.HelpType">
      <summary>
        <para>
          A constant, indicating the <b>type</b> of item — menu, control, or window area — for which help was requested:
        </para>
      </summary>
      <remarks>
        <para>
          One of the following constants, indicating the <b>type</b> of item — menu, control, or window area — for which help was requested:
        </para>
        <list type="table">
          <listheader>
            <term>Constant</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>HELPCONTROL</term>
            <description>Help is requested for a control.</description>
          </item>
          <item>
            <term>HELPMENU</term>
            <description>Help is requested for a menu command.</description>
          </item>
          <item>
            <term>HELPWINDOW</term>
            <description>Help is requested for a window area or point on the canvas.</description>
          </item>
          <item>
            <term>HELPINFO</term>
            <description>Help request is generated from a WM_HELP message.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:VO.HelpRequestEvent.HyperLabel">
      <summary>
        <para>
          The hyperlabel connected to the help request event. From the hyperlabel, you can retrieve additional information about the help request
          event — for example:
        </para>
        <para>cCaption := oHelpRequestEvent:HyperLabel:Caption</para>
        <para>cDescription := oHelpRequestEvent:HyperLabel:Description</para>
        <para>cHelpContext := oHelpRequestEvent:HyperLabel:HelpContext</para>
      </summary>
    </member>
    <member name="P:VO.HelpRequestEvent.ItemID">
      <summary>
        <para>A numeric value representing the ID of the item that the user has requested help on.</para>
      </summary>
      <remarks>
        <para>The exact meaning of this ID depends on the type of item:</para>
        <list type="table">
          <listheader>
            <term>Constant</term>
            <description>ID Returned</description>
          </listheader>
          <item>
            <term>HELPCONTROL</term>
            <description>A unique ID for the control.</description>
          </item>
          <item>
            <term>HELPMENU</term>
            <description>A unique ID for the menu command.</description>
          </item>
          <item>
            <term>HELPWINDOW</term>
            <description>
              A unique ID for the window area. The HelpRequestEvent:WindowRegion access determines which area of the window the help pointer was
              located (could be system menu, border, canvas, unknown, etc.).
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:VO.HelpRequestEvent.Position">
      <summary>
        <para>The location of the mouse pointer in canvas coordinates.</para>
      </summary>
      <remarks>
        <para>
          This method is provided to support help requests of type HelpWindow (refer to the HelpRequestEvent:HelpType assign) to allow particular areas of the canvas
          to have distinct displays of help information.
        </para>
        <para>
          The HelpRequestEvent:WindowRegion access should be used to determine if the help pointer was on the canvas at the time. The point returned is not relevant
          in other cases.
        </para>
      </remarks>
    </member>
    <member name="P:VO.HelpRequestEvent.WindowRegion">
      <summary></summary>
    </member>
    <member name="T:VO.HorizontalScrollBar">
      <summary>
        <para>Create a horizontal scroll bar that is independent of its owner window.</para>
      </summary>
    </member>
    <member name="M:VO.HorizontalScrollBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc cref="M:VO.ScrollBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)"/>
    </member>
    <member name="T:VO.HorizontalSelectionSlider">
      <summary>
        <para>Create a horizontal selection slider control.</para>
      </summary>
    </member>
    <member name="M:VO.HorizontalSelectionSlider.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a selection slider.</para>
      </summary>
      <inheritdoc />
    </member>
    <member name="T:VO.HorizontalSlider">
      <summary>
        <para>Create a horizontal slider control.</para>
      </summary>
    </member>
    <member name="M:VO.HorizontalSlider.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a horizontal slider.</para>
      </summary>
      <inheritdoc />
    </member>
    <member name="T:VO.HorizontalSpinner">
      <summary>
        <para>Create a spinner with horizontal arrow buttons.</para>
      </summary>
    </member>
    <member name="M:VO.HorizontalSpinner.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a horizontal spinner.</para>
      </summary>
      <inheritdoc />
    </member>
    <member name="T:VO.HotKey">
      <summary>
        <para>Create a hot key.</para>
      </summary>
    </member>
    <member name="M:VO.HotKey.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a hot key.</para>
      </summary>
      <param name="bKey">

      </param>
      <param name="lAlt">

      </param>
      <param name="lCtl">

      </param>
      <param name="lShift">

      </param>
      <param name="lExt">

      </param>
    </member>
    <member name="P:VO.HotKey.AltKey">
      <summary>
        <para>A logical value that is TRUE if the Alt key is valid for the hot key.</para>
      </summary>
    </member>
    <member name="P:VO.HotKey.CtrlKey">
      <summary>
        <para>A logical value that is TRUE if the Ctrl key is valid for the hot key.</para>
      </summary>
    </member>
    <member name="P:VO.HotKey.ExtendedKey">
      <summary>
        <para>A logical value that is TRUE if an extended key is valid for the hot key.</para>
      </summary>
    </member>
    <member name="P:VO.HotKey.Key">
      <summary>
        <para>A virtual key code for the hot key.</para>
      </summary>
    </member>
    <member name="P:VO.HotKey.ShiftKey">
      <summary>
        <para>A logical value that is TRUE if the Shift key is valid for the hot key.</para>
      </summary>
    </member>
    <member name="T:VO.HotKeyEdit">
      <summary>
        <para>Create a hot key edit.</para>
      </summary>
    </member>
    <member name="M:VO.HotKeyEdit.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a hot key edit.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="kStyle">
      </param>
    </member>
    <member name="M:VO.HotKeyEdit.ApplyHotKey(XSharp.__Usual)">
      <summary>
        <para>Apply the HotKey object associated with this control to a particular window.</para>
      </summary>
      <param name="oWindow">
      </param>
      <returns>
        <para>A numeric value indicating the result of applying the HotKey object to the window. The result can be one of the following values:</para>
        <b>Value</b>
        <b>Result</b>
        -1 The operation was unsuccessful because the HotKey object is invalid.
        0 The operation was unsuccessful because the window is invalid.
        1 The operation was successful, and no other window has the same HotKey object.
        2 The operation was successful, but another window already has the same HotKey object.
      </returns>
    </member>
    <member name="M:VO.HotKeyEdit.Create">
      <inheritdoc />
    </member>
    <member name="P:VO.HotKeyEdit.HotKey">
      <summary>
        <para>The HotKey object associated with this hot key edit.</para>
      </summary>
    </member>
    <member name="P:VO.HotKeyEdit.Rule">
      <summary>
        <para>The HotKeyRule object associated with this hot key edit.</para>
      </summary>
    </member>
    <member name="T:VO.HotKeyRule">
      <summary>
        <para>Create a hot key rule.</para>
      </summary>
    </member>
    <member name="M:VO.HotKeyRule.#ctor">
      <summary>Initializes a new instance of the HotKeyRule class.</summary>
    </member>
    <member name="P:VO.HotKeyRule.AltKeyInvalid">
      <summary>
        <para>A logical value that is TRUE if the Alt key is invalid for the HotKey object.</para>
      </summary>
    </member>
    <member name="P:VO.HotKeyRule.CtrlAltKeysInvalid">
      <summary></summary>
    </member>
    <member name="P:VO.HotKeyRule.CtrlKeyInvalid">
      <summary>
        <para>A logical value that is TRUE if the Ctrl key is invalid for the HotKey object.</para>
      </summary>
    </member>
    <member name="P:VO.HotKeyRule.ShiftAltKeysInvalid">
      <summary></summary>
    </member>
    <member name="P:VO.HotKeyRule.ShiftCtrlAltKeysInvalid">
      <summary></summary>
    </member>
    <member name="P:VO.HotKeyRule.ShiftCtrlKeysInvalid">
      <summary></summary>
    </member>
    <member name="P:VO.HotKeyRule.ShiftKeyInvalid">
      <summary>
        <para>A logical value that is TRUE if the Shift key is invalid for the HotKey object.</para>
      </summary>
    </member>
    <member name="P:VO.HotKeyRule.UnmodifiedKeysInvalid">
      <summary></summary>
    </member>
    <member name="P:VO.HotKeyRule.UseAltKeyOnInvalid">
      <summary></summary>
    </member>
    <member name="P:VO.HotKeyRule.UseCtrlKeyOnInvalid">
      <summary></summary>
    </member>
    <member name="P:VO.HotKeyRule.UseExtendedKeyOnInvalid">
      <summary></summary>
    </member>
    <member name="P:VO.HotKeyRule.UseShiftKeyOnInvalid">
      <summary></summary>
    </member>
    <member name="T:VO.HyperLink">
      <summary>
        <para>Create a HyperLink control.</para>
      </summary>
    </member>
    <member name="M:VO.HyperLink.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a HyperLink control.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="cText">
      </param>
    </member>
    <member name="M:VO.HyperLink.Dispatch(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="M:VO.HyperLink.OpenLink">
      <summary>
        <para>Is the method that is invoked whenever the mouse is clicked over the HyperLink control.</para>
      </summary>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="T:VO.Icon">
      <summary>
        <para>Create an icon, which is a small bitmap that the system displays for a window when it is iconized in its owner window.</para>
      </summary>
    </member>
    <member name="M:VO.Icon.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="xResourceID">

      </param>
      <param name="kLoadOption">

      </param>
      <param name="iWidth">

      </param>
      <param name="iHeight">

      </param>
    </member>
    <member name="M:VO.Icon.Destroy">
      <summary>
        <para>Provide a method to de-instantiate an Icon object.</para>
      </summary>
    </member>
    <member name="M:VO.Icon.Handle">
      <summary>
        <para>Return the handle for an icon.</para>
      </summary>
      <returns>
        <para>A handle describing the underlying system object.</para>
      </returns>
    </member>
    <member name="P:VO.Icon.Size">
      <summary></summary>
    </member>
    <member name="T:VO.ImageList">
      <summary>
        <para>Create an image list.</para>
      </summary>
    </member>
    <member name="M:VO.ImageList.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct an image list object.</para>
      </summary>
      <param name="nImages">
      </param>
      <param name="oDimension">
      </param>
      <param name="oImage">
      </param>
      <param name="wColor">
      </param>
      <param name="nGrow">
      </param>
    </member>
    <member name="M:VO.ImageList.Add(XSharp.__Usual)">
      <summary>
        <para>Add an icon or bitmap to the image list.</para>
      </summary>
      <param name="oImage">
      </param>
      <returns>
        <para>The image list index of the added image.</para>
      </returns>
    </member>
    <member name="M:VO.ImageList.AddMask(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Adds an image or images to an image list and generates a mask from the specified bitmap.</para>
      </summary>
      <param name="oBitmap">
      </param>
      <param name="oMaskColor">
      </param>
      <returns>
        <para>The index of the first new image, if successful; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:VO.ImageList.BeginDrag(XSharp.__Usual)">
      <summary>
        <para>Begin a drag operation on an image list.</para>
      </summary>
      <param name="nIndex">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ImageList.CreateOverlayImage(XSharp.__Usual,XSharp.__Usual)">
      <param name="nImageIndex">
      </param>
      <param name="nListIndex">
      </param>
    </member>
    <member name="M:VO.ImageList.Destroy">
      <summary></summary>
    </member>
    <member name="M:VO.ImageList.DragEnter(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Starts a drag-and-drop operation at the given position in the given window.</para>
      </summary>
      <param name="oPoint">
      </param>
      <param name="oWindow">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ImageList.DragLeave">
      <summary>
        <para>Ends a drag-and-drop operation.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ImageList.DragMove(XSharp.__Usual)">
      <summary>
        <para>Drag an image list to the specified position.</para>
      </summary>
      <param name="oPoint">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ImageList.EndDrag">
      <summary>
        <para>End a drag operation on an image list.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ImageList.Handle">
      <summary>
        <para>Return the Windows handle of the image list, which can be used in Windows.</para>
      </summary>
      <returns>
        <para>The handle (a pointer) of the image list.</para>
      </returns>
    </member>
    <member name="P:VO.ImageList.ImageCount">
      <summary>
        <para>The number of images in the ImageList object.</para>
      </summary>
    </member>
    <member name="P:VO.ImageList.ImageSize">
      <summary></summary>
    </member>
    <member name="T:VO.InfoBox">
      <summary>
        <para>Present the user with informational message box.</para>
      </summary>
    </member>
    <member name="M:VO.InfoBox.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct an information message box.</para>
      </summary>
      <param name="uParent">
      </param>
      <param name="uCaption">
      </param>
      <param name="uText">
      </param>
    </member>

    <member name="T:VO.IPAddress">
      <summary>
      </summary>
    </member>
    <member name="M:VO.IPAddress.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct an IPAddress object.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="dwStyle">
      </param>
      <param name="lDataAware">
      </param>
    </member>
    <member name="P:VO.IPAddress.Address">
      <summary>
        <para>A long value representing the current IP address. This equals the IP address interpreted as a 4-byte integer.</para>
      </summary>
    </member>
    <member name="P:VO.IPAddress.EditHandle">
      <summary></summary>
    </member>
    <member name="P:VO.IPAddress.Field1">
      <summary>
        <para>A numeric value representing the first field of the current IP Address. For the IP Address "130.119.121.147", this access would return 130.</para>
      </summary>
    </member>
    <member name="P:VO.IPAddress.Field2">
      <summary>
        <para>A numeric value representing the second field of the current IP address. For the IP address "130.119.121.147", this access would return 119.</para>
      </summary>
    </member>
    <member name="P:VO.IPAddress.Field3">
      <summary>
        <para>A numeric value representing the third field of the current IP address. For the IP address "130.119.121.147", this access would return 121.</para>
      </summary>
    </member>
    <member name="P:VO.IPAddress.Field4">
      <summary>
        <para>A numeric value representing the fourth field of the current IP address. For the IP address "130.119.121.147", this access would return 147.</para>
      </summary>
    </member>
    <member name="M:VO.IPAddress.SetRange(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set the allowable entry range per field.</para>
      </summary>
      <param name="iFieldIndex">
      </param>
      <param name="iLower">
      </param>
      <param name="iUpper">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.IPAddress.TextValue">
      <summary>
        <para>String representing the IP address.</para>
      </summary>
    </member>
    <member name="P:VO.IPAddress.Value">
      <summary></summary>
    </member>
    <member name="T:VO.IpcClient">
      <summary>
        <para>Register an application as a client able to request and receive data from a designated server application.</para>
      </summary>
    </member>
    <member name="M:VO.IpcClient.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct an IpcClient object.</para>
      </summary>
      <param name="cServerName">
      </param>
    </member>
    <member name="M:VO.IpcClient.ChangeData(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>
          Tell the remote server that some data value has changed.
        </para>
      </summary>
      <param name="cTopic">

      </param>
      <param name="cItem">

      </param>
      <param name="cStringData">

      </param>

      <remarks>
        <para>
          This results in the server receiving an IpcDataUpdateEvent. It is then the responsibility of the
          server to update itself.
        </para>
      </remarks>
    </member>
    <member name="M:VO.IpcClient.ClientError(XSharp.__Usual)">
      <summary>
        <para>Handle ClientErrorEvent, if one occurs. </para>
      </summary>
      <param name="oIpcClientErrorEvent">

      </param>

      <remarks>
        <para>Provide this event handler in your derived IpcClient class if you require special handling of errors.</para>
      </remarks>
      <returns>
        <para>TRUE if the DDE conversation is to continue; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.IpcClient.DataUpdate(XSharp.__Usual)">
      <summary>
        <para>Called whenever the requested data changes. It is invoked after the IpcServer calls its UpdateTopic() method.</para>
      </summary>
      <param name="oIpcDataUpdateEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.IpcClient.Destroy">
      <summary>
        <para>Provide a method to de-instantiate an IpcClient object.</para>
      </summary>
    </member>
    <member name="M:VO.IpcClient.Dispatch(XSharp.__Usual)">
      <param name="oEvent">

      </param>
    </member>
    <member name="M:VO.IpcClient.Execute(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Send a message to the server telling it to execute the command string remotely. </para>
      </summary>
      <param name="cTopic">

      </param>
      <param name="cItem">

      </param>
      <param name="cCommand">

      </param>

      <remarks>
        <para>Send a message to the server telling it to execute the command string remotely. As a result of this call, the server receives an IpcExecuteRequestEvent.</para>
        <para>
          <b>Note:</b> In Windows, the item is not passed to the server.
        </para>
      </remarks>
    </member>
    <member name="P:VO.IpcClient.IdInst">
      <summary></summary>
    </member>
    <member name="M:VO.IpcClient.RequestData(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Request updates on a particular topic from the server.</para>
      </summary>
      <param name="oIpcTopic">

      </param>
      <param name="continuous">

      </param>
    </member>
    <member name="T:VO.IpcClientErrorEvent">
      <summary>
        <para>Provide information about an IpcClientErrorEvent, used to indicate what type of error event occurred in an IPC server.</para>
      </summary>
    </member>
    <member name="T:VO.IpcDataRequestEvent">
      <summary>
        <para>
          Provide information about an IpcDataRequestEvent, used to store the topic name (and length) and the item name (and length) for which data has been
          requested.
        </para>
      </summary>
    </member>
    <member name="M:VO.IpcDataRequestEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct an IpcDataRequestEvent object.</para>
      </summary>
      <param name="wT">

      </param>
      <param name="wF">

      </param>
      <param name="hC">

      </param>
      <param name="h1">

      </param>
      <param name="h2">

      </param>
      <param name="hD">

      </param>
      <param name="dwD1">

      </param>
      <param name="dwD2">

      </param>
      <param name="oIpc">

      </param>
    </member>
    <member name="T:VO.IpcDataUpdateEvent">
      <summary>
        <para>Provide information about an IpcDataUpdateEvent, used to store information about the topic name, item name, and the new data.</para>
      </summary>
    </member>
    <member name="M:VO.IpcDataUpdateEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct an IpcDataUpdateEvent object.</para>
      </summary>
      <param name="wT">

      </param>
      <param name="wF">

      </param>
      <param name="hC">

      </param>
      <param name="h1">

      </param>
      <param name="h2">

      </param>
      <param name="hD">

      </param>
      <param name="dwD1">

      </param>
      <param name="dwD2">

      </param>
      <param name="oIpc">

      </param>
    </member>
    <member name="P:VO.IpcDataUpdateEvent.AsString">
      <summary>
        <para>A string containing the data that has changed.</para>
      </summary>
    </member>
    <member name="M:VO.IpcDataUpdateEvent.GetData">
      <summary></summary>
    </member>
    <member name="T:VO.IpcEvent">
      <summary>
        <para>Provide the base class from which all Ipc event classes are subclassed.</para>
      </summary>
    </member>
    <member name="M:VO.IpcEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct an IpcEvent object.</para>
      </summary>
      <param name="wT">

      </param>
      <param name="wF">

      </param>
      <param name="hC">

      </param>
      <param name="h1">

      </param>
      <param name="h2">

      </param>
      <param name="hD">

      </param>
      <param name="dwD1">

      </param>
      <param name="dwD2">

      </param>
      <param name="oIpc">

      </param>
    </member>
    <member name="F:VO.IpcEvent.dwData1">
      <summary></summary>
    </member>
    <member name="F:VO.IpcEvent.dwData2">
      <summary></summary>
    </member>
    <member name="F:VO.IpcEvent.dwFmt">
      <summary></summary>
    </member>
    <member name="F:VO.IpcEvent.dwType">
      <summary></summary>
    </member>
    <member name="F:VO.IpcEvent.hConv">
      <summary></summary>
    </member>
    <member name="F:VO.IpcEvent.hData">
      <summary></summary>
    </member>
    <member name="F:VO.IpcEvent.hsz1">
      <summary></summary>
    </member>
    <member name="F:VO.IpcEvent.hsz2">
      <summary></summary>
    </member>
    <member name="P:VO.IpcEvent.Item">
      <summary>
        <para>A string representing the item name for which the event has been requested.</para>
      </summary>
    </member>
    <member name="F:VO.IpcEvent.oIPCObject">
      <summary></summary>
    </member>
    <member name="P:VO.IpcEvent.Topic">
      <summary>
        <para>A string representing the topic name for which the event has been requested.</para>
      </summary>
    </member>
    <member name="T:VO.IpcExecuteRequestEvent">
      <summary>
        <para>Provide information about an IpcExecuteRequestEvent, used to store information about the topic, item, and command string.</para>
      </summary>
      <remarks>
        <para>
          <b>Note:</b> In Windows, the item string is always empty and should not be used.
        </para>
      </remarks>
    </member>
    <member name="M:VO.IpcExecuteRequestEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct an IpcExecuteRequestEvent object.</para>
      </summary>
      <param name="wT">

      </param>
      <param name="wF">

      </param>
      <param name="hC">

      </param>
      <param name="h1">

      </param>
      <param name="h2">

      </param>
      <param name="hD">

      </param>
      <param name="dwD1">

      </param>
      <param name="dwD2">

      </param>
      <param name="oIpc">

      </param>
    </member>
    <member name="P:VO.IpcExecuteRequestEvent.Command">
      <summary></summary>
    </member>
    <member name="T:VO.IpcServer">
      <summary>
        <para>Register an application as a server able to access data on specific topics and update registered topics and update registered client applications.</para>
      </summary>
    </member>
    <member name="M:VO.IpcServer.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct an IpcServer object.</para>
      </summary>
      <param name="cServName">
      </param>
    </member>
    <member name="M:VO.IpcServer.AddTopic(XSharp.__Usual)">
      <summary>
        <para>Add a topic to the list of topics supported by the server.</para>
      </summary>
      <param name="oIpcTopic">
      </param>
    </member>
    <member name="M:VO.IpcServer.DataRequest(XSharp.__Usual)">
      <summary>
        <para>Called whenever a client makes a request for data or when the IpcServer:UpdateTopic() is called.</para>
      </summary>
      <param name="oIpcDataRequestEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
      <returns>
        <para>
          An object containing a pointer to the data and the length of the data string (it created as a global memory object by Windows DDE management library and it
          passes a data handle back to the application).
        </para>
      </returns>
    </member>
    <member name="M:VO.IpcServer.DataUpdate(XSharp.__Usual)">
      <summary>
        <para>Called whenever a client calls IpcClient:ChangeData().</para>
      </summary>
      <param name="oIpcDataUpdateEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.IpcServer.Destroy">
      <summary>
        <para>Provide a method to de-instantiate an IpcServer object.</para>
      </summary>
    </member>
    <member name="M:VO.IpcServer.Dispatch(XSharp.__Usual)">
      <param name="oEvent">

      </param>
    </member>
    <member name="M:VO.IpcServer.ExecuteRequest(XSharp.__Usual)">
      <param name="oIpcExecuteRequestEvent">

      </param>
    </member>
    <member name="P:VO.IpcServer.idInst">
      <summary></summary>
    </member>
    <member name="M:VO.IpcServer.UpdateTopic(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Request that the server update a particular topic and item.</para>
      </summary>
      <param name="cTopic">

      </param>
      <param name="cItem">

      </param>
    </member>
    <member name="T:VO.IpcTopic">
      <summary>
        <para>
          Create topic (and items) to be supported by an IPC server and which IPC clients can request. These objects are used by IpcServer:AddTopic() and
          IpcClient:RequestData().
        </para>
      </summary>
    </member>
    <member name="M:VO.IpcTopic.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct an IpcTopic object.</para>
      </summary>
      <param name="cTopicString">
      </param>
    </member>
    <member name="M:VO.IpcTopic.AddItem(XSharp.__Usual)">
      <summary>
        <para>Add an item to the list of items associated with the topic.</para>
      </summary>
      <param name="cItemString">
      </param>
    </member>
    <member name="F:VO.IpcTopic.aItemList">
      <summary></summary>
    </member>
    <member name="F:VO.IpcTopic.cTopicName">
      <summary></summary>
    </member>
    <member name="M:VO.IpcTopic.DeleteItem(XSharp.__Usual)">
      <summary>
        <para>Delete an item from the list of items associated with the topic.</para>
      </summary>
      <param name="cItemString">
      </param>
    </member>
    <member name="M:VO.IpcTopic.Destroy">
      <summary></summary>
    </member>
    <member name="T:VO.IpcTopicData">
      <summary>
        <para>Create a global memory object and pass a data handle back to the application.</para>
      </summary>
    </member>
    <member name="M:VO.IpcTopicData.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct an IpcTopicData object.</para>
      </summary>
      <param name="ptrString">
      </param>
      <param name="nLength">
      </param>
    </member>
    <member name="P:VO.IpcTopicData.Data">
      <summary></summary>
    </member>
    <member name="M:VO.IpcTopicData.Destroy">
      <summary></summary>
    </member>
    <member name="P:VO.IpcTopicData.Length">
      <summary></summary>
    </member>
    <member name="F:VO.IpcTopicData.liLen">
      <summary></summary>
    </member>
    <member name="F:VO.IpcTopicData.ptrData">
      <summary></summary>
    </member>
    <member name="T:VO.KeyEvent">
      <summary>
        <para>Provide information about a KeyEvent, used to encapsulate information about the key that was pressed.</para>
      </summary>
    </member>
    <member name="M:VO.KeyEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.KeyEvent.ASCIIChar">
      <summary>
        <para>
          A numeric value representing the normal ASCII code for the key that caused this KeyEvent.
        </para>
      </summary>
      <remarks>
        <para>
          A numeric value representing the normal ASCII code for the key that caused this KeyEvent. (This includes all printable characters, as well as the Control
          key combinations from Ctrl+A to Ctrl+Z).
        </para>
        <para>
          This value is NIL if a non-printable and non-Control key was pressed — you should then call KeyEvent:KeyCode() to examine the key. (Keys that
          generate NIL include function keys, editing keys, and the Direction keys.)
        </para>
      </remarks>
    </member>
    <member name="P:VO.KeyEvent.KeyCode">
      <summary>
        <para>A constant, indicating the code for the key that was pressed</para>
      </summary>
      <remarks>
        <para>One of the following constants, indicating the code for the key that was pressed:</para>
        <b>Constant</b>
        <b>Key</b>
        KEYALT Alt key
        KEYARROWDOWN Down arrow key
        KEYARROWLEFT Left arrow key
        KEYARROWRIGHT Right arrow key
        KEYARROWUP Up arrow key
        KEYBACKSPACE Backspace key
        KEYCANCEL Cancel key
        KEYCAPSLOCK Capitals Lock key
        KEYCONTROL Control key
        KEYDELETE Delete key
        KEYEND End key
        KEYENTER Enter key
        KEYESCAPE Escape key
        KEYF1...KEYF16 Function keys 1-16
        KEYHOME Home key
        KEYINSERT Insert key
        KEYNUMLOCK Numeric Lock key
        KEYPAGEDOWN PgDn key
        KEYPAGEUP PgUp key
        KEYPAUSE Pause key
        KEYPRINT Print key
        KEYRETURN Return key
        KEYSHIFT Shift key
        KEYSPACE Spacebar
        KEYTAB Tab key
        <para>
          <b>Note:</b> KeyEvent:KeyCode provides access to the underlying keyboard hardware. Use this property if the KeyEvent:ASCIIChar access method returns
          NIL.
        </para>
      </remarks>
    </member>
    <member name="P:VO.KeyEvent.RepeatCount">
      <summary>
        <para>A numeric value determining whether a user depressed a key repeatedly or held it down for an extended period of time.</para>
      </summary>
      <remarks>
        <para>If a key is repeatedly depressed, the number of times the key is depressed is returned; otherwise, a value of 1 is returned.</para>
        <para>When the user holds down a key for a duration, multiple KeyEvents can be translated into a single KeyEvent with a RepeatCount greater than 1.</para>
      </remarks>
    </member>
    <member name="P:VO.KeyEvent.System">
      <summary>
        <para>A logical value determining whether the Alt key was pressed at the same time as another key (TRUE if yes, FALSE if no).</para>
      </summary>
    </member>
    <member name="T:VO.LineObject">
      <summary>
        <para>
          Create a LineObject object; this type of entity is part of the DrawObject hierarchy, which provides a means of displaying and manipulating various
          objects.
        </para>
      </summary>
    </member>

    <member name="M:VO.LineObject.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a LineObject object.</para>
      </summary>
      <param name="oPoint1">

      </param>
      <param name="oPoint2">

      </param>
      <param name="oPen">

      </param>
    </member>
    <member name="P:VO.LineObject.BoundingBox">
      <summary>
        <para>A bounding box representing the smallest rectangle that completely encloses this LineObject object.</para>
      </summary>
    </member>
    <member name="M:VO.LineObject.Destroy">
      <summary></summary>
    </member>
    <member name="M:VO.LineObject.Draw">
      <summary>
        <para>Draw the LineObject object on a window.</para>
      </summary>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="P:VO.LineObject.Origin">
      <summary>
        <para>A point, in canvas coordinates, representing the starting coordinate of the LineObject object on its owner window.</para>
      </summary>
    </member>
    <member name="P:VO.LineObject.Pen">
      <summary>
        <para>A pen associated with this LineObject object.</para>
      </summary>
      <remarks>
        <para>
          The most common reason to change the pen is to redraw an existing line temporarily in a different color to highlight the fact that the user has selected
          that line.
        </para>
        <para>
          In Windows, the pen specified by &lt;<i>oPen</i>&gt; should not be deleted while it is selected.
        </para>
      </remarks>
    </member>
    <member name="P:VO.LineObject.Size">
      <summary>
        <para>A dimension representing the size of this LineObject object.</para>
      </summary>
    </member>
    <member name="T:VO.ListBox">
      <summary>
        <para>Create a list box.</para>
      </summary>
    </member>
    <member name="M:VO.ListBox.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a list box.</para>
      </summary>
      <param name="oOwner">

      </param>
      <param name="xID">

      </param>
      <param name="oPoint">

      </param>
      <param name="oDimension">

      </param>
      <param name="kStyle">

      </param>
    </member>
    <member name="M:VO.ListBox.AddItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Add a new item to a list box at a specified position.</para>
      </summary>
      <param name="cItem">

      </param>
      <param name="nItemNumber">

      </param>
      <param name="uRetValue">

      </param>
      <returns>
        <para>
          If the item was added, its position in the list box is returned (a value of 1 refers to the first position in the list box). If the item could not be added,
          0 is returned.
        </para>
      </returns>
    </member>
    <member name="P:VO.ListBox.Caption">
      <summary>
        <para>The string representing the caption of the list box.</para>
      </summary>
    </member>
    <member name="M:VO.ListBox.ChangeSelected(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Change a range of items in a multiple selection list box to a specified selection.</para>
      </summary>
      <param name="oRange">
      </param>
      <param name="lEnabled">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListBox.Clear">
      <summary></summary>
    </member>
    <member name="M:VO.ListBox.ClearSelection">
      <summary>
        <para>Clear a multiple selection list box of all selections.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListBox.Create">
      <inheritdoc />
    </member>
    <member name="P:VO.ListBox.CurrentItem">
      <summary>
        <para>
          A string representing the displayed list box or combo box item selected.
        </para>
      </summary>
      <remarks>
        <para>
          The ListBox:CurrentItem access also changes ListBox:CurrentItemNo,
          ListBox:CurrentText, ListBox:TextValue, and ListBox:Value, if there is a match with the available display items.
        </para>
      </remarks>
    </member>
    <member name="P:VO.ListBox.CurrentItemNo">
      <summary>
        <para>
          A numeric value, between 1 and the ListBox:ItemCount, indicating which item is currently selected.
        </para>
      </summary>
      <remarks>
        <para>
          If no item is selected, it is 0.The ListBox:CurrentItemNo
          assign also changes ListBox:CurrentItem, ListBox:TextValue, and ListBox:Value.
        </para>
        <para>
          If the assigned ListBox:CurrentItemNo is zero (0), or if it exceeds the ListBox:ItemCount, then no item will be selected. If the ListBox:CurrentItemNo
          assign represents a change, then ListBox:ValueChanged will be set to TRUE.
        </para>
      </remarks>
    </member>
    <member name="P:VO.ListBox.CurrentText">
      <summary>
        <para>ListBox:CurrentText is set to the NULL_STRING, since there is no text editing for list boxes.</para>
      </summary>
    </member>
    <member name="M:VO.ListBox.DeleteItem(XSharp.__Usual)">
      <summary>
        <para>Remove an item from a list box.</para>
      </summary>
      <param name="uItemNumber">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>&lt;span style="color: #000000;"&gt; &lt;/span&gt;
      </returns>
    </member>
    <member name="M:VO.ListBox.DeselectItem(XSharp.__Usual)">
      <summary>
        <para>Turn off the selection of a specified item in a list box.</para>
      </summary>
      <param name="nItemId">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListBox.EnableItemDrag">
      <summary>
        <para>Turn the list box into a drag list box.</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListBox.FillUsing(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>
          Specify the set of values to be displayed in the list box, using an array or a data server.
        </para>
      </summary>
      <param name="aContents">

      </param>
      <param name="symField1">

      </param>
      <param name="symField2">

      </param>

      <remarks>
        <para>
          These values act as a constraint on the values that may be
          entered in the list box, and optionally as a translation between program values and display values.
        </para>
      </remarks>
    </member>
    <member name="M:VO.ListBox.FirstSelected">
      <summary>
        <para>Returns the position of the first item selected in a multiple selection list box, or 0 if no item is selected.</para>
      </summary>
    </member>
    <member name="M:VO.ListBox.GetItemValue(XSharp.__Usual)">
      <summary>
        <para>Retrieve the value of a specified list box item.</para>
      </summary>
      <param name="nItemNumber">

      </param>
      <returns>
        <para>The value associated with the specified item.</para>
      </returns>
    </member>
    <member name="M:VO.ListBox.IsSelected(XSharp.__Usual)">
      <summary>
        <para>Determine if the list box item at the specified index position is selected.</para>
      </summary>
      <param name="iIdx">
      </param>
      <returns>
        <para>TRUE if selected; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.ListBox.ItemCount">
      <summary></summary>
    </member>
    <member name="M:VO.ListBox.ListFiles(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="sStartDir">
      </param>
      <param name="oFixedText">
      </param>
      <param name="FileTypes">
      </param>
    </member>
    <member name="P:VO.ListBox.MultiSelection">
      <summary>
        <para>Used to identify if the ListBox supports multiple selections.</para>
      </summary>
    </member>
    <member name="M:VO.ListBox.NextSelected">
      <summary>
        <para>After calling ListBox:FirstSelected(), this method is used to cycle through the remaining items selected in a multiple selection list box.</para>
      </summary>
      <returns>
        <para>Position of the next selected item in the list box, or 0 if no item is selected or if there are no remaining items.</para>
      </returns>
    </member>
    <member name="P:VO.ListBox.SelectedCount">
      <summary>
        <para>A numeric value representing the total number of items that are currently selected in a multiple selection list box.</para>
      </summary>
      <remarks>
        <para>
          <b>Note:</b> This property is intended for use with a <b>multiple</b><b>selection</b> list box (i.e., a list box created using the LBOXMULTIPLESEL
          style).
        </para>
      </remarks>
    </member>
    <member name="P:VO.ListBox.SelectedFile">
      <summary>
        <para>The string representing the selected file in a list box previously filled by the ListFiles() method.</para>
      </summary>
    </member>
    <member name="M:VO.ListBox.SelectItem(XSharp.__Usual)">
      <summary>
        <para>Turn on the selection of an item in a list box.</para>
      </summary>
      <param name="nItemId">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListBox.SetTabs(XSharp.__Usual)">
      <param name="aTabs">
      </param>
    </member>
    <member name="P:VO.ListBox.TextValue">
      <summary>
        <para>
          A string representing the display value (first array's element) for the currently selected item.
        </para>
      </summary>
      <remarks>
        <para>
          The string is formatted according to the picture clause of the field
          specification attached to the list box (or combo box). For example the ListBox:TextValue can be "Jones", "01/15/95", or "8". The ListBox:TextValue assign also
          changes ListBox:CurrentItem, ListBox:CurrentItemNo, ListBox:Modified, ListBox:Value, and ListBox:ValueChanged.
        </para>
        <para>
          If the assign does not match one of the display items, then ListBox:TextValue and ListBox:Value are set to the text that could not be matched, and
          ListBox:CurrentItemNo is set to 0. If the control is bound to a field in a server and the field data value does not match one of the array's second elements,
          ListBox:TextValue and ListBox:Value contain the field's data value.
        </para>
      </remarks>
    </member>
    <member name="T:VO.ListView">
      <summary>
        <para>Create a list view control.</para>

      </summary>
      <remarks>
        <para>
          <b>
            <i>Important - Microsoft Note</i>
            <br />
          </b>
          <i>- Under visual styles GridLines are not always displayed correctly.</i>
        </para>
      </remarks>
    </member>
    <member name="M:VO.ListView.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a list view.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="kStyle">
      </param>
    </member>
    <member name="M:VO.ListView.AddColumn(XSharp.__Usual)">
      <summary>
        <para>Add a new ListViewColumn object to the end of the list view's list of columns.</para>
      </summary>
      <param name="oListViewColumn">
      </param>
      <returns>
        <para>TRUE if the column was added successfully; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.AddGroup(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set an image as the background to the list view.</para>
      </summary>
      <param name="iGroupId">
      </param>
      <param name="cGroupName">
      </param>
      <param name="dwAlign">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.AddItem(XSharp.__Usual)">
      <summary>
        <para>Add a new ListViewItem object as the last item in the list view.</para>
      </summary>
      <param name="oListViewItem">
      </param>
      <returns>
        <para>TRUE if the item was added successfully; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.Arrange(XSharp.__Usual)">
      <summary>
        <para>Align list view items while in icon view.</para>
      </summary>
      <param name="kAlignment">
      </param>
      <returns>
        <para>TRUE if the item was arranged successfully; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.ListView.BackgroundColor">
      <summary>
        <para>A Color object used to paint the background in the list view.</para>
      </summary>
    </member>
    <member name="P:VO.ListView.CheckBoxes">
      <summary>
        <para>A logical value determining whether check boxes are used in the list view.</para>
      </summary>
    </member>
    <member name="P:VO.ListView.ColumnCount">
      <summary>
        <para>A numeric value representing the number of columns in the list view.</para>
      </summary>
    </member>
    <member name="P:VO.ListView.ColumnOrderArray">
      <summary>
        <para>An array of ListViewColumn object symbolic names representing the order of the columns in the list view.</para>
      </summary>
    </member>
    <member name="P:VO.ListView.CurrentView">
      <summary>
        <para>A symbolic name representing the current view of the list view. </para>
      </summary>
      <remarks>
        <para>The following are valid views:</para>
        <list type="bullet">
          <item>#IconView</item>
          <item>#SmallIconView</item>
          <item>#ListView</item>
          <item>#ReportView</item>
        </list>
      </remarks>
    </member>
    <member name="M:VO.ListView.DeleteAll">
      <summary>
        <para>Delete all items of the list view.</para>
      </summary>
      <returns>
        <para>TRUE if all items were deleted successfully; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.DeleteAllColumns">
      <summary></summary>
    </member>
    <member name="M:VO.ListView.DeleteColumn(XSharp.__Usual)">
      <summary>
        <para>Delete a ListViewColumn object from the list view.</para>
      </summary>
      <param name="oListViewColumn">
      </param>
      <returns>
        <para>TRUE if the column was deleted successfully; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.DeleteItem(XSharp.__Usual)">
      <summary>
        <para>Delete a ListViewItem object from the list view.</para>
      </summary>
      <param name="nItem">
      </param>
      <returns>
        <para>TRUE if the item was deleted successfully; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.Destroy">
      <summary></summary>
    </member>
    <member name="P:VO.ListView.DragDropEnabled">
      <summary>
        <para>
          A logical value that is TRUE if drag and drop is enabled for the list view. If drag and drop is enabled, items can be dragged within, as well as outside,
          the control.
        </para>
      </summary>
    </member>
    <member name="P:VO.ListView.DragImageList">
      <summary>
        <para>An image list containing a single image displayed during a drag and drop operation for the list view.</para>
      </summary>
    </member>
    <member name="M:VO.ListView.EditItemLabel(XSharp.__Usual)">
      <summary>
        <para>Begins in-place label editing of an item in the list view.</para>
      </summary>
      <param name="nItem">
      </param>
    </member>
    <member name="M:VO.ListView.EnableDragDrop(XSharp.__Usual)">
      <summary>
        <para>Enable or disable drag and drop of items for the list view.</para>
      </summary>
      <param name="lEnable">
      </param>
      <returns>
        <para>TRUE if drag and drop could be enabled or disabled; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.EnableGroupView(XSharp.__Usual)">
      <param name="lSetting">
      </param>
    </member>
    <member name="M:VO.ListView.EnableSort(XSharp.__Usual)">
      <summary>
        <para>Register a user-defined method to use for sorting items in the list view.</para>
      </summary>
      <param name="symMethodName">
      </param>
      <returns>
        <para>The symbolic name of the user-defined method to perform the sort.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.EnsureVisible(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Ensure that an item is visible in the list view, scrolling if necessary.</para>
      </summary>
      <param name="nItem">
      </param>
      <param name="lPartiallyVisible">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.ListView.FullRowSelect">
      <summary>
        <para>A logical value determining whether the entire row is highlighted when a list view item is selected.</para>
      </summary>
    </member>
    <member name="M:VO.ListView.GetAllItems">
      <summary>
        <para>Get an array with all the Listview Items</para>
      </summary>
      <returns>
        <para>An array with all Listview Items</para>
      </returns>
    </member>
    <member name="M:VO.ListView.GetAllSelectedItems">
      <summary>
        <para>
          Get an array with all the <b>selected</b> Listview Items
        </para>
      </summary>
      <returns>
        <para>
          An array with all <b>selected</b> Listview Items
        </para>
      </returns>
    </member>
    <member name="M:VO.ListView.GetColumn(XSharp.__Usual)">
      <summary>
        <para>Return a particular ListViewColumn object.</para>
      </summary>
      <param name="xColumnID">
      </param>
      <returns>
        <para>The ListViewColumn object.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.GetExLVStyle(XSharp.__Usual)">
      <param name="kExStyle">
      </param>
    </member>
    <member name="M:VO.ListView.GetGroupTextColor">
      <summary></summary>
    </member>
    <member name="M:VO.ListView.GetItemAtPosition(XSharp.__Usual)">
      <param name="oPoint">
      </param>
    </member>
    <member name="M:VO.ListView.GetItemAttributes(XSharp.__Usual)">
      <param name="nItem">
      </param>
    </member>
    <member name="M:VO.ListView.GetItemBoundingBox(XSharp.__Usual)">
      <param name="nItem">
      </param>
    </member>
    <member name="M:VO.ListView.GetItemPosition(XSharp.__Usual)">
      <param name="nItem">
      </param>
    </member>
    <member name="M:VO.ListView.GetItemSpacing(XSharp.__Usual)">
      <summary>
        <para>Return the spacing between list view items in icon view or small icon view.</para>
      </summary>
      <param name="symView">
      </param>
      <returns>
        <para>The amount of spacing between items.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.GetNextItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Retrieve the next list view item that possesses all of the specified properties.</para>
      </summary>
      <param name="kRelationship">
      </param>
      <param name="lDisabled">
      </param>
      <param name="lDropTarget">
      </param>
      <param name="lFocused">
      </param>
      <param name="lSelected">
      </param>
      <param name="nItemStart">
      </param>
      <returns>
        <para>The list view item returned as a result of the search.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.GetSelectedColumn">
      <summary></summary>
    </member>
    <member name="M:VO.ListView.GetSelectedItem">
      <summary></summary>
    </member>
    <member name="P:VO.ListView.GridLines">
      <summary>
        <para>A logical value determining whether gridlines are shown in the list view.</para>
      </summary>
      <remarks>
        <para>
          <b>
            <i>Important - Microsoft Note</i>
            <br />
          </b>
          <i>- Under visual styles GridLines are not always displayed correctly.</i>
        </para>
      </remarks>
    </member>
    <member name="M:VO.ListView.HasGroup(XSharp.__Usual)">
      <summary>
        <para>A logical value to determine if the group with the specified ID exists in a ListView control.</para>
      </summary>
      <param name="iGroupId">
      </param>
      <returns>
        <para>TRUE if it exists; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.ListView.HeaderDragDrop">
      <summary>
        <para>A logical value determining whether columns can be rearranged in the list view by dragging and dropping the column headers.</para>
      </summary>
    </member>
    <member name="M:VO.ListView.InsertColumn(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Insert a new ListViewColumn object after a particular column index in the list view.</para>
      </summary>
      <param name="oListViewColumn">
      </param>
      <param name="nInsertAfter">
      </param>
      <returns>
        <para>TRUE if the column was inserted successfully; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.InsertItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Insert a new ListViewItem object after a particular item index in the list view.</para>
      </summary>
      <param name="oListViewItem">
      </param>
      <param name="nInsertAfter">
      </param>
      <returns>
        <para>TRUE if the item was inserted successfully; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.ListView.IsGroupViewEnabled">
      <summary>
        <para>A logical value to identify if ListView groups are enabled.</para>
      </summary>
    </member>
    <member name="P:VO.ListView.ItemCount">
      <summary>
        <para>A numeric value representing the number of items in the list view.</para>
      </summary>
    </member>
    <member name="P:VO.ListView.ItemsPerPage">
      <summary>
        <para>A numeric value representing the number of items that can fit vertically in the visible area of the list view.</para>
      </summary>
    </member>
    <member name="P:VO.ListView.LargeImageList">
      <summary>
        <para>An image list containing large images to display for each item when the list view is displayed in icon view.</para>
      </summary>
    </member>
    <member name="M:VO.ListView.RedrawRange(XSharp.__Usual)">
      <summary>
        <para>Redraw a range of list view items.</para>
      </summary>
      <param name="oRange">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.RemoveAllGroups">
      <summary></summary>
    </member>
    <member name="M:VO.ListView.RemoveGroup(XSharp.__Usual)">
      <summary>
        <para>Remove the group with the specified ID from a ListView control.</para>
      </summary>
      <param name="iGroupId">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.Scroll(XSharp.__Usual)">
      <summary>
        <para>Scroll the contents of a list view.</para>
      </summary>
      <param name="oDimension">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.ListView.SearchString">
      <summary>
        <para>
          The incremental search string associated with the list view.
        </para>
      </summary>
      <remarks>
        <para>
          The incremental search string is the character sequence that the user types while the list view
          has the input focus. When the user types a character, the character is appended to the search string and a matching item is sought. If the system finds a
          match, it selects the item. A timeout period is associated with the search string; if the timeout period elapses before the user types another character, the
          string is reset.
        </para>
      </remarks>
    </member>
    <member name="M:VO.ListView.Seek(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Search the list view for a particular list view item.</para>
      </summary>
      <param name="uValue">
      </param>
      <param name="kSeekType">
      </param>
      <param name="nStart">
      </param>
      <param name="lWrap">
      </param>
      <param name="lPartial">
      </param>
      <returns>
        <para>The list view item returned as a result of the seek.</para>
      </returns>
    </member>
    <member name="P:VO.ListView.SelectedCount">
      <summary>
        <para>A numeric value representing the number of items that are selected in the list view.</para>
      </summary>
    </member>
    <member name="M:VO.ListView.SelectItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Select or deselect a specific item in a list view.</para>
      </summary>
      <param name="nItem">
      </param>
      <param name="lSelect">
      </param>
      <returns>
        <para>TRUE if the list view item was selected; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.SelectNextItem">
      <summary>
        <para>Select the next list view item after the currently selected item.</para>
      </summary>
      <returns>
        <para>TRUE if the selection was successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.SetBackgroundImage(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="uImage">
      </param>
      <param name="dwFlags">
      </param>
      <param name="xOffSet">
      </param>
      <param name="yOffSet">
      </param>
    </member>
    <member name="M:VO.ListView.SetColumnFormat(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="nCol">
      </param>
      <param name="dwFlag">
      </param>
      <param name="nImage">
      </param>
    </member>
    <member name="M:VO.ListView.SetExLVStyle(XSharp.__Usual,XSharp.__Usual)">
      <param name="kExStyle">
      </param>
      <param name="lEnable">
      </param>
    </member>
    <member name="M:VO.ListView.SetGroupName(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set the name of a list view group.</para>
      </summary>
      <param name="iGroupId">
      </param>
      <param name="cGroupName">
      </param>
      <param name="dwAlign">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.SetGroupTextColor(XSharp.__Usual)">
      <param name="oColor">
      </param>
    </member>
    <member name="M:VO.ListView.SetItemAttributes(XSharp.__Usual)">
      <param name="oListViewItem">
      </param>
    </member>
    <member name="M:VO.ListView.SetItemGroupId(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>A logical value to determine if the group with the specified ID exists in a ListView control.</para>
      </summary>
      <param name="uLVI">
      </param>
      <param name="nId">
      </param>
    </member>
    <member name="M:VO.ListView.SetItemPosition(XSharp.__Usual,XSharp.__Usual)">
      <param name="nItem">
      </param>
      <param name="oPoint">
      </param>
    </member>
    <member name="M:VO.ListView.SetSelectedColumn(XSharp.__Usual)">
      <param name="nIndex">
      </param>
    </member>
    <member name="P:VO.ListView.SmallImageList">
      <summary>
        <para>
          An image list containing small images to display for each item when the list view is displayed in list view, report view, or small icon view. The icons in
          this list must be defined elsewhere in
        </para>
      </summary>
    </member>
    <member name="M:VO.ListView.SortItems">
      <summary>
        <para>Sort the list view items using the user-defined sort method specified by EnableSort().</para>
      </summary>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.ListView.StateImageList">
      <summary>
        <para>An image list containing state images to display for each item in the list view.</para>
      </summary>
    </member>
    <member name="P:VO.ListView.TextBackgroundColor">
      <summary>
        <para>A Color object used to paint the text background in the list view.</para>
      </summary>
    </member>
    <member name="P:VO.ListView.TextColor">
      <summary>
        <para>A Color object used to paint the text in the list view.</para>
      </summary>
    </member>
    <member name="P:VO.ListView.TopItem">
      <summary>
        <para>A numeric value representing the index of the topmost visible item when the list view is in list view or report view.</para>
      </summary>
    </member>
    <member name="P:VO.ListView.TrackSelection">
      <summary></summary>
    </member>
    <member name="M:VO.ListView.Update(XSharp.__Usual)">
      <summary>
        <para>Update a list view item.</para>
      </summary>
      <param name="nItem">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ListView.ViewAs(XSharp.__Usual)">
      <summary>
        <para>Change the current view of the list view.</para>
      </summary>
      <param name="symView">
      </param>
    </member>
    <member name="P:VO.ListView.ViewBoundingBox">
      <summary>
        <para>The bounding box that encloses all of a list view's items when in icon view or small icon view.</para>
      </summary>
    </member>
    <member name="P:VO.ListView.ViewOrigin">
      <summary>
        <para>The Point object representing the current view origin of a list view when in icon view or small icon view.</para>
      </summary>
    </member>
    <member name="T:VO.ListViewColumn">
      <summary>
        <para>Create a list view column.</para>
      </summary>
    </member>
    <member name="M:VO.ListViewColumn.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a list view column.</para>
      </summary>
      <param name="nWidth">
      </param>
      <param name="xColumnID">
      </param>
      <param name="kAlignment">
      </param>
    </member>
    <member name="P:VO.ListViewColumn.Alignment">
      <summary>
        <para>A constant representing the alignment of the list view column.</para>
      </summary>
      <remarks>
        <para>One of the following values can be used:</para>
        <para>LVCFMT_LEFT</para>
        <para>LVCFMT_CENTER</para>
        <para>LVCFMT_RIGHT</para>
      </remarks>
    </member>
    <member name="P:VO.ListViewColumn.Caption">
      <summary>
        <para>The caption displayed in the list view column header.</para>
      </summary>
    </member>
    <member name="M:VO.ListViewColumn.Destroy">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewColumn.FieldSpec">
      <summary>
        <para>The FieldSpec object for the list view column.</para>
      </summary>
    </member>
    <member name="P:VO.ListViewColumn.HyperLabel">
      <summary>
        <para>The HyperLabel object for the list view column.</para>
      </summary>
    </member>
    <member name="P:VO.ListViewColumn.NameSym">
      <summary>
        <para>The symbolic name of the list view column.</para>
      </summary>
    </member>
    <member name="P:VO.ListViewColumn.Owner">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewColumn.Width">
      <summary>
        <para>A numeric value that represents the character width of the list view column.</para>
      </summary>
      <remarks>
        <para>For autosizing, one of the following values can be used:</para>
        <list type="table">
          <item>
            <term>LVCSW_AUTOSIZE</term>
            <description>The list view column is automatically sized to the entry with the maximum width (-1).</description>
          </item>
          <item>
            <term>LVCSW_AUTOSIZE_HEADER</term>
            <description>The list view column is automatically sized to the width of its header (-2)..</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:VO.ListViewColumnClickEvent">
      <summary>
        <para>Provide information about a list view column click event, which is generated when the header of a column in a list view control is clicked.</para>
      </summary>
    </member>
    <member name="M:VO.ListViewColumnClickEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.ListViewColumnClickEvent.ListViewColumn">
      <summary></summary>
    </member>
    <member name="T:VO.ListViewDeleteEvent">
      <summary>
        <para>Provide information about a list view delete event, which is generated when an item in a list view control is deleted.</para>
      </summary>
    </member>
    <member name="M:VO.ListViewDeleteEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="T:VO.ListViewDragEvent">
      <summary>
        <para>Provide information about a list view drag event, which is generated when an item in a list view control is dragged.</para>
      </summary>
    </member>
    <member name="M:VO.ListViewDragEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.ListViewDragEvent.IsLeftButton">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewDragEvent.IsRightButton">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewDragEvent.Position">
      <summary>
        <para>A Point object that describes the initial position of the drag in list view control coordinates.</para>
      </summary>
    </member>
    <member name="T:VO.ListViewEditEvent">
      <summary>
        <para>Provide information about a list view edit event, which is generated when the label of an item in a list view control is edited.</para>
      </summary>
    </member>
    <member name="M:VO.ListViewEditEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.ListViewEditEvent.EditBeginning">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewEditEvent.EditEnding">
      <summary>
        <para>A logical value that is TRUE if the edit is ending.</para>
      </summary>
    </member>
    <member name="P:VO.ListViewEditEvent.EditText">
      <summary>
        <para>String value containing the new label text of a list view item after that item's label has been edited.</para>
      </summary>
    </member>
    <member name="P:VO.ListViewEditEvent.ListViewItem">
      <summary></summary>
    </member>
    <member name="T:VO.ListViewItem">
      <summary>
        <para>Create a list view item.</para>
      </summary>
    </member>
    <member name="M:VO.ListViewItem.#ctor">
      <summary>
        <para>Construct a list view item.</para>
      </summary>
    </member>
    <member name="P:VO.ListViewItem.Checked">
      <summary></summary>
    </member>
    <member name="M:VO.ListViewItem.Destroy">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewItem.Disabled">
      <summary>
        <para>A logical value that is TRUE if the image of a list view item is displayed in a disabled fashion.</para>
      </summary>
    </member>
    <member name="P:VO.ListViewItem.DropTarget">
      <summary>
        <para>A logical value that is TRUE if the list view item is highlighted as the target of a drag and drop operation.</para>
      </summary>
    </member>
    <member name="P:VO.ListViewItem.Focused">
      <summary>
        <para>A logical value that is TRUE if the list view item is focused.</para>
      </summary>
    </member>
    <member name="M:VO.ListViewItem.GetText(XSharp.__Usual,XSharp.__Usual)">
      <param name="symColumnName">
      </param>
      <param name="nRefImageIndex">

      </param>
      <summary>
        <para>Retrieve the text label of a column.</para>
      </summary>
      <returns>
        <para>The text label of the specified column.</para>
      </returns>
    </member>
    <member name="M:VO.ListViewItem.GetValue(XSharp.__Usual)">
      <summary>
        <para>Retrieve the value of a column.</para>
      </summary>
      <param name="symColumnName">

      </param>
      <returns>
        <para>The value of the specified column.</para>
      </returns>
    </member>

    <member name="P:VO.ListViewItem.ImageIndex">
      <summary>
        <para>A numeric value that represents the index of the list view item's image in the image list.</para>
      </summary>
    </member>
    <member name="P:VO.ListViewItem.Indent">
      <summary>
        <para>Sets the indentation of a ListView item.</para>
      </summary>
    </member>
    <member name="P:VO.ListViewItem.ItemIndex">
      <summary>
        <para>A numeric value that represents the index of the list view item in the list view control.</para>
      </summary>
    </member>
    <member name="P:VO.ListViewItem.OverlayImageIndex">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewItem.Selected">
      <summary>
        <para>A logical value that is TRUE if the list view item is selected.</para>
      </summary>
    </member>
    <member name="M:VO.ListViewItem.SetText(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="cNewText">
      </param>
      <param name="symColumnName">
      </param>
      <param name="nImageIndex">
      </param>
    </member>
    <member name="M:VO.ListViewItem.SetValue(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set the value of a column.</para>
      </summary>
      <param name="uNewValue">
      </param>
      <param name="symColumnName">
      </param>
    </member>
    <member name="P:VO.ListViewItem.StateImageIndex">
      <summary>
        <para>
          A numeric value that represents the index of the list view item's state image in the state image list.
        </para>
      </summary>
      <remarks>
        <para>
          State images are images that are drawn next to the
          item's main image.
        </para>
      </remarks>
    </member>
    <member name="T:VO.ListViewItemEvent">
      <summary>
        <para>Provide information about events generated when operations with list view items are taking place.</para>
      </summary>
    </member>
    <member name="M:VO.ListViewItemEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.ListViewItemEvent.ListViewItem">
      <summary></summary>
    </member>

    <member name="T:VO.ListViewKeyEvent">
      <summary>
        <para>Provide information about a list view key event, which is generated when a key is pressed while the list view control has the input focus.</para>
      </summary>
    </member>
    <member name="M:VO.ListViewKeyEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>

    <member name="P:VO.ListViewKeyEvent.KeyCode">
      <summary>
        <para>The virtual key code of the key that was pressed.</para>
      </summary>
    </member>
    <member name="T:VO.ListViewMouseEvent">
      <summary>
        <para>Provide information about a list view mouse event, which is generated when a mouse button in a list view control is clicked or double-clicked.</para>
      </summary>
    </member>
    <member name="M:VO.ListViewMouseEvent.#ctor(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.ListViewMouseEvent.ButtonID">
      <summary>
        <para>A constant representing which mouse button was clicked. The value can be either BUTTONLEFT or BUTTONRIGHT.</para>
      </summary>
    </member>
    <member name="P:VO.ListViewMouseEvent.IsLeftButton">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewMouseEvent.IsRightButton">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewMouseEvent.ListViewItem">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointAboveClientArea">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointBelowClientArea">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointLeftOfClientArea">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointNowhere">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointOnItem">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointOnItemImage">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointOnItemLabel">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointOnItemStateImage">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewMouseEvent.PointRightOfClientArea">
      <summary></summary>
    </member>
    <member name="P:VO.ListViewMouseEvent.Position">
      <summary>
        <para>A Point object that describes the position where the click occurred in list view control coordinates.</para>
      </summary>
    </member>
    <member name="T:VO.Menu">
      <summary>
        <para>
          Create a menu. Menus consist of <b>items</b> which the user selects for execution; a menu item can be a string, a bitmap, or another menu.
        </para>
      </summary>
    </member>
    <member name="M:VO.Menu.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct a menu.</para>
      </summary>
      <param name="xResourceID">
      </param>
    </member>
    <member name="P:VO.Menu.Accelerator">
      <summary>
        <para>
          The accelerator table to be used with this menu.
        </para>
      </summary>
      <remarks>
        <para>
          The Menu Editor generates code that creates an accelerator and assigns it to the menu; when the menu is
          assigned to a window, the corresponding accelerator is assigned also.
        </para>
      </remarks>
    </member>
    <member name="M:VO.Menu.AddChild(XSharp.__Usual)">
      <param name="oMenu">

      </param>
    </member>
    <member name="M:VO.Menu.AppendItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Add a string to the end of this menu.</para>
      </summary>
      <param name="nItemID">
      </param>
      <param name="xNewItem">
      </param>
    </member>
    <member name="M:VO.Menu.CheckItem(XSharp.__Usual)">
      <summary>
        <para>Place a check mark to the left of a specified menu item.</para>
      </summary>
      <param name="nItemID">
      </param>
      <returns>
        <para>MF_CHECKED if checked, MF_UNCHECKED if unchecked</para>
      </returns>
    </member>
    <member name="M:VO.Menu.DeleteChild(XSharp.__Usual)">
      <param name="oMenu">
      </param>
    </member>
    <member name="M:VO.Menu.DeleteItem(XSharp.__Usual)">
      <summary>
        <para>Delete an item from this menu, removing it from memory. (To delete a bitmap or string, specify an ID; to delete a submenu, specify the Menu object.)</para>
      </summary>
      <param name="xItemIdOrMenu">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.Menu.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a Menu object.</para>
      </summary>
    </member>
    <member name="M:VO.Menu.DisableAutoUpdate">
      <summary></summary>
    </member>
    <member name="M:VO.Menu.DisableItem(XSharp.__Usual)">
      <summary>
        <para>Disable a specified menu item (until a subsequent call to Menu:EnableItem()).</para>
      </summary>
      <param name="nItemID">
      </param>
      <returns>
        <para>A LONG indicating the previous state of the item. If the item does not exist the return value is -1.</para>
      </returns>
    </member>
    <member name="M:VO.Menu.EnableItem(XSharp.__Usual)">
      <summary>
        <para>Enable a specified menu item that was previously disabled.</para>
      </summary>
      <param name="nItemID">
      </param>
      <returns>
        <para>A LONG indicating the previous state of the item. If the item does not exist the return value is -1.</para>
      </returns>
    </member>
    <member name="M:VO.Menu.GetAutoUpdate">
      <summary></summary>
    </member>
    <member name="M:VO.Menu.GetSubMenu(XSharp.__Usual)">
      <param name="nIndex">
      </param>
    </member>
    <member name="M:VO.Menu.Handle">
      <summary>
        <para>Return the handle for a menu.</para>
      </summary>
      <returns>
        <para>A handle describing the underlying system object.</para>
      </returns>
    </member>
    <member name="M:VO.Menu.HyperLabel(XSharp.__Usual)">
      <summary>
        <para>Return the hyperlabel attached to the menu item, or NIL if it has none.</para>
      </summary>
      <param name="nItemID">
      </param>
    </member>
    <member name="M:VO.Menu.InsertItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Insert a new menu item before a specified menu item.</para>
      </summary>
      <param name="nItemID">
      </param>
      <param name="xNewItem">
      </param>
      <param name="nBeforeID">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.Menu.Items">
      <summary></summary>
    </member>
    <member name="M:VO.Menu.MakeMenuRtol(XSharp.__Usual)">
      <summary>
        <para>Reverse the order of the menu items in a menu. This is only necessary if you are using an International, bi-directional version of Windows.</para>
      </summary>
      <param name="lRToL">
      </param>
    </member>
    <member name="M:VO.Menu.Name(XSharp.__Usual)">
      <summary>
        <para>Return the name, as a string, stored in the hyperlabel attached to the menu command, or NIL if there is none.</para>
      </summary>
      <param name="nItemID">
      </param>
    </member>
    <member name="M:VO.Menu.NameSym(XSharp.__Usual)">
      <summary>
        <para>Return the symbolic name stored in the hyperlabel attached to the menu item, or NIL if there is none.</para>
      </summary>
      <param name="nItemID">
      </param>
    </member>
    <member name="M:VO.Menu.PostInit">
      <summary></summary>
    </member>
    <member name="M:VO.Menu.PreInit">
      <summary></summary>
    </member>
    <member name="M:VO.Menu.RegisterItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Register the hyperlabel for this menu item.</para>
      </summary>
      <param name="nItemID">
      </param>
      <param name="oHyperLabel">
      </param>
      <param name="hParentMenu">
      </param>
      <param name="nPosition">
      </param>
    </member>
    <member name="M:VO.Menu.SetAutoUpdate(XSharp.__Usual)">
      <param name="nMenuNumber">
      </param>
    </member>
    <member name="M:VO.Menu.SetParent(XSharp.__Usual)">
      <param name="oMenu">
      </param>
    </member>
    <member name="M:VO.Menu.ShowAsPopup(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Display menu as a local pop-up menu.</para>
      </summary>
      <param name="oOwner">

      </param>
      <param name="oPoint">

      </param>
      <param name="kButton">

      </param>
      <param name="kAlignment">

      </param>
      <param name="oNotOverlap">

      </param>
      <returns>
        <para>TRUE if the menu was displayed successfully; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.Menu.ToolBar">
      <summary>
        <para>
          The toolbar that corresponds to the menu.
        </para>
      </summary>
      <remarks>
        <para>
          The Menu Editor generates code that creates a toolbar and assigns it to the menu; when the menu is assigned to a
          window, the corresponding toolbar is assigned also.
        </para>
      </remarks>
    </member>
    <member name="M:VO.Menu.UncheckItem(XSharp.__Usual)">
      <summary>
        <para>Remove the check mark (that the user sees) from the menu item. Typically, you do this in response to a MenuCommandEvent on that item.</para>
      </summary>
      <param name="nItemID">

      </param>
      <returns>
        <para>TRUE if removed successfully; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.Menu.UnregisterItem(XSharp.__Usual)">
      <summary>
        <para>Unregister the hyperlabel for this menu item.</para>
      </summary>
      <param name="nItemID">
      </param>
    </member>
    <member name="T:VO.MenuCommandEvent">
      <summary>
        <para>Provide information about a MenuCommandEvent, generated when the user executes a menu item, either directly or through the use of accelerator keys.</para>
      </summary>
    </member>
    <member name="M:VO.MenuCommandEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="M:VO.MenuCommandEvent.AsString">
      <summary></summary>
    </member>
    <member name="P:VO.MenuCommandEvent.HyperLabel">
      <summary>
        <para>
          The hyperlabel connected to the menu item that generated this MenuCommandEvent.
          item.
        </para>
      </summary>
      <remarks>
        <para>
          From the hyperlabel, you can retrieve additional information about the menu item.
        </para>
      </remarks>
    </member>
    <member name="P:VO.MenuCommandEvent.ItemID">
      <summary>
        <para>A numeric value representing the ID of the menu item that generated this MenuCommandEvent.</para>
      </summary>
    </member>
    <member name="P:VO.MenuCommandEvent.Menu">
      <summary>
        <para>The Menu object that generated this MenuCommandEvent.</para>
      </summary>
    </member>
    <member name="P:VO.MenuCommandEvent.Name">
      <summary>
        <para>A string representing the name stored in the hyperlabel of the menu item that generated this MenuCommandEvent.</para>
      </summary>
    </member>
    <member name="P:VO.MenuCommandEvent.NameSym">
      <summary>
        <para>A symbol representing the name stored in the hyperlabel of the menu item that generated this MenuCommandEvent.</para>
      </summary>
    </member>
    <member name="T:VO.MenuInitEvent">
      <summary>
        <para>Provide information about a MenuInitEvent, generated when the user first activates a menu for the first time.</para>
      </summary>
    </member>
    <member name="M:VO.MenuInitEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.MenuInitEvent.Menu">
      <summary>
        <para>The Menu object that generated this MenuInitEvent (and is about to be displayed for initialization).</para>
      </summary>
    </member>
    <member name="T:VO.MenuSelectEvent">
      <summary>
        <para>
          Provide information about a MenuSelectEvent, generated whenever a menu item is highlighted on a menu (menu items are highlighted as the user moves either
          the mouse or the highlight bar up or down a menu).
        </para>
      </summary>
    </member>
    <member name="M:VO.MenuSelectEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="M:VO.MenuSelectEvent.AsString">
      <summary></summary>
    </member>
    <member name="P:VO.MenuSelectEvent.HyperLabel">
      <summary>
        <para>The hyperlabel connected to the menu that generated this MenuSelectEvent. From the hyperlabel, you can retrieve additional information about the menu.</para>
      </summary>
    </member>
    <member name="P:VO.MenuSelectEvent.ItemID">
      <summary>
        <para>A numeric value representing the ID of the menu item that generated this MenuSelectEvent.</para>
      </summary>
    </member>
    <member name="P:VO.MenuSelectEvent.Menu">
      <summary>
        <para>The Menu object that generated this MenuSelectEvent.</para>
      </summary>
    </member>
    <member name="P:VO.MenuSelectEvent.Name">
      <summary>
        <para>A string representing the name stored in the hyperlabel of the menu items that generated this MenuSelectEvent.</para>
      </summary>
    </member>
    <member name="P:VO.MenuSelectEvent.NameSym">
      <summary>
        <para>A symbol representing the name stored in the hyperlabel of the menu items that generated this MenuSelectEvent.</para>
      </summary>
    </member>
    <member name="T:VO.MinMaxInfoEvent">
      <summary>
        <para>
          Provide information about a MinMaxInfoEvent, generated whenever the size or position of a window is about to change. The MinMaxInfoEvent object describes
          the maximised width, height and position of the maximised window in addition to the minimum and maximum height and width of the window.
        </para>
      </summary>
    </member>
    <member name="M:VO.MinMaxInfoEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.MinMaxInfoEvent.MaxPosition">
      <summary></summary>
    </member>
    <member name="P:VO.MinMaxInfoEvent.MaxSize">
      <summary></summary>
    </member>
    <member name="P:VO.MinMaxInfoEvent.MaxTrackSize">
      <summary></summary>
    </member>
    <member name="P:VO.MinMaxInfoEvent.MinTrackSize">
      <summary></summary>
    </member>
    <member name="T:VO.ModelessDialog">
      <summary>
        <para>
          Create a modeless dialog window (also commonly referred to as a <b>dialog box</b>), which are used to present a collection of controls for user input and
          output.
        </para>
      </summary>
    </member>
    <member name="M:VO.ModelessDialog.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Create a modeless dialog box.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xResourceID">
      </param>
    </member>
    <member name="T:VO.MonthCalendar">
      <summary>
        <para>Encapsulate a standalone MonthCalendar control.</para>
      </summary>
    </member>
    <member name="M:VO.MonthCalendar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a MonthCalendar object.</para>
      </summary>
      <param name="oOwner">

      </param>
      <param name="xID">

      </param>
      <param name="oPoint">

      </param>
      <param name="oDimension">

      </param>
      <param name="dwStyle">

      </param>
      <param name="lDataAware">

      </param>
    </member>
    <member name="P:VO.MonthCalendar.BackgroundColor">
      <summary></summary>
    </member>
    <member name="M:VO.MonthCalendar.Dispatch(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.MonthCalendar.FirstDayOfWeek">
      <summary>
        <para>An integer specifying the first day of the week (Monday=0, Tuesday=1, etc.).</para>
      </summary>
    </member>
    <member name="P:VO.MonthCalendar.MaxSelCount">
      <summary>
        <para>The maximum number of days that can be selected in the MonthCalendar control.</para>
      </summary>
      <remarks>
        <para>
          <b>Note:</b> This property is only valid for MonthCalendar controls that have the MultiSelect style (MCS_MULTISELECT) turned on.
        </para>
      </remarks>
    </member>
    <member name="P:VO.MonthCalendar.MonthBackgroundColor">
      <summary></summary>
    </member>
    <member name="P:VO.MonthCalendar.MonthDelta">
      <summary>
        <para>The number of months the control scrolls when the user clicks the scroll button.</para>
      </summary>
    </member>
    <member name="P:VO.MonthCalendar.Range">
      <summary>
        <para>A DateRange object setting the minimum and maximum allowable dates for the MonthCalendar control.</para>
      </summary>
    </member>
    <member name="P:VO.MonthCalendar.Selection">
      <summary>
        <para>The currently selected date. In the case of a multiple selection, the starting date is returned.</para>
      </summary>
    </member>
    <member name="P:VO.MonthCalendar.SelectionRange">
      <summary>
        <para>A DateRange object representing the currently selected date range.</para>
      </summary>
    </member>
    <member name="P:VO.MonthCalendar.TextColor">
      <summary>
        <para>A Color object specifying the text color of the MonthCalendar control.</para>
      </summary>
    </member>
    <member name="P:VO.MonthCalendar.TextValue">
      <summary>
        <para>The current date selection in string format. This is needed internally to allow the binding of a MonthCalendar control to a database field.</para>
      </summary>
    </member>
    <member name="P:VO.MonthCalendar.TitleBackgroundColor">
      <summary></summary>
    </member>
    <member name="P:VO.MonthCalendar.TitleTextColor">
      <summary>
        <para>A Color object specifying the title text color of the MonthCalendar control.</para>
      </summary>
    </member>
    <member name="P:VO.MonthCalendar.Today">
      <summary>
        <para>The date specified as "today" for the MonthCalendar control.</para>
      </summary>
    </member>
    <member name="P:VO.MonthCalendar.TrailingTextColor">
      <summary></summary>
    </member>
    <member name="P:VO.MonthCalendar.Value">
      <summary>
        <para>The currently selected date.</para>
      </summary>
    </member>
    <member name="T:VO.MonthCalSelectionEvent">
      <summary>
        <para>Provide information about a monthcalendar selection event, which is generated when a user selects a date in a MonthCalendar control.</para>
      </summary>
    </member>
    <member name="M:VO.MonthCalSelectionEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.MonthCalSelectionEvent.Explicit">
      <summary>
        <para>A Logic value indicating when the user made an explicit date selection within a month calendar control</para>
      </summary>
    </member>
    <member name="P:VO.MonthCalSelectionEvent.Selection">
      <summary>
        <para>A date value indicating the date the user selected in the control</para>
      </summary>
    </member>
    <member name="T:VO.MouseEvent">
      <summary>
        <para>Provide information about the location of the mouse, as well as which mouse button was pressed, when a MouseEvent occurred.</para>
      </summary>
    </member>
    <member name="M:VO.MouseEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.MouseEvent.ButtonID">
      <summary>
        <para>A constant indicating the mouse button the user pressed when a MouseEvent was generated</para>
      </summary>
      <remarks>
        <para>One of the following constants indicating the mouse button the user pressed when a MouseEvent was generated:</para>
        <b>Constant</b>
        <b>Description</b>
        BUTTONCONTROL The Control key on the keyboard was being used.
        BUTTONLEFT The left mouse button was being used.
        BUTTONMIDDLE The middle mouse button was being used.
        BUTTONRIGHT The right mouse button was being used.
        BUTTONSHIFT The Shift key on the keyboard was being pressed.
        BUTTONX1 The ButtonX1 on a five button mouse was being used.
        BUTTONX2 The ButtonX2 on a five button mouse was being used.
        <para>
          The MouseEvent:ButtonID access method does not work in Window:MouseDrag() event handlers if the user presses more than one mouse button simultaneously. To
          handle with multiple buttons, invoke the methods of MouseEvent (like IsLeftButton() and IsRightButton()), which report on individual buttons.
        </para>
      </remarks>
    </member>
    <member name="P:VO.MouseEvent.Height">
      <summary></summary>
    </member>
    <member name="P:VO.MouseEvent.IsControlButton">
      <summary>
        <para>A logical value indicating whether the user pressed the Control key when a MouseEvent was generated. If yes, TRUE is returned; otherwise, FALSE.</para>
      </summary>
    </member>
    <member name="P:VO.MouseEvent.IsLeftButton">
      <summary>
        <para>A logical value indicating whether the user pressed the left mouse button when a MouseEvent was generated. If yes, TRUE is returned; otherwise, FALSE.</para>
      </summary>
    </member>
    <member name="P:VO.MouseEvent.IsMiddleButton">
      <summary>
        <para>A logical value indicating whether the user pressed the middle mouse button when a MouseEvent was generated. If yes, TRUE is returned; otherwise, FALSE.</para>
      </summary>
    </member>
    <member name="P:VO.MouseEvent.IsRightButton">
      <summary>
        <para>A logical value indicating whether the user pressed the right mouse button when a MouseEvent was generated. If yes, TRUE is returned; otherwise, FALSE.</para>
      </summary>
    </member>
    <member name="P:VO.MouseEvent.IsShiftButton">
      <summary>
        <para>A logical value determining whether the user pressed the Shift key when a MouseEvent was generated. If yes, TRUE is returned; otherwise, FALSE</para>
      </summary>
    </member>
    <member name="P:VO.MouseEvent.IsXButton1">
      <summary>
        <para>A logical value determining whether the user pressed the XButton1 causing the MouseEvent to be generated. If yes, TRUE is returned; otherwise, FALSE</para>
      </summary>
      <remarks>This event will only happen on a 5 button mouse.</remarks>
    </member>
    <member name="P:VO.MouseEvent.IsXButton2">
      <summary>
        <para>A logical value determining whether the user pressed the XButton2 causing the MouseEvent to be generated. If yes, TRUE is returned; otherwise, FALSE</para>
      </summary>
      <remarks>This event will only happen on a 5 button mouse.</remarks>
    </member>
    <member name="P:VO.MouseEvent.Position">
      <summary>
        <para>A point, in canvas coordinates, representing the position of the mouse pointer on the window when this MouseEvent was generated.</para>
      </summary>
    </member>
    <member name="P:VO.MouseEvent.Size">
      <summary></summary>
    </member>
    <member name="P:VO.MouseEvent.Width">
      <summary></summary>
    </member>
    <member name="T:VO.MoveEvent">
      <summary>
        <para>Provide information about a MoveEvent, used to notify the program that the user is in the process of moving a window.</para>
      </summary>

    </member>
    <member name="M:VO.MoveEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.MoveEvent.Origin">
      <summary>
        <para>A point representing the new location of a window after a MoveEvent was generated.</para>
      </summary>
      <remarks>
        <para>
          For top application windows and shell windows, the point is given in desktop coordinates. For all other windows, it is given in the owner window's canvas
          coordinates. In this sense, the desktop owns the top window.
        </para>
      </remarks>
    </member>
    <member name="T:VO.MultiLineEdit">
      <summary>
        <para>
          Create a multiline edit control for displaying and entering information to a variable or field in a server. Multiline edit controls may be bound to a data
          server field of any type (character, date, logical, numeric, or memo).
        </para>
      </summary>
    </member>
    <member name="M:VO.MultiLineEdit.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a multiline edit control.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="kStyle">
      </param>
    </member>
    <member name="M:VO.MultiLineEdit.Dispatch(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="M:VO.MultiLineEdit.GetLine(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Get a line of text — specified by position — in a multiline edit control.</para>
      </summary>
      <param name="nLineNumber">

      </param>
      <param name="nMaxLength">

      </param>
      <returns>
        <para>The text of the specified line.</para>
      </returns>
    </member>
    <member name="M:VO.MultiLineEdit.GetLineLength(XSharp.__Usual)">
      <param name="nLineNumber">

      </param>
    </member>
    <member name="P:VO.MultiLineEdit.LineCount">
      <summary>
        <para>A numeric value representing the number of lines in a multiline edit control.</para>
      </summary>
    </member>
    <member name="M:VO.MultiLineEdit.LineDown">
      <summary>
        <para>Move the cursor from its current position in a multiline edit control down a single line.</para>
      </summary>
    </member>
    <member name="M:VO.MultiLineEdit.LineUp">
      <summary>
        <para>Move the cursor from its current position in a multiline edit control up a single line.</para>
      </summary>
    </member>
    <member name="M:VO.MultiLineEdit.PageDown">
      <summary>
        <para>Move the cursor from its current position in a multiline edit control down a single page length.</para>
      </summary>
    </member>
    <member name="M:VO.MultiLineEdit.PageUp">
      <summary>
        <para>Move the cursor from its current position in a multiline edit control up a single page length.</para>
      </summary>
    </member>
    <member name="M:VO.MultiLineEdit.ScrollHorizontal(XSharp.__Usual)">
      <param name="nChars">

      </param>
    </member>
    <member name="M:VO.MultiLineEdit.ScrollVertical(XSharp.__Usual)">
      <param name="nLines">

      </param>
    </member>
    <member name="T:VO.MultiMediaContainer">
      <summary>
        <para>Implement a container window for displaying multimedia data.</para>
      </summary>
    </member>
    <member name="M:VO.MultiMediaContainer.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Create a Multimedia Container object.</para>
      </summary>

      <param name="oOwner">

      </param>
      <param name="xID">

      </param>
      <param name="oPoint">

      </param>
      <param name="oDimension">

      </param>
    </member>
    <member name="M:VO.MultiMediaContainer.Destroy">
      <summary></summary>
    </member>
    <member name="M:VO.MultiMediaContainer.Dispatch(XSharp.__Usual)">
      <inheritdoc />

    </member>
    <member name="P:VO.MultiMediaContainer.FileName">
      <summary>
        <para>The name of the file containing the multimedia data as a string. Major and minor MIME types are derived from the file extension.</para>
      </summary>
    </member>
    <member name="P:VO.MultiMediaContainer.MajorType">
      <summary></summary>
    </member>
    <member name="M:VO.MultiMediaContainer.MCISendMessage(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="dwMsg">
      </param>
      <param name="wParam">
      </param>
      <param name="lParam">
      </param>
    </member>
    <member name="P:VO.MultiMediaContainer.MinorType">
      <summary></summary>
    </member>
    <member name="P:VO.MultiMediaContainer.Size">
      <summary>
        <para>A Dimension object defining the size of the control.</para>
      </summary>
    </member>
    <member name="T:VO.OLEDataWindow">
      <summary>
        <para>Create a data window capable of hosting OLE objects.</para>
      </summary>
    </member>
    <member name="M:VO.OLEDataWindow.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct an OLE data window.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="oSource">
      </param>
      <param name="nResourceID">
      </param>
    </member>
    <member name="T:VO.OleDragEvent">
      <summary>
        <para>Store information about an OLE drag and drop event.</para>
      </summary>
    </member>
    <member name="M:VO.OleDragEvent.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct an OLEDragEvent.</para>
      </summary>
      <param name="DragInfo">
      </param>
    </member>
    <member name="P:VO.OleDragEvent.DataObject">
      <summary>
        <para>A pointer to the OLE object data.</para>
      </summary>
    </member>
    <member name="P:VO.OleDragEvent.Effect">
      <summary>
        <para>A constant indicating the effect of the drag and drop operation</para>
      </summary>
      <remarks>
        <para>One of the following constants indicating the effect of the drag and drop operation:</para>
        <b>Constant</b>
        <b>Meaning</b>
        DROPEFFECT_COPY Copy operation
        DROPEFFECT_LINK Create a new link
        DROPEFFECT_MOVE Move operation
        DROPEFFECT_NONE No effect
        <para>OLEDragEvent:Effect controls the appearance of the drag and drop mouse cursor and can be set during the handling of an OLEDragEvent.</para>
      </remarks>
    </member>
    <member name="P:VO.OleDragEvent.ObjectName">
      <summary>
        <para>
          A string representing the OLE object name.
        </para>
      </summary>
      <remarks>
        <para>
          By examining the object and/or server name, the container application can selectively allow or disallow a
          particular object or server as a drag and drop source.
        </para>
      </remarks>
    </member>
    <member name="P:VO.OleDragEvent.Position">
      <summary>
        <para>A Point object specifying the position of the event.</para>
      </summary>
    </member>
    <member name="P:VO.OleDragEvent.ServerName">
      <summary>
        <para>
          A string representing the OLE server name.
        </para>
      </summary>
      <remarks>
        <para>
          By examining the object and/or server name, the container application can selectively allow or disallow a
          particular object or server as a drag and drop source.
        </para>
      </remarks>
    </member>
    <member name="T:VO.OLEShellWindow">
      <summary>
        <para>Create a specialized shell window that includes support for in-place active OLE objects.</para>
      </summary>
    </member>
    <member name="M:VO.OLEShellWindow.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct an OLE shell window.</para>
      </summary>
      <param name="oOwner">
      </param>
    </member>
    <member name="T:VO.OpenDialog">
      <summary>
        <para>Present the user with a standard "file open" dialog box.</para>
      </summary>
    </member>

    <member name="M:VO.OpenDialog.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a standard "file open" dialog box.</para>
      </summary>
      <param name="oOwnWnd">
      </param>
      <param name="cInitPath">
      </param>
      <param name="dwFlag">
      </param>
    </member>
    <member name="T:VO.Pair">
      <summary>
        <para>Provide the base class from which all objects containing ordered pairs of values are subclassed.</para>

      </summary>
      <remarks>
        <para>
          <b>
            <i>Important!</i>
            <br />
          </b>
          <i>
            Pair is an abstract class and should not be used directly — instead, use one of its subclasses, which include
            Dimension, Point, Range, and Selection.
          </i>
        </para>
      </remarks>
    </member>

    <member name="M:VO.Pair.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a pair.</para>
      </summary>
      <param name="uInt1">
      </param>
      <param name="uInt2">
      </param>
    </member>
    <member name="T:VO.PaletteDialog">
      <summary>
        <para>Present the user with a standard color palette dialog box, allowing the user to define custom colors.</para>
      </summary>
    </member>
    <member name="M:VO.PaletteDialog.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a standard color palette dialog.</para>
      </summary>
      <param name="uOwner">
      </param>
      <param name="oColor">
      </param>
    </member>
    <member name="T:VO.Pen">
      <summary>
        <para>
          Create a pen, which can be used to draw lines in a particular color, style, and width. Pens are used by the Window:LineTo() method and the DrawObject
          hierarchy.
        </para>
      </summary>
    </member>
    <member name="M:VO.Pen.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a pen.</para>
      </summary>
      <param name="uColor">
      </param>
      <param name="uLineStyle">
      </param>
      <param name="uWidth">
      </param>
    </member>
    <member name="M:VO.Pen.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a Pen object.</para>
      </summary>
    </member>
    <member name="M:VO.Pen.Handle(XSharp.__Usual)">
      <summary>
        <para>Return the handle for a pen.</para>
      </summary>
      <param name="uType">
      </param>
      <returns>
        <para>A handle describing the underlying system object.</para>
      </returns>
    </member>
    <member name="T:VO.PieObject">
      <summary>
        <para>Construct a PieObject object.</para>
      </summary>
    </member>

    <member name="M:VO.PieObject.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a PieObject object.</para>
      </summary>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="oPen">
      </param>
      <param name="oBrush">
      </param>
      <param name="iStartAngle">
      </param>
      <param name="iEndAngle">
      </param>
    </member>
    <member name="M:VO.PieObject.Draw">
      <summary>
        <para>Draw a PieObject object which represents a pie-shaped portion of an ellipse.</para>
      </summary>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="T:VO.Point">
      <summary>
        <para>
          Create a point, which is used to describe a location on the canvas of a window. The Point class does not interpret the coordinates — whether they
          are screen or canvas coordinates is context-dependent.
        </para>
      </summary>
    </member>

    <member name="M:VO.Point.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a point.</para>
      </summary>
      <param name="nX">
      </param>
      <param name="nY">
      </param>
    </member>
    <member name="M:VO.Point.ConvertToScreen(XSharp.__Usual)">
      <param name="oWindow">
      </param>
    </member>
    <member name="P:VO.Point.X">
      <summary>
        <para>An integer representing this point's x coordinate.</para>
      </summary>
    </member>
    <member name="P:VO.Point.Y">
      <summary>
        <para>An integer representing this point's y coordinate.</para>
      </summary>
    </member>
    <member name="T:VO.Pointer">
      <summary>
        <para>Create a mouse cursor, which is used to visually represent the mouse in a window.</para>
      </summary>
    </member>

    <member name="M:VO.Pointer.#ctor(XSharp.__Usual)">
      <summary>
        <para>Load a pointer from a resource entity.</para>
      </summary>
      <param name="xResourceID">
      </param>
    </member>
    <member name="M:VO.Pointer.Confine(XSharp.__Usual)">
      <summary>
        <para>Confine the movement of this pointer to a given set of screen coordinates.</para>
      </summary>
      <param name="oRect">
      </param>
    </member>
    <member name="M:VO.Pointer.Handle">
      <summary>
        <para>Return the handle for a pointer.</para>
      </summary>
      <returns>
        <para>A handle describing the underlying system object.</para>
      </returns>
    </member>
    <member name="M:VO.Pointer.Hide">
      <summary>
        <para>Hide this pointer so it is not visible. Hide a control so it is not visible (until a subsequent call to Pointer:Show()).</para>
      </summary>
    </member>
    <member name="P:VO.Pointer.Position">
      <summary>
        <para>A point representing the position of this pointer on the window, in screen coordinates.</para>
      </summary>
      <remarks>
        <para>
          Alternatively, you can use the MouseMove() or MouseDrag() event handlers of class Window and use Where() to get the location of the pointer in screen
          coordinates.
        </para>
      </remarks>
    </member>
    <member name="M:VO.Pointer.Show">
      <summary>
        <para>Display a pointer so it is visible.</para>
      </summary>
    </member>
    <member name="T:VO.Printer">
      <summary>
        <para>Create an object that represents a single print job.</para>
      </summary>
    </member>

    <member name="M:VO.Printer.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a printer job.</para>
      </summary>
      <param name="cJobname">
      </param>
      <param name="oDevice">
      </param>
    </member>
    <member name="M:VO.Printer.Abort">
      <summary>
        <para>Instruct the printer to abort the current print job.</para>
      </summary>
    </member>
    <member name="M:VO.Printer.Aborted">
      <summary></summary>
    </member>
    <member name="M:VO.Printer.BeginDoc">
      <summary></summary>
    </member>
    <member name="P:VO.Printer.CanvasArea">
      <summary></summary>
    </member>
    <member name="M:VO.Printer.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a Printer object.</para>
      </summary>
    </member>
    <member name="M:VO.Printer.Handle(XSharp.__Usual)">
      <summary>
        <para>Return the handle for a printer.</para>
      </summary>
      <param name="ServiceID">
      </param>
      <returns>
        <para>A handle describing the underlying system object.</para>
      </returns>
    </member>
    <member name="M:VO.Printer.Idle">
      <summary>
        <para>Instruct the system to process events while printing.</para>
      </summary>
    </member>
    <member name="M:VO.Printer.IsValid">
      <summary>
        <para>Determine if a printer is valid.</para>
      </summary>
      <returns>
        <para>TRUE if valid; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="F:VO.Printer.lprAbort">
      <summary></summary>
    </member>
    <member name="M:VO.Printer.NewPage">
      <summary>
        <para>Direct the attached printer to eject to a new page.</para>
      </summary>
    </member>
    <member name="M:VO.Printer.PrinterError(XSharp.__Usual)">
      <summary>
        <para>Called if a printer error occurs. PrintErrorEvent is interrogated to identify the type of error has occurred.</para>
      </summary>
      <param name="oPerr">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
      <returns>
        <para>TRUE if the print job is to be retried (i.e., the error is to be ignored); FALSE if the print job is to be canceled.</para>
      </returns>
    </member>
    <member name="M:VO.Printer.PrinterExpose(XSharp.__Usual)">
      <summary>
        <para>Invoked for each page (or part of a page) of the print job whenever it needs repainting.</para>
      </summary>
      <param name="oPrinterExposeEvt">
      </param>
      <returns>
        <para>TRUE if there is another page (or part of a page) to print; FALSE if the last page has been printed.</para>
      </returns>
    </member>
    <member name="M:VO.Printer.Start(XSharp.__Usual)">
      <summary>
        <para>Start a print job or contiguous portion of a print job.</para>
      </summary>
      <param name="oRange">

      </param>
    </member>
    <member name="P:VO.Printer.WindowArea">
      <summary></summary>
    </member>
    <member name="T:VO.PrinterExposeEvent">
      <summary>
        <para>Provides facilities for determining the number of the page to be painted, as well as the area of the page to be painted.</para>
      </summary>
    </member>
    <member name="M:VO.PrinterExposeEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.PrinterExposeEvent.ExposedArea">
      <summary></summary>
    </member>
    <member name="P:VO.PrinterExposeEvent.PageNo">
      <summary>
        <para>A numeric value representing the number of the page to be painted.</para>
      </summary>
    </member>
    <member name="T:VO.PrintingDevice">
      <summary>
        <para>
          Create an object that allows you to set up the printing device for an application. It also allows you to invoke the standard dialog box to configure a
          default printer and change values, such as changing the page orientation or paper source.
        </para>
      </summary>
    </member>

    <member name="M:VO.PrintingDevice.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct a PrintingDevice object.</para>
      </summary>
      <param name="uName">
      </param>
    </member>
    <member name="P:VO.PrintingDevice.Copies">
      <summary>
        <para>Specifies the number of copies printed if the device supports multiple-page copies.</para>
      </summary>
    </member>

    <member name="M:VO.PrintingDevice.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a PrintingDevice object.</para>
      </summary>
    </member>
    <member name="P:VO.PrintingDevice.Device">
      <summary>
        <para>Specifies the printer device to be used.</para>
      </summary>
    </member>
    <member name="M:VO.PrintingDevice.DeviceCapabilities(XSharp.__Usual)">
      <param name="wCapability">
      </param>
    </member>
    <member name="P:VO.PrintingDevice.Driver">
      <summary>
        <para>A string representing the printer driver to be used.</para>
      </summary>
    </member>
    <member name="M:VO.PrintingDevice.GetDevMode">
      <summary></summary>
    </member>
    <member name="M:VO.PrintingDevice.IsValid">
      <summary>
        <para>Determine if a printing device is valid.</para>
      </summary>
      <returns>
        <para>TRUE if valid; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.PrintingDevice.Orientation">
      <summary>
        <para>Specifies whether the orientation of the paper is portrait or landscape.</para>
      </summary>
    </member>
    <member name="P:VO.PrintingDevice.PaperHeight">
      <summary>
        <para>
          Specifies paper length, in tenths of a millimeter.
        </para>
      </summary>
      <remarks>
        <para>
          This parameter overrides the paper length specified by the member of the DevMode structure, PaperSize,
          either for custom paper sizes or for such devices as dot-matrix printers that can print on a variety of page sizes.
        </para>
      </remarks>
    </member>
    <member name="P:VO.PrintingDevice.PaperSize">
      <summary>
        <para>
          Specifies the size of the paper to print on.
        </para>
      </summary>
      <remarks>
        <para>
          Specifies the size of the paper to print on. This member may be set to zero if the length and width of the paper are specified by the members of the DevMode
          structure, PaperLength and PaperWidth, respectively. Otherwise, the dmPaperSize member can be set to one of the following predefined values:
        </para>
        <b>Value</b>
        <b>Meaning</b>
        DMPAPER_FIRST DMPAPER_LETTER
        DMPAPER_LETTER Letter, 8 1/2 x 11 in.
        DMPAPER_LETTERSMALL Letter Small, 8 1/2 x 11 in.
        DMPAPER_TABLOID Tabloid, 11 x 17 in.
        DMPAPER_LEDGER Ledger, 17 x 11 in.
        DMPAPER_LEGAL Legal, 8 1/2 x 14 in.
        DMPAPER_STATEMENT Statement, 5 1/2 x 8 1/2 in.
        DMPAPER_EXECUTIVE Executive, 7 1/2 x 10 1/2 in.
        DMPAPER_A3 A3, 297 x 420 mm
        DMPAPER_A4 A4, 210 x 297 mm
        DMPAPER_A4SMALL A4 Small, 210 x 297 mm
        DMPAPER_A5 A5, 148 x 210 mm
        DMPAPER_B4 B4, 250 x 354 mm
        DMPAPER_B5 B5, 182 x 257 mm
        DMPAPER_FOLIO Folio, 8 1/2 x 13 in.
        DMPAPER_QUARTO Quarto, 215 x 275 mm
        DMPAPER_10X14 10 x 14 in.
        DMPAPER_11X17 11 x 17 in.
        DMPAPER_NOTE Note, 8 1/2 x 11 in.
        DMPAPER_ENV_9 Envelope #9, 3 7/8 x 8 7/8 in.
        DMPAPER_ENV_10 Envelope #10, 4 1/8 x 9 1/2 in.
        DMPAPER_ENV_11 Envelope #11, 4 1/2 x 10 3/8 in.
        DMPAPER_ENV_12 Envelope #12, 4 1/2 x 11 in.
        DMPAPER_ENV_14 Envelope #14, 5 x 11 1/2 in.
        DMPAPER_CSHEET C size sheet
        DMPAPER_DSHEET D size sheet
        DMPAPER_ESHEET E size sheet
        DMPAPER_ENV_DL Envelope DL, 110 x 220 mm
        DMPAPER_ENV_C3 Envelope C3, 324 x 458 mm
        DMPAPER_ENV_C4 Envelope C4, 229 x 324 mm
        DMPAPER_ENV_C5 Envelope C5, 162 x 229 mm
        DMPAPER_ENV_C6 Envelope C6, 114 x 162 mm
        DMPAPER_ENV_C65 Envelope C65, 114 x 229 mm
        DMPAPER_ENV_B4 Envelope B4, 250 x 353 mm
        DMPAPER_ENV_B5 Envelope B5, 176 x 250 mm
        DMPAPER_ENV_B6 Envelope B6, 176 x 125 mm
        DMPAPER_ENV_ITALY Envelope, 110 x 230 mm
        DMPAPER_ENV_MONARCH Envelope Monarch, 3 7/8 x 7 1/2 in.
        DMPAPER_ENV_PERSONAL Envelope, 3 5/8 x 6 1/2 in.
        DMPAPER_FANFOLD_US U.S. Standard Fanfold, 14 7/8 x 11 in.
        DMPAPER_FANFOLD_STD_GERMAN German Standard Fanfold, 8 1/2 x 12 in.
        DMPAPER_FANFOLD_LGL_GERMAN German Legal Fanfold, 8 1/2 x 13 in.
        DMPAPER_LAST German Legal Fanfold, 8 1/2 x 13 in.
        DMPAPER_USER User-defined
      </remarks>
    </member>
    <member name="P:VO.PrintingDevice.PaperWidth">
      <summary>
        <para>Specifies paper width, in tenths of a millimeter. </para>
      </summary>
      <remarks>
        <para>This parameter overrides the paper width specified by the dmPaperSize member.</para>
      </remarks>
    </member>
    <member name="P:VO.PrintingDevice.Port">
      <summary>
        <para>Specifies the default port setting for the printer.</para>
      </summary>
    </member>
    <member name="M:VO.PrintingDevice.SetUp">
      <summary>
        <para>
          Display the standard Windows Printer Setup dialog box, which allows the user to configure or change a default printer and set page orientation, paper size,
          and paper source (e.g., Manual Feed, Upper Tray, etc.).
        </para>
      </summary>
      <returns>
        <para>Returns TRUE, if the OK button is pressed; or FALSE, if the Cancel button is pressed, thus closing the Windows Printer Setup dialog box.</para>
      </returns>
    </member>
    <member name="M:VO.PrintingDevice.UpdateDevMode">
      <summary></summary>
    </member>
    <member name="T:VO.ProgressBar">
      <summary>
        <para>Create a progress bar.</para>
      </summary>
    </member>
    <member name="M:VO.ProgressBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a progress bar.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="kStyle">
      </param>
      <param name="lDataAware">
      </param>
    </member>
    <member name="M:VO.ProgressBar.Advance(XSharp.__Usual)">
      <summary>
        <para>Advance the progress bar to a new position.</para>
      </summary>
      <param name="dwNewPosition">
      </param>
      <returns>
        <para>The amount by which the progress bar is advanced.</para>
      </returns>
    </member>
    <member name="P:VO.ProgressBar.BackgroundColor">
      <summary>
        <para>A Color object specifying the background color for the progress bar.</para>
      </summary>
    </member>
    <member name="P:VO.ProgressBar.BarColor">
      <summary>
        <para>A Color object specifying the bar color for the progress bar control.</para>
      </summary>
    </member>
    <member name="P:VO.ProgressBar.OldPosition">
      <summary>
        <para>A numeric value representing the previous position of the progress bar.</para>
      </summary>
    </member>
    <member name="P:VO.ProgressBar.Position">
      <summary>
        <para>A numeric value representing the current position of the progress bar.</para>
      </summary>
    </member>
    <member name="P:VO.ProgressBar.Range">
      <summary>
        <para>A Range object representing the minimum and maximum values currently in use for the progress bar.</para>
      </summary>
    </member>
    <member name="P:VO.ProgressBar.UnitSize">
      <summary>
        <para>A numeric value representing the unit size currently associated with the progress bar.</para>
      </summary>
    </member>
    <member name="T:VO.PushButton">
      <summary>
        <para>Create a push button, which can be used to initiate an event and associated action when clicked on by the user.</para>
      </summary>
    </member>
    <member name="M:VO.PushButton.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a push button.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="cText">
      </param>
      <param name="kStyle">
      </param>
    </member>
    <member name="P:VO.PushButton.Value">
      <summary>
        <para>PushButton:Value always returns FALSE, since it has a single state.</para>
      </summary>
    </member>
    <member name="T:VO.RadioButton">
      <summary>
        <para>Create a radio button.</para>
      </summary>
    </member>
    <member name="M:VO.RadioButton.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a radio button.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="cText">
      </param>
      <param name="kStyle">
      </param>
    </member>
    <member name="M:VO.RadioButton.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a RadioButton object.</para>
      </summary>
    </member>
    <member name="P:VO.RadioButton.Pressed">
      <summary>
        <para>
          A logical value representing the current state of the radio button (TRUE if it is on, FALSE if it is off). RadioButton:Pressed is only modified by clicking
          on the button.
        </para>
      </summary>
    </member>
    <member name="P:VO.RadioButton.TextValue">
      <summary>
        <para>RadioButton:TextValue is set to the RadioButton:Caption text. The RadioButton:TextValue assign also changes the RadioButton:Caption.</para>
      </summary>
    </member>
    <member name="P:VO.RadioButton.Value">
      <summary>
        <para>RadioButton:Value contains TRUE if the radio button is in the pressed (ON) state or FALSE if it is not pressed (OFF).</para>
      </summary>
    </member>
    <member name="T:VO.RadioButtonGroup">
      <summary>
        <para>A group of radio buttons considered as a combination control, presenting a set of options and returning a single value.</para>
      </summary>
    </member>
    <member name="M:VO.RadioButtonGroup.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a radio button group.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="uPoint">
      </param>
      <param name="uDimension">
      </param>
      <param name="cText">
      </param>
    </member>
    <member name="M:VO.RadioButtonGroup.Button(XSharp.__Usual)">
      <summary>
        <para>Retrieve a specific radio button.</para>
      </summary>
      <param name="nButtonPosition">
      </param>
      <returns>
        <para>
          The RadioButton object at the specified position in the array. Note that the radio button position in the array may not correspond to the order the radio
          buttons are displayed in the group box. NIL is returned if there is no radio button at the indicated position.
        </para>
      </returns>
    </member>
    <member name="P:VO.RadioButtonGroup.Buttons">
      <summary></summary>
    </member>
    <member name="M:VO.RadioButtonGroup.Disable">
      <summary></summary>
    </member>
    <member name="M:VO.RadioButtonGroup.Enable">
      <summary>
        <para>Enable a radio button group that was previously disabled.</para>
      </summary>
    </member>
    <member name="M:VO.RadioButtonGroup.FillUsing(XSharp.__Usual)">
      <param name="aContents">
      </param>
    </member>
    <member name="M:VO.RadioButtonGroup.Hide">
      <summary>
        <para>Hide a radio button group so it is not visible (until a subsequent call to RadioButtonGroup:Show()).</para>
      </summary>
    </member>
    <member name="M:VO.RadioButtonGroup.SetFocus">
      <summary></summary>
    </member>
    <member name="M:VO.RadioButtonGroup.Show">
      <summary>
        <para>Display a radio button group so it is visible.</para>
      </summary>
    </member>
    <member name="P:VO.RadioButtonGroup.TextValue">
      <summary>
        <para>
          RadioButtonGroup:TextValue holds the first element of the FillUsing() array
        </para>
      </summary>
      <remarks>
        <para>
          RadioButtonGroup:TextValue holds the first element of the FillUsing() array (typically, the caption text of the radio button) for the currently selected
          button; if none is selected, RadioButtonGroup:TextValue is set to NULL_STRING.
        </para>
      </remarks>
    </member>
    <member name="P:VO.RadioButtonGroup.Value">
      <summary>
        <para>Contains the group value setting (specified on the Window Editor Property Window) associated with the radio button within the group that is selected.</para>
      </summary>
      <remarks>
        <para>
          The data type of the control's Value is determined by its field specification; in turn, controls linked to a data server inherit the field
          specification — and hence data type — from the field of the server. When the control is made data-aware, by setting its name to the name of
          a field in the server attached to the data window, Value is able to automatically read from and write to this field.
        </para>
        <para>
          <b>Note:</b> RadioButtonGroup:Value may not always be consistent with what the state of the control, as indicated to the end-user. For example, if the data
          value for the field is not among the group value settings for the radio buttons in a radio button group, the control will be in a "no-match" situation. In this
          case the control will revert to its initial unselected state.
        </para>
      </remarks>
    </member>
    <member name="T:VO.Range">
      <summary>
        <para>
          Create a range, representing the minimum and maximum values of the coordinates (or scroll units) that the thumb position on a scroll bar can
          move — up or down, left or right.
        </para>
      </summary>
    </member>

    <member name="M:VO.Range.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a range.</para>
      </summary>
      <param name="nMin">
      </param>
      <param name="nMax">
      </param>
    </member>
    <member name="M:VO.Range.IsInRange(XSharp.__Usual)">
      <summary></summary>
      <param name="nValue">
      </param>
    </member>
    <member name="P:VO.Range.Max">
      <summary>
        <para>A numeric value representing the maximum value in this range.</para>
      </summary>
    </member>
    <member name="P:VO.Range.Min">
      <summary>
        <para>A numeric value representing the minimum value in this range.</para>
      </summary>
    </member>
    <member name="T:VO.RectangleObject">
      <summary>
        <para>
          Create a RectangleObject object; this class is part of the DrawObject hierarchy, which provides a means of displaying and manipulating various geometric
          objects.
        </para>
      </summary>
    </member>

    <member name="M:VO.RectangleObject.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a rectangle.</para>
      </summary>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="oPen">
      </param>
      <param name="oBrush">
      </param>
    </member>
    <member name="M:VO.RectangleObject.Draw">
      <summary>
        <para>Draw the rectangle on the window.</para>
      </summary>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="T:VO.ResizeEvent">
      <summary>
        <para>Provide information about the ResizeEvent, used to indicate that a window has been resized.</para>
      </summary>
    </member>
    <member name="M:VO.ResizeEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>

    <member name="P:VO.ResizeEvent.Height">
      <summary>
        <para>A numeric value representing the new height of the canvas area of the window that generated this resize event, in canvas coordinates.</para>
      </summary>
    </member>
    <member name="P:VO.ResizeEvent.Size">
      <summary>
        <para>A dimension representing the new size of the canvas area of the window that generated this resize event, in canvas coordinates.</para>
      </summary>
    </member>
    <member name="P:VO.ResizeEvent.Width">
      <summary>
        <para>A numeric value representing the new width, in canvas coordinates, of the canvas area of the window that generated this resize event.</para>
      </summary>
    </member>
    <member name="T:VO.ResourceFile">
      <summary>
        <para>Identify a file containing resource information.</para>
      </summary>
    </member>
    <member name="M:VO.ResourceFile.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct a resource file object.</para>
      </summary>
      <param name="sName">
      </param>
    </member>
    <member name="M:VO.ResourceFile.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a ResourceFile object.</para>
      </summary>
    </member>
    <member name="M:VO.ResourceFile.Handle">
      <summary></summary>
    </member>
    <member name="T:VO.ResourceID">
      <summary>
        <para>Identify and create a ResourceID using a numeric resource ID.</para>
      </summary>
    </member>

    <member name="M:VO.ResourceID.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a ResourceID object.</para>
      </summary>
      <param name="xID">

      </param>
      <param name="xResourceFile">

      </param>
    </member>
    <member name="M:VO.ResourceID.Address">
      <summary></summary>
    </member>
    <member name="M:VO.ResourceID.Handle">
      <summary></summary>
    </member>
    <member name="P:VO.ResourceID.ID">
      <summary></summary>
    </member>
    <member name="T:VO.ResourceString">
      <summary>
        <para>Extract strings from a resource entity.</para>
      </summary>
    </member>

    <member name="M:VO.ResourceString.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Load a resource string from the resource entity.</para>
      </summary>
      <param name="xResourceID">

      </param>
      <param name="nMaxLen">

      </param>
    </member>
    <member name="M:VO.ResourceString.AsString">
      <summary>
        <para>Return the text stored in a resource string.</para>
      </summary>
    </member>
    <member name="P:VO.ResourceString.Length">
      <summary>
        <para>A numeric value representing the length — the number of characters — of a ResourceString object.</para>
      </summary>
    </member>
    <member name="P:VO.ResourceString.Value">
      <summary>
        <para>The value held in the ResourceString object.</para>
      </summary>
    </member>
    <member name="T:VO.RichEdit">
      <summary>
        <para>Create a rich edit control.</para>
      </summary>
    </member>

    <member name="M:VO.RichEdit.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a rich edit.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="kStyle">
      </param>
    </member>
    <member name="P:VO.RichEdit.Alignment">
      <summary>
        <para>A constant representing the paragraph alignment of the rich edit</para>
      </summary>
      <remarks>
        <para>One of the following constants representing the paragraph alignment of the rich edit:</para>
        <b>Constant</b>
        <b>Description</b>
        REPARA_CENTER Text is centered
        REPARA_LEFT Text is left-aligned
        REPARA_RIGHT Text is right-aligned
      </remarks>
    </member>
    <member name="P:VO.RichEdit.Background">
      <summary></summary>
    </member>
    <member name="P:VO.RichEdit.BackgroundColor">
      <summary>
        <para>A Color object representing the background color of the rich edit</para>
      </summary>
    </member>
    <member name="M:VO.RichEdit.CanPaste(XSharp.__Usual)">
      <summary>
        <para>Determine whether the rich edit can paste the specified clipboard format.</para>
      </summary>
      <param name="dwClipboardFormat">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.RichEdit.ControlFont">
      <summary>
        <para>A Font object representing the font selection for the text or a portion of the text in the rich edit.</para>
      </summary>
    </member>

    <member name="M:VO.RichEdit.EnableAdvancedTypography(XSharp.__Usual)">
      <param name="lEnable">
      </param>
    </member>
    <member name="M:VO.RichEdit.GetOption(XSharp.__Usual)">
      <summary>
        <para>Determine the status of a particular option for the rich edit.</para>
      </summary>
      <param name="kOption">
      </param>
      <returns>
        <para>TRUE if the option is enabled; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.RichEdit.GetTabStops">
      <summary>
        <para>Set the TabStops for a rich edit control.</para>
      </summary>
      <returns>
        <para>An array of tab values.</para>
      </returns>
    </member>
    <member name="M:VO.RichEdit.GetTextRange(XSharp.__Usual)">
      <summary>
        <para>Retrieve a range of characters from the rich edit.</para>
      </summary>
      <param name="oRange">
      </param>
      <returns>
        <para>A string representing the retrieved range of characters.</para>
      </returns>
    </member>
    <member name="M:VO.RichEdit.GetWordBreak(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Locate a particular type of word break in the rich edit.</para>
      </summary>
      <param name="nCharPos">
      </param>
      <param name="kWordBreakType">
      </param>
      <returns>
        <para>
          If &lt;<i>kWordBreakType</i>&gt; is REGWB_ISDELIMITER this function returns a logical value that is TRUE if the specified character is a delimiter and FALSE
          otherwise. If &lt;<i>kWordBreakType</i>&gt; is any other value, the function returns a numeric value representing the character position of the word break.
        </para>
      </returns>
    </member>
    <member name="M:VO.RichEdit.HideSelection(XSharp.__Usual)">
      <summary>
        <para>Hide the selection in the rich edit.</para>
      </summary>
      <param name="lTemporary">
      </param>
    </member>
    <member name="M:VO.RichEdit.LineFromCharacter(XSharp.__Usual)">
      <param name="nCharacterPos">
      </param>
    </member>
    <member name="M:VO.RichEdit.LoadFromFile(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Load data from an RTF file into the rich edit control.</para>
      </summary>
      <param name="cFileName">
      </param>
      <param name="dwFormat">
      </param>
      <returns>
        <para>TRUE, if successful; otherwise FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.RichEdit.Margin(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set the margins for the currently selected text in the rich edit control.</para>
      </summary>
      <param name="nStart">
      </param>
      <param name="nRight">
      </param>
      <param name="nOffset">
      </param>
      <returns>
        <para>TRUE, if successful; otherwise FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.RichEdit.Numbering">
      <summary>
        <para>A constant representing the type of paragraph numbering currently associated with the rich edit:</para>
      </summary>
      <remarks>
        <para>One of the following constants representing the type of paragraph numbering currently associated with the rich edit:</para>
        <list type="table">
          <listheader>
            <term>Constant</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>REPARA_NUMBER</term>
            <description> Paragraphs are numbered</description>
          </item>
          <item>
            <term>REPARA_BULLET</term>
            <description>Paragraphs are bulleted</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:VO.RichEdit.PasteSpecial(XSharp.__Usual)">
      <summary>
        <para>Paste a particular clipboard format in the rich edit.</para>
      </summary>
      <param name="dwClipboardFormat">
      </param>
    </member>
    <member name="P:VO.RichEdit.PrimaryIndent">
      <summary>
        <para>A numeric value representing the indent of the first line of a paragraph in the rich edit.</para>
      </summary>
    </member>

    <member name="M:VO.RichEdit.Print(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Print the contents of the rich edit.</para>
      </summary>
      <param name="oPrintingDevice">
      </param>
      <param name="oRange">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.RichEdit.Protected">
      <summary>
        <para>A logical value that is TRUE if the text in the rich edit is protected from modification.</para>
      </summary>
    </member>
    <member name="P:VO.RichEdit.RightMargin">
      <summary>
        <para>A numeric value representing the right margin of the rich edit.</para>
      </summary>
    </member>
    <member name="M:VO.RichEdit.SaveToFile(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Save the current contents of the control to an RTF file.</para>
      </summary>
      <param name="cFileName">
      </param>
      <param name="dwFormat">
      </param>
      <returns>
        <para>TRUE, if successful; otherwise FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.RichEdit.SecondaryIndent">
      <summary>
        <para>A numeric value representing the indent of the second and subsequent lines of a paragraph in the rich edit.</para>
      </summary>
    </member>
    <member name="M:VO.RichEdit.Seek(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Search the rich edit for the specified text.</para>
      </summary>
      <param name="cText">
      </param>
      <param name="oRange">
      </param>
      <param name="lMatchCase">
      </param>
      <param name="lWholeWord">
      </param>
      <param name="lReturnRange">
      </param>
      <param name="lSearchUp">
      </param>
      <returns>
        <para>
          If &lt;<i>lReturnRange</i>&gt; is TRUE, the range of characters in which the text was found. If &lt;<i>lReturnRange</i>&gt; is FALSE, the character position
          where the text was found.
        </para>
      </returns>
    </member>
    <member name="P:VO.RichEdit.SelectedText">
      <summary>
        <para>A string representing the currently selected text in the rich edit.</para>
      </summary>
    </member>
    <member name="P:VO.RichEdit.Selection">
      <summary>
        <para>A Selection object representing the currently selected text in the rich edit.</para>
      </summary>
    </member>
    <member name="P:VO.RichEdit.SelectionType">
      <summary>
        <para>A constant representing the type of the current selection in the rich edit</para>
      </summary>
      <remarks>
        <para>One of the following constants representing the type of the current selection in the rich edit:</para>
        <list type="table">
          <listheader>
            <term>Constant</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>RESEL_EMPTY</term>
            <description>Current selection is empty</description>
          </item>
          <item>
            <term>RESEL_TEXT</term>
            <description>Current selection is text</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:VO.RichEdit.SetOption(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set an option for the rich edit.</para>
      </summary>
      <param name="kOption">
      </param>
      <param name="symOperation">
      </param>
    </member>
    <member name="M:VO.RichEdit.SetTabStops(XSharp.__Usual)">
      <summary>
        <para>Set the TabStops for a rich edit control.</para>
      </summary>
      <param name="aTabStops">
      </param>
    </member>
    <member name="M:VO.RichEdit.ShowSelection(XSharp.__Usual)">
      <summary>
        <para>Show the selection in the rich edit.</para>
      </summary>
      <param name="lTemporary">
      </param>
    </member>
    <member name="P:VO.RichEdit.TabStopCount">
      <summary>
        <para>A numeric value representing the number of tab stops in the rich edit.</para>
      </summary>
    </member>
    <member name="P:VO.RichEdit.TextColor">
      <summary>
        <para>A Color object representing the text color of the rich edit.</para>
      </summary>
    </member>
    <member name="P:VO.RichEdit.TextLimit">
      <summary>
        <para>A numeric value representing the maximum amount of text in the rich edit. The default is 32 KB.</para>
      </summary>
    </member>
    <member name="P:VO.RichEdit.Value">
      <summary>
        <para>A string representing the text contents of the rich edit</para>
      </summary>
    </member>
    <member name="P:VO.RichEdit.ValueAsText">
      <summary></summary>
    </member>
    <member name="T:VO.RichEditProtectEvent">
      <summary>
        <para>Provide information about a rich edit protection event, which is generated when the user attempts to edit protected text in a rich edit control.</para>
      </summary>
    </member>
    <member name="M:VO.RichEditProtectEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.RichEditProtectEvent.Selection">
      <summary></summary>
    </member>
    <member name="P:VO.RichEditProtectEvent.SelectionRange">
      <summary></summary>
    </member>
    <member name="T:VO.RichEditSelectionEvent">
      <summary>
        <para>Provide information about a rich edit selection event, which is generated when the selection in a rich edit control is changed.</para>
      </summary>
    </member>
    <member name="M:VO.RichEditSelectionEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.RichEditSelectionEvent.Selection">
      <summary></summary>
    </member>
    <member name="P:VO.RichEditSelectionEvent.SelectionRange">
      <summary></summary>
    </member>
    <member name="P:VO.RichEditSelectionEvent.SelectionType">
      <summary></summary>
    </member>
    <member name="T:VO.SaveAsDialog">
      <summary>
        <para>Provide standard save-file dialog facilities.</para>
      </summary>
    </member>
    <member name="M:VO.SaveAsDialog.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a standard SaveAs dialog box.</para>
      </summary>
      <param name="oOwnWnd">
      </param>
      <param name="cInitPath">
      </param>
      <param name="dwFlag">
      </param>
    </member>
    <member name="T:VO.ScrollBar">
      <summary>
        <para>Provide the base class from which all scroll bars are subclassed.</para>
      </summary>
    </member>

    <member name="M:VO.ScrollBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a scroll bar.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="lDataAware">
      </param>
    </member>
    <member name="P:VO.ScrollBar.BlockSize">
      <summary>
        <para>
          A numeric value representing the block size of the scroll bar.
        </para>
      </summary>
      <remarks>
        <para>
          A numeric value representing the block size of the scroll bar. The block size is used to calculate the new position of the thumb when a BLOCKINCREMENT or
          BLOCKDECREMENT ScrollEvent occurs, which is one of the event types recognized by the ScrollEvent:Type access. The BlockSize is initially set to 10, but may be
          modified at runtime to change the behavior of the scroll bar.
        </para>
      </remarks>
    </member>
    <member name="M:VO.ScrollBar.Create">
      <inheritdoc />
    </member>
    <member name="M:VO.ScrollBar.Hide">
      <summary></summary>
    </member>
    <member name="P:VO.ScrollBar.PageSize">
      <summary></summary>
    </member>
    <member name="P:VO.ScrollBar.Range">
      <summary>
        <para>A range object representing the minimum and maximum values currently in use for the thumb of a scroll bar.</para>
      </summary>
    </member>
    <member name="M:VO.ScrollBar.SetInfo(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set all scrollbar properties with one method call.</para>
      </summary>
      <param name="oScrollRange">
      </param>
      <param name="nThumbPosition">
      </param>
      <param name="nPageSize">
      </param>
      <param name="lDisableNoScroll">
      </param>
    </member>
    <member name="M:VO.ScrollBar.SetThumbPosition(XSharp.__Usual,XSharp.__Usual)">
      <param name="nPosition">
      </param>
      <param name="lNotifyOwner">
      </param>
    </member>
    <member name="M:VO.ScrollBar.Show">
      <summary></summary>
    </member>
    <member name="P:VO.ScrollBar.TextValue">
      <summary>
        <para>
          A string representing the thumb position of the scroll bar.
        </para>
      </summary>
      <remarks>
        <para>
          A string representing the thumb position of the scroll bar. For example, the value can be "42". The ScrollBar:TextValue assign also changes
          ScrollBar:ThumbPosition and ScrollBar:Value. If the value to be assigned is outside the allowable Min-Max range associated with the scroll bar, the value is
          modified so it is either the Min or Max value.
        </para>
      </remarks>
    </member>
    <member name="P:VO.ScrollBar.ThumbPosition">
      <summary>
        <para>
          A numeric value (short integer) representing the current thumb position of the scroll bar.
        </para>
      </summary>
      <remarks>
        <para>
          A numeric value (short integer) representing the current thumb position of the scroll bar. For example, the value can be the number 42. The ThumbPosition
          assign also changes ScrollBar:TextValue and ScrollBar:Value. If the value to be assigned is outside the allowable range associated with the scroll bar, the
          value is modified so it is either the Min or Max value defined for the Range object. When the scroll bar is created, the ThumbPosition is initialized to 99, or
          if 99 exceeds the Max value, to the Max value.
        </para>
      </remarks>
    </member>
    <member name="P:VO.ScrollBar.UnitSize">
      <summary>
        <para>
          A numeric value representing the unit size currently associated with the scroll bar.
        </para>
      </summary>
      <remarks>
        <para>
          A numeric value representing the unit size currently associated with the scroll bar. The unit size is used to calculate the new thumb position when a
          UNITINCREMENT or UNITDECREMENT ScrollEvent occurs. When a scroll bar is created, ScrollBar:UnitSize is initialized to 1. The ScrollBar:UnitSize can be changed
          at runtime to alter the behavior of the scroll bar.
        </para>
      </remarks>
    </member>
    <member name="P:VO.ScrollBar.Value">
      <summary>
        <para>
          A numeric value representing the thumb position of the scroll bar.
        </para>
      </summary>
      <remarks>
        <para>
          A numeric value representing the thumb position of the scroll bar. For example, the value can be the number 42. The ScrollBar:Value assign also changes
          ScrollBar:TextValue and ScrollBar:ThumbPosition. If the value to be assigned is outside the allowable Min-Max range associated with the scroll bar, the value
          is modified so it is either the Min or Max value.
        </para>
      </remarks>
    </member>
    <member name="T:VO.ScrollEvent">
      <summary>
        <para>Provide information about a ScrollEvent, generated when a scroll bar is manipulated.</para>
      </summary>
    </member>
    <member name="M:VO.ScrollEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.ScrollEvent.IsWindowScroll">
      <summary>
        <para>A logical value indicating whether the scroll bar which generated this ScrollEvent was a window scroll bar or a free-standing scroll bar.</para>
      </summary>
      <remarks>
        <para>If a window scroll bar generated this ScrollEvent, TRUE is returned; if it was a free-standing scroll bar, FALSE is returned.</para>
      </remarks>
    </member>
    <member name="P:VO.ScrollEvent.OldPosition">
      <summary>
        <para>
          A numeric value representing the old position of the thumb in a scroll bar when this ScrollEvent occurred.
        </para>
      </summary>
      <remarks>
        <para>
          A numeric value representing the old position of the thumb in a scroll bar when this ScrollEvent occurred (that is, where the thumb was located
          <i>before</i> being manipulated by the user).
        </para>
        <para>By subtracting ScrollEvent:Position from ScrollEvent:OldPosition, the relative difference can be used for scrolling the thumb.</para>
      </remarks>
    </member>
    <member name="P:VO.ScrollEvent.Position">
      <summary>
        <para>
          A numeric value representing the desired position of the thumb in a scroll bar when this ScrollEvent occurred.
        </para>
      </summary>
      <remarks>
        <para>
          A numeric value representing the desired position of the thumb in a scroll bar when this ScrollEvent occurred (that is, where the user has newly positioned
          the thumb).
        </para>
        <para>By subtracting ScrollEvent:Position from ScrollEvent:OldPosition, the relative difference can be used for scrolling the thumb.</para>
      </remarks>
    </member>
    <member name="P:VO.ScrollEvent.ScrollBar">
      <summary>
        <para>The scroll bar that generated this ScrollEvent.</para>
      </summary>
    </member>
    <member name="P:VO.ScrollEvent.ScrollBarID">
      <summary>
        <para>The ID of the scroll bar that generated this ScrollEvent.</para>
      </summary>
    </member>
    <member name="P:VO.ScrollEvent.TYPE">
      <summary>
        <para>A string representing the type of scrolling action that took place when this ScrollEvent occurred.</para>
      </summary>
      <remarks>
        <para>One of the following values are returned:</para>
        <list type="table">
          <listheader>
            <term>Constant</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>BLOCKDECREMENT</term>
            <description>
              The thumb position has been decremented by one block. In Windows, one mouse click on the shaded area to the left of the thumb
              position on a horizontal scroll bar, or above the thumb position on a vertical scroll bar, is a block decrement.
            </description>
          </item>
          <item>
            <term>BLOCKINCREMENT</term>
            <description>
              The thumb position has been incremented by one block. In Windows, one mouse click on the shaded area to the right of the thumb
              position on a horizontal scroll bar, or below the thumb position on a vertical scroll bar, is a block increment.
            </description>
          </item>
          <item>
            <term>SCROLLEND</term>
            <description>Scrolling has finished.</description>
          </item>
          <item>
            <term>SCROLLTHUMBDRAG</term>
            <description>The thumb is being dragged (up or down).</description>
          </item>
          <item>
            <term>UNITDECREMENT</term>
            <description>
              The thumb position has been decremented by one unit. In Windows, one mouse click on the left arrow of a horizontal scroll bar,
              or on the up arrow for a vertical scroll bar, is a unit decrement.
            </description>
          </item>
          <item>
            <term>UNITINCREMENT</term>
            <description>
              The thumb position has been incremented by one unit. In Windows, one mouse click on the right arrow of a horizontal scroll bar,
              or on the down arrow of a vertical scroll bar, is a unit increment.
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:VO.SelectDialog">
      <summary>
        <para>Present the user with a standard color palette dialog box.</para>
      </summary>
    </member>
    <member name="M:VO.SelectDialog.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a standard color selection dialog.</para>
      </summary>
      <param name="uOwner">
      </param>
      <param name="oColor">
      </param>
    </member>
    <member name="T:VO.Selection">
      <summary>
        <para>Create a selection, which represents the start and end of a text selection in an edit control as an ordered pair.</para>
      </summary>
    </member>
    <member name="M:VO.Selection.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a selection.</para>
      </summary>
      <param name="nStart">
      </param>
      <param name="nFinish">
      </param>
    </member>
    <member name="P:VO.Selection.Finish">
      <summary>
        <para>A numeric value representing the finish value in a selection.</para>
      </summary>
    </member>
    <member name="P:VO.Selection.Start">
      <summary>
        <para>A numeric value representing the start value in a selection.</para>
      </summary>
    </member>
    <member name="T:VO.SelectionSlider">
      <summary>
        <para>Create a selection slider.</para>
      </summary>
    </member>
    <member name="M:VO.SelectionSlider.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a selection slider.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
    </member>
    <member name="M:VO.SelectionSlider.ClearSelection">
      <summary></summary>
    </member>
    <member name="P:VO.SelectionSlider.SelectionRange">
      <summary></summary>
    </member>
    <member name="T:VO.ShapeObject">
      <summary>
        <para>Provide an intermediate class from which all two-dimensional objects are subclassed.</para>

      </summary>
      <remarks>
        <para>
          <b>
            <i>Important!</i>
            <br />
          </b>
          <i>
            ShapeObject is an abstract class and should not be used directly — instead, use one of its subclasses, which include
            BitmapObject, EllipseObject, and RectangleObject.
          </i>
        </para>
      </remarks>
    </member>
    <member name="M:VO.ShapeObject.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a ShapeObject object.</para>
      </summary>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="oPen">
      </param>
      <param name="oBrush">
      </param>
    </member>
    <member name="P:VO.ShapeObject.BoundingBox">
      <summary>
        <para>A bounding box representing the smallest rectangle that fully encloses the ShapeObject object.</para>
      </summary>
    </member>
    <member name="P:VO.ShapeObject.Brush">
      <summary>
        <para>A brush currently in use by the ShapeObject object to draw itself.</para>
      </summary>
    </member>
    <member name="M:VO.ShapeObject.Destroy">
      <summary></summary>
    </member>
    <member name="P:VO.ShapeObject.Pen">
      <summary>
        <para>A pen currently in use by the ShapeObject object to draw itself.</para>
      </summary>
    </member>
    <member name="P:VO.ShapeObject.Size">
      <summary>
        <para>A dimension representing the current size of the ShapeObject object, in canvas coordinates.</para>
      </summary>
    </member>
    <member name="T:VO.ShellWindow">
      <summary>
        <para>Create a shell window, which provides MDI support for your applications.</para>
      </summary>
    </member>
    <member name="M:VO.ShellWindow.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct a shell window.</para>
      </summary>
      <param name="oOwner">
      </param>
    </member>
    <member name="M:VO.ShellWindow.Arrange(XSharp.__Usual)">
      <summary>
        <para>Tile, iconize, or cascade all the child windows that are currently open in this shell window.</para>
      </summary>
      <param name="kArrangeStyle">
      </param>
    </member>
    <member name="P:VO.ShellWindow.ChildToolBarLocation">
      <summary></summary>
    </member>
    <member name="M:VO.ShellWindow.CloseAllChildren">
      <summary></summary>
    </member>
    <member name="M:VO.ShellWindow.Default(XSharp.__Usual)">
      <param name="oEvent">
      </param>
    </member>
    <member name="M:VO.ShellWindow.Destroy">
      <inheritdoc />
    </member>
    <member name="M:VO.ShellWindow.Dispatch(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="M:VO.ShellWindow.EnableOleStatusMessages(XSharp.__Usual)">
      <param name="lEnable">

      </param>
    </member>
    <member name="M:VO.ShellWindow.GetActiveChild">
      <summary></summary>
    </member>
    <member name="M:VO.ShellWindow.Handle(XSharp.__Usual)">
      <param name="nHandleType">

      </param>
    </member>
    <member name="M:VO.ShellWindow.HelpRequest(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.ShellWindow.Menu">
      <summary></summary>
    </member>
    <member name="M:VO.ShellWindow.OnOleStatusMessage(XSharp.__Usual)">
      <param name="cMsgString">

      </param>
    </member>
    <member name="M:VO.ShellWindow.Resize(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.ShellWindow.StatusBar">
      <summary></summary>
    </member>
    <member name="P:VO.ShellWindow.ToolBar">
      <summary></summary>
    </member>
    <member name="M:VO.ShellWindow.ToolBarHeightChanged(XSharp.__Usual)">
      <param name="oControlNotifyEvent">

      </param>
    </member>
    <member name="T:VO.SingleLineEdit">
      <summary>
        <para>
          Create a single-line edit control for displaying and entering information to a variable or field in a server. Single-line edit controls may be bound to a
          data server field of any type (character, date, logical, numeric, or memo).
        </para>
      </summary>
    </member>

    <member name="M:VO.SingleLineEdit.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a single-line edit control.</para>
      </summary>
      <param name="oOwner">

      </param>
      <param name="xID">

      </param>
      <param name="oPoint">

      </param>
      <param name="oDimension">

      </param>
      <param name="kStyle">

      </param>
    </member>
    <member name="P:VO.SingleLineEdit.AutoFocusChange">
      <summary></summary>
    </member>
    <member name="M:VO.SingleLineEdit.CreateFormattedString(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="cPicture">
      </param>
      <param name="cType">
      </param>
      <param name="cDefTempl">
      </param>
    </member>
    <member name="M:VO.SingleLineEdit.Dispatch(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.SingleLineEdit.FieldSpec">
      <summary></summary>
    </member>
    <member name="M:VO.SingleLineEdit.FocusChange(XSharp.__Usual)">
      <param name="oFocusChangeEvent">

      </param>
    </member>
    <member name="P:VO.SingleLineEdit.FocusSelect">
      <summary>
        <para>Controls the selection when the edit control gets focus. </para>
      </summary>
      <remarks>
        <para>Valid values are:</para>
        <list type="table">
          <item>
            <term>FSEL_ALL</term>
            <description>All of the edit control's contents are selected.</description>
          </item>
          <item>
            <term>FSEL_TRIM</term>
            <description>The trimmed content is selected. This is the default.</description>
          </item>
          <item>
            <term>FSEL_HOME</term>
            <description>Nothing is selected; the cursor is positioned at the beginning of the edit control.</description>
          </item>
          <item>
            <term>FSEL_END</term>
            <description>Nothing is selected; the cursor is positioned at the end of the edit control.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:VO.SingleLineEdit.OverWrite">
      <summary>
        <para>
          A constant representing the overwrite mode for a single-line edit control.
        </para>
      </summary>
      <remarks>
        <para>
          A constant representing the overwrite mode for a single-line edit control. This property affects only an edit control with an active PICTURE clause. Valid
          values are:
        </para>
        <list type="table">
          <item>
            <term>OVERWRITE_NEVER</term>
            <description> Edit control is always in INSERT mode.</description>
          </item>
          <item>
            <term>OVERWRITE_ONKEY</term>
            <description> The mode depends on the state of the INSERT key.</description>
          </item>
          <item>
            <term>OVERWRITE_ALWAYS</term>
            <description> Edit control is always in OVERWRITE mode.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:VO.SingleLineEdit.Picture">
      <summary>
        <para>
          A picture string for a single-line edit control.
        </para>
      </summary>
      <remarks>
        <para>
          If there is a field specification attached to the single-line edit control, the picture should be provided
          in the field specification and not via the Properties window in the window editor.
        </para>
        <para>The use of the SingleLineEdit:Picture assign will overwrite the field specification's picture string.</para>
      </remarks>
    </member>
    <member name="P:VO.SingleLineEdit.ScrollMode">
      <summary>
        <para>Specifies the scrolling behavior </para>
      </summary>
      <remarks>
        <para>Specifies the scrolling behavior (e.g., when the Delete key is pressed). Valid values are:</para>
        <list type="table">
          <item>
            <term>
              SCRMODE_FULL
            </term>
            <description>Scrolls through all of the edit control's contents. This is the default.</description>
          </item>
          <item>
            <term>
              SCRMODE_PART
            </term>
            <description>Partial scrolling stops at non-edit template characters.</description>
          </item>
          <item>
            <term>SCRMODE_NO</term>
            <description>No scrolling.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:VO.SingleLineEdit.TextValue">
      <summary></summary>
    </member>
    <member name="M:VO.SingleLineEdit.Undo">
      <summary></summary>
    </member>
    <member name="T:VO.Slider">
      <summary>
        <para>Create a slider control.</para>
      </summary>
    </member>
    <member name="M:VO.Slider.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a slider.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
    </member>
    <member name="P:VO.Slider.BlockSize">
      <summary>
        <para>
          A numeric value determining the block size (or page size) of the slider control.
        </para>
      </summary>
      <remarks>
        <para>
          The block size affects how much the slider moves when the user clicks next to the thumb.
        </para>
      </remarks>
    </member>
    <member name="P:VO.Slider.ChannelBoundingBox">
      <summary>
        <para>
          A BoundingBox object determining the size and position of the bounding rectangle for a slider control's channel.
        </para>
      </summary>
      <remarks>
        <para>
          A BoundingBox object determining the size and position of the bounding rectangle for a slider control's channel. (The channel is the area over which the
          thumb moves and which contains the highlight when a range is selected.)
        </para>
      </remarks>
    </member>
    <member name="M:VO.Slider.ClearTicks">
      <summary>
        <para>Clear the slider of all ticks.</para>
      </summary>
    </member>
    <member name="M:VO.Slider.Create">
      <inheritdoc />
    </member>
    <member name="M:VO.Slider.GetTickPos(XSharp.__Usual)">
      <summary>
        <para>Retrieves the position of a tick mark in a slider control.</para>
      </summary>
      <param name="nIndex">
      </param>
      <returns>
        <para>
          The position of the specified tick mark or -1 if &lt;<i>nIndex</i>&gt; does not specify a valid index.
        </para>
      </returns>
    </member>
    <member name="P:VO.Slider.Range">
      <summary>
        <para>A Range object representing the minimum and maximum values currently in use for the thumb of the slider.</para>
      </summary>
    </member>
    <member name="M:VO.Slider.SetTickPos(XSharp.__Usual)">
      <summary>
        <para>Sets the position of a tick mark in a slider control.</para>
      </summary>
      <param name="nPosition">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.Slider.ThumbBoundingBox">
      <summary>
        <para>A BoundingBox object determining the size and position of the bounding rectangle for the thumb in a slider control.</para>
      </summary>
    </member>
    <member name="P:VO.Slider.ThumbLength">
      <summary>
        <para>A numeric value determining the length of the thumb in a slider control</para>
      </summary>
    </member>
    <member name="P:VO.Slider.ThumbPosition">
      <summary>
        <para>A numeric value determining the current position of the thumb in a slider control.</para>
      </summary>
    </member>
    <member name="P:VO.Slider.TickAlignment">
      <summary>
        <para>A symbol that describes the alignment of ticks on the slider.</para>
      </summary>
      <remarks>
        <para>A symbol that describes the alignment of ticks on the slider.</para>
        <para>Valid values for a horizontal slider are</para>
        <list type="bullet">
          <item>#Top</item>
          <item>#Bottom</item>
          <item>#Both</item>
        </list>
        <para>Valid values for a vertical slider are</para>
        <list type="bullet">
          <item>#Left</item>
          <item>#Right</item>
          <item>#Both</item>
        </list>
      </remarks>
    </member>
    <member name="P:VO.Slider.TickCount">
      <summary>
        <para>A numeric value representing the number of ticks on the slider.</para>
      </summary>
    </member>
    <member name="P:VO.Slider.UnitSize">
      <summary>
        <para>
          A numeric value determining the unit size (or line size) of the slider control.
        </para>
      </summary>
      <remarks>
        <para>
          The unit size affects how much the slider moves when the user presses the cursor left or cursor right key on the keyboard.
        </para>
      </remarks>
    </member>

    <member name="T:VO.SliderEvent">
      <summary>
        <para>
          Provide information about a slider event, which is generated when the thumb of a slider is dragged with the mouse or moved by pressing the Direction
          keys.
        </para>
      </summary>
    </member>
    <member name="M:VO.SliderEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.SliderEvent.IsWindowScroll">
      <summary></summary>
    </member>
    <member name="P:VO.SliderEvent.Slider">
      <summary>
        <para>The slider control object that generated this event.</para>
      </summary>
    </member>
    <member name="T:VO.Spinner">
      <summary>
        <para>Create a spinner.</para>
      </summary>
    </member>
    <member name="M:VO.Spinner.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a spinner.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="kStyle">
      </param>
      <param name="lDataAware">
      </param>
    </member>
    <member name="P:VO.Spinner.Client">
      <summary>
        <para>The client control of the spinner.</para>
      </summary>
    </member>
    <member name="P:VO.Spinner.IsHexBased">
      <summary></summary>
    </member>
    <member name="P:VO.Spinner.Position">
      <summary>
        <para>The numeric value of the spinner.</para>
      </summary>
    </member>
    <member name="P:VO.Spinner.Range">
      <summary></summary>
    </member>
    <member name="P:VO.Spinner.ThumbPosition">
      <summary></summary>
    </member>
    <member name="T:VO.SpinnerEvent">
      <summary>
        <para>Provide information about a spinner event, which is generated when either of the spinner's arrow buttons is clicked.</para>
      </summary>
    </member>
    <member name="M:VO.SpinnerEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.SpinnerEvent.OldPosition">
      <summary>
        <para>A numeric value representing the position of the spinner associated with this event immediately before the event occurred.</para>
      </summary>
    </member>
    <member name="P:VO.SpinnerEvent.OldValue">
      <summary>
        <para>The value of the spinner associated with this event immediately before the event occurred.</para>
      </summary>
    </member>
    <member name="P:VO.SpinnerEvent.Position">
      <summary>
        <para>A numeric value representing the new position of the spinner associated with this event.</para>
      </summary>
    </member>
    <member name="P:VO.SpinnerEvent.Spinner">
      <summary>
        <para>The spinner control object that generated this event.</para>
      </summary>
    </member>
    <member name="P:VO.SpinnerEvent.SpinnerID">
      <summary>
        <para>The numeric ID of the spinner control object that generated this event.</para>
      </summary>
    </member>
    <member name="P:VO.SpinnerEvent.Type">
      <summary>
        <para>A constant representing the type of action that took place when this event occurred.</para>
      </summary>
      <remarks>
        <para>One of the following constants representing the type of action that took place when this event occurred:</para>
        <list type="table">
          <listheader>
            <term>Constant</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>UNITDECREMENT</term>
            <description>The position has been decremented by a single unit.</description>
          </item>
          <item>
            <term>UNITINCREMENT</term>
            <description> The position has been incremented by a single unit.</description>
          </item>
          <item>
            <term>SCROLLTOTOPLEFT</term>
            <description>Spinning has reached the top-most position in a vertical spinner or the left-most position in a horizontal spinner.</description>
          </item>
          <item>
            <term>SCROLLTOBOTTOMRIGHT</term>
            <description>Spinning has reached the bottom-most position in a vertical spinner or the right-most position in a horizontal spinner.</description>
          </item>
          <item>
            <term>SCROLLEND</term>
            <description>Spinning has finished.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:VO.SpinnerEvent.Value">
      <summary>
        <para>The new value of the spinner associated with this event.</para>
      </summary>
    </member>
    <member name="T:VO.SplitWindow">
      <summary>
        <para>Create a split window.</para>
      </summary>
    </member>
    <member name="M:VO.SplitWindow.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a SplitWindow object.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="lHorizontalDrag">
      </param>
      <param name="lVerticalDrag">
      </param>
      <param name="kAlignment">
      </param>
    </member>
    <member name="P:VO.SplitWindow.Background">
      <summary>
        <para>The background brush currently in use by the split window.</para>
      </summary>
    </member>
    <member name="M:VO.SplitWindow.ChangeBackground(XSharp.__Usual,XSharp.__Usual)">
      <param name="oBrush">
      </param>
      <param name="kWhere">
      </param>
    </member>
    <member name="M:VO.SplitWindow.Destroy">
      <summary></summary>
    </member>
    <member name="M:VO.SplitWindow.Dispatch(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="M:VO.SplitWindow.EnableStatusBar(XSharp.__Usual)">
      <param name="lEnable">
      </param>
    </member>
    <member name="M:VO.SplitWindow.GetAllChildren">
      <summary></summary>
    </member>
    <member name="M:VO.SplitWindow.GetPaneClient(XSharp.__Usual)">
      <param name="nPane">
      </param>
    </member>
    <member name="M:VO.SplitWindow.GetPaneSize(XSharp.__Usual)">
      <summary>
        <para>Get a Dimension object that represents the current size of a pane.</para>
      </summary>
      <param name="nPane">
      </param>
      <returns>
        <para>A Dimension object representing the split window pane's size.</para>
      </returns>
    </member>
    <member name="M:VO.SplitWindow.HidePane(XSharp.__Usual)">
      <summary>
        <para>Hide a particular pane or all panes of a split window.</para>
      </summary>
      <param name="nPane">
      </param>
    </member>
    <member name="P:VO.SplitWindow.HorizontalAlign">
      <summary>
        <para>A logical value that is TRUE if horizontal split bars are aligned in the split window.</para>
      </summary>
    </member>
    <member name="P:VO.SplitWindow.HorizontalDrag">
      <summary>
        <para>A logical value that is TRUE if dragging of horizontal split bars is enabled in the split window.</para>
      </summary>
    </member>
    <member name="P:VO.SplitWindow.Layout">
      <summary>
        <para>
          A Dimension object that represents the number and visual layout of the panes in the split window.
        </para>
      </summary>
      <remarks>
        <para>
          The width of the dimension represents the number of
          horizontally aligned panes, while the height of the dimension represents the number of vertically aligned panes.
        </para>
      </remarks>
    </member>
    <member name="M:VO.SplitWindow.Resize(XSharp.__Usual)">
      <param name="oResizeEvent">

      </param>
    </member>
    <member name="M:VO.SplitWindow.RestoreUpdate">
      <summary></summary>
    </member>
    <member name="M:VO.SplitWindow.SetPaneClient(XSharp.__Usual,XSharp.__Usual)">
      <param name="oWindow">
      </param>
      <param name="nPane">
      </param>
    </member>
    <member name="M:VO.SplitWindow.SetPaneSize(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set a Dimension object representing the current size of a pane.</para>
      </summary>
      <param name="oDimension">
      </param>
      <param name="nPane">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.SplitWindow.Show(XSharp.__Usual,XSharp.__Usual)">
      <param name="nShowState">
      </param>
      <param name="nPane">
      </param>
    </member>
    <member name="M:VO.SplitWindow.ShowPane(XSharp.__Usual)">
      <summary>
        <para>Show a particular pane or all panes of a split window.</para>
      </summary>
      <param name="nPane">
      </param>
    </member>
    <member name="P:VO.SplitWindow.SplitBarBackground">
      <summary></summary>
    </member>
    <member name="P:VO.SplitWindow.SplitBarFrameBackground">
      <summary></summary>
    </member>
    <member name="M:VO.SplitWindow.SuspendUpdate">
      <summary></summary>
    </member>
    <member name="P:VO.SplitWindow.ToolBar">
      <summary></summary>
    </member>
    <member name="M:VO.SplitWindow.ToolBarHeightChanged(XSharp.__Usual)">
      <param name="oControlNotifyEvent">
      </param>
    </member>
    <member name="P:VO.SplitWindow.VerticalAlign">
      <summary>
        <para>A logical value that is TRUE if vertical split bars are aligned in the split window.</para>
      </summary>
    </member>
    <member name="P:VO.SplitWindow.VerticalDrag">
      <summary>
        <para>A logical value that is TRUE if dragging of vertical split bars is enabled in the split window.</para>
      </summary>
    </member>
    <member name="T:VO.StandardColorDialog">
      <summary>
        <para>Provide the base class from which all color dialog boxes are subclassed.</para>
      </summary>
      <remarks>
        <para>
          <b>
            <i>Important!</i>
            <br />
          </b>
          <i>
            StandardColorDialog is an abstract class and should not be used directly — instead, use one of its subclasses, which
            include PaletteDialog and SelectDialog.
          </i>
        </para>
      </remarks>
    </member>
    <member name="M:VO.StandardColorDialog.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct a standard color dialog.</para>
      </summary>
      <param name="uOwner">
      </param>

    </member>

    <member name="M:VO.StandardColorDialog.Color">
      <summary></summary>
    </member>
    <member name="M:VO.StandardColorDialog.Destroy">
      <summary></summary>
    </member>
    <member name="M:VO.StandardColorDialog.Show">
      <summary></summary>
    </member>
    <member name="T:VO.StandardDialog">
      <summary>
        <para>Provide the base class from which all standard dialog boxes are subclassed.</para>
      </summary>
      <remarks>
        <para>
          <b>
            <i>Important!</i>
            <br />
          </b>
          <i>
            StandardDialog is an abstract class and should not be used directly — instead, use one of its subclasses, which
            include OpenDialog, PaletteDialog, SaveAsDialog, SelectDialog, and StandardFontDialog.
          </i>
        </para>
      </remarks>
    </member>

    <member name="M:VO.StandardDialog.#ctor">
      <summary>
        <para>Construct a standard dialog.</para>
      </summary>
    </member>
    <member name="T:VO.StandardFileDialog">
      <summary>
        <para>Provide the base class from which all standard file-oriented dialog boxes are subclassed.</para>
      </summary>
      <remarks>
        <para>
          <b>
            <i>Important!</i>
            <br />
          </b>
          <i>
            StandardFileDialog is an abstract class and should not be used directly — instead, use one of its subclasses, which
            include OpenDialog and SaveAsDialog.
          </i>
        </para>
      </remarks>
    </member>

    <member name="M:VO.StandardFileDialog.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a standard file dialog.</para>
      </summary>
      <param name="uOwner">
      </param>
      <param name="cInitPath">
      </param>
    </member>
    <member name="P:VO.StandardFileDialog.Caption">
      <summary>
        <para>Return or update the title displayed in the dialog window.</para>
      </summary>
    </member>
    <member name="P:VO.StandardFileDialog.DefExt">
      <summary>
        <para>Return or update the default file extension displayed in the dialog window.</para>
      </summary>
    </member>
    <member name="M:VO.StandardFileDialog.Destroy">
      <summary></summary>
    </member>
    <member name="M:VO.StandardFileDialog.Dispatch(XSharp.__Usual,XSharp.__Usual)">
      <param name="oEvt">
      </param>
      <param name="hDlg">
      </param>
    </member>
    <member name="P:VO.StandardFileDialog.DlgStyle">
      <summary></summary>
    </member>
    <member name="P:VO.StandardFileDialog.FileName">
      <summary>
        <para>A string representing the name of the file which the user selected. If the user cancels, the file name is NULL_STRING.</para>
      </summary>
    </member>
    <member name="P:VO.StandardFileDialog.FilterIndex">
      <summary></summary>
    </member>
    <member name="M:VO.StandardFileDialog.help">
      <summary>
        <para>
          Provide a means of displaying help when the HELP button is pressed.
        </para>
      </summary>
      <remarks>
        <para>
          The HELP push button will be displayed if the SetStyle(OFN_SHOWHELP) message has been sent to the dialog object.
        </para>
        <para>
          <b>Note:</b> If <i>&lt;oStandardFileDialog&gt;</i>:SetStyle(OFN_SHOWHELP) is used, a "Help" pushbutton is created on the dialog box. A
          <i>&lt;oStandardFileDialog&gt;</i>:Help() method needs to be created to process the event associated with a user clicking on the "Help" button.
        </para>
      </remarks>
      <returns>
        <para>
          A long integer indicating if the message is to be handled by the dialog box procedure in COMMDLG.DLL. The method returns a non zero value to indicate that
          no further processing of the message is required. It returns a zero to continue processing for this message.
        </para>
      </returns>
    </member>
    <member name="P:VO.StandardFileDialog.HideReadOnly">
      <summary></summary>
    </member>
    <member name="P:VO.StandardFileDialog.InitialDirectory">
      <summary></summary>
    </member>
    <member name="P:VO.StandardFileDialog.NoPlacesBar">
      <summary></summary>
    </member>
    <member name="P:VO.StandardFileDialog.ReadOnly">
      <summary>
        <para>A logical value indicating that the file's read-only attribute is set.</para>
      </summary>
    </member>
    <member name="M:VO.StandardFileDialog.SetFilter(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="uFilter">
      </param>
      <param name="uFilterDesc">
      </param>
      <param name="nIndex">
      </param>
    </member>
    <member name="M:VO.StandardFileDialog.SetStyle(XSharp.__Usual,XSharp.__Usual)">
      <param name="kStyle">
      </param>
      <param name="lOnOff">
      </param>
    </member>
    <member name="M:VO.StandardFileDialog.SetStyleEx(XSharp.__Usual,XSharp.__Usual)">
      <param name="kStyle">
      </param>
      <param name="lOnOff">
      </param>
    </member>
    <member name="M:VO.StandardFileDialog.Show">
      <summary>
        <para>Display a standard file dialog box. </para>
      </summary>
      <remarks>
        <para>To retrieve the value that the user selected, use the StandardFileDialog:FileName property.</para>
      </remarks>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="T:VO.StandardFolderDialog">
      <summary>
        <para>Encapsulate a standard folder dialog.</para>
      </summary>
    </member>
    <member name="M:VO.StandardFolderDialog.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a standard folder dialog.</para>
      </summary>

      <param name="sCaption">
      </param>
      <param name="sStartFolder">
      </param>
      <param name="kType">
      </param>
    </member>
    <member name="M:VO.StandardFolderDialog.DialogCallBack(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary></summary>
      <param name="hWnd">

      </param>
      <param name="uMsg">

      </param>
      <param name="lParam">

      </param>
      <param name="lpData">

      </param>
    </member>
    <member name="P:VO.StandardFolderDialog.FolderName">
      <summary></summary>
    </member>
    <member name="P:VO.StandardFolderDialog.Result">
      <summary>
        <para>The name of the selected folder or directory (same as StandardFolderDialog:FolderName).</para>
      </summary>
    </member>
    <member name="M:VO.StandardFolderDialog.Show">
      <summary></summary>
    </member>
    <member name="T:VO.StandardFontDialog">
      <summary>
        <para>Provide standard font dialog facilities.</para>
      </summary>
    </member>
    <member name="M:VO.StandardFontDialog.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct a standard font dialog.</para>
      </summary>
      <param name="uOwner">
      </param>
    </member>
    <member name="M:VO.StandardFontDialog.EnableANSI(XSharp.__Usual)">
      <summary></summary>
      <param name="bOnOff">
      </param>
    </member>
    <member name="M:VO.StandardFontDialog.EnableEffects(XSharp.__Usual)">
      <summary></summary>
      <param name="bOnOff">
      </param>
    </member>
    <member name="M:VO.StandardFontDialog.EnableFixedPitch(XSharp.__Usual)">
      <summary></summary>
      <param name="bOnOff">
      </param>
    </member>
    <member name="M:VO.StandardFontDialog.EnableTrueType(XSharp.__Usual)">
      <summary></summary>
      <param name="bOnOff">
      </param>
    </member>
    <member name="P:VO.StandardFontDialog.Flags">
      <summary>
        <para>A Windows API style constant to be set for the standard font dialog window.</para>
      </summary>
      <remarks>
        <para>
          <b>Note:</b> Consult your <i>Microsoft Win32 Software Development Kit</i> documentation for information on the available constants.
        </para>
      </remarks>
    </member>
    <member name="P:VO.StandardFontDialog.Font">
      <summary>
        <para>The font that was last selected in the standard font dialog window.</para>
      </summary>
    </member>
    <member name="P:VO.StandardFontDialog.FontColor">
      <summary>
        <para>The font color that was last selected in the standard font dialog window. This is only evident after EnableEffects(TRUE) has been called.</para>
      </summary>
    </member>
    <member name="M:VO.StandardFontDialog.Show">
      <summary>
        <para>Display a standard font dialog. To retrieve the value that the user selected, use the StandardFontDialog:Font access.</para>
      </summary>
      <returns>
        <para>TRUE if user chooses a font, FALSE if the user presses CANCEL.</para>
      </returns>
    </member>
    <member name="T:VO.StatusBar">
      <summary>
        <para>Create a status bar for use in a window.</para>
      </summary>
    </member>
    <member name="M:VO.StatusBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a status bar.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
    </member>
    <member name="M:VO.StatusBar.AddItem(XSharp.__Usual)">
      <summary>
        <para>Add a new item to the status bar.</para>
      </summary>
      <param name="oStatusBarItem">
      </param>
    </member>
    <member name="P:VO.StatusBar.AsString">
      <summary>
        <para>
          A string representing the most recent StatusBar:PermanentText status message.
        </para>
      </summary>
      <remarks>
        <para>
          A string representing the most recent StatusBar:PermanentText status message, even if the status bar currently displays a transient message. If you disabled
          the message display, StatusBar:AsString returns NIL.
        </para>
        <para>
          The status bar does not wait for any transient message to time out. If the message was supplied as a hyperlabel instead of a string, AsString extracts and
          returns the hyperlabel's description.
        </para>
      </remarks>
    </member>
    <member name="M:VO.StatusBar.ClearItems">
      <summary>
        <para>Remove all of the status bar items.</para>
      </summary>
    </member>
    <member name="P:VO.StatusBar.ControlText">
      <summary>
        <para>
          A string representing a message associated with a control to be displayed on the status bar.
        </para>
      </summary>
      <remarks>
        <para>
          This message takes priority over the StatusBar:PermanentText message.
        </para>
      </remarks>
    </member>
    <member name="M:VO.StatusBar.Create">
      <summary></summary>
    </member>
    <member name="M:VO.StatusBar.Destroy">
      <inheritdoc />
    </member>
    <member name="P:VO.StatusBar.DisabledKeyIndicatorColor">
      <summary></summary>
    </member>
    <member name="M:VO.StatusBar.Dispatch(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="M:VO.StatusBar.DisplayKeyboard">
      <summary></summary>
    </member>
    <member name="M:VO.StatusBar.DisplayMemory">
      <summary>
        <para>
          Enable the display of the virtual memory available, on the status bar.
        </para>
      </summary>
      <summary>
        <para>
          You must keep the display refreshed as necessary by calling StatusBar:RefreshMemoryDisplay().
        </para>
      </summary>
    </member>
    <member name="M:VO.StatusBar.DisplayMessage">
      <summary></summary>
    </member>
    <member name="M:VO.StatusBar.DisplayPosition">
      <summary></summary>
    </member>
    <member name="M:VO.StatusBar.DisplayTime">
      <summary>
        <para>Enable the digital clock display on the status bar.</para>
      </summary>
    </member>
    <member name="P:VO.StatusBar.ErrorMessageBeep">
      <summary>
        <para>A logical value determining whether a beep is sounded by the error system when an error occurs. TRUE turns beeping on; FALSE turns it off.</para>
      </summary>
    </member>
    <member name="P:VO.StatusBar.ErrorText">
      <summary>
        <para>
          A string representing an error message to be displayed on the status bar.
        </para>
      </summary>
      <remarks>
        <para>
          This message takes priority over the StatusBar:ControlText and StatusBar:PermanentText messages.
        </para>
      </remarks>
    </member>
    <member name="M:VO.StatusBar.GetItemBoundingBox(XSharp.__Usual)">
      <param name="symItemName">

      </param>
    </member>
    <member name="M:VO.StatusBar.GetTipText(XSharp.__Usual)">
      <param name="symItemName">

      </param>
    </member>
    <member name="M:VO.StatusBar.Hide">
      <summary>
        <para>Hide a status bar so it is not visible (until a subsequent call to StatusBar:Show()).</para>
      </summary>
    </member>

    <member name="P:VO.StatusBar.HorizontalBorder">
      <summary>
        <para>A numeric value representing the width of the horizontal border between the top or bottom edge of the status bar and its items.</para>
      </summary>
    </member>
    <member name="P:VO.StatusBar.InsertMode">
      <summary>
        <para>A logical value indicating whether the program is in insert mode. </para>
      </summary>
      <remarks>
        <para>If insert mode is not enabled, NIL is returned.</para>
        <para>
          <b>Note:</b> The status bar figures out for itself the state of the other keys, such as CapsLock, but it has no automatic way of determining whether the
          program is in insertion mode or overwrite mode. Only the program knows that, and the program must set it.
        </para>
      </remarks>
    </member>
    <member name="P:VO.StatusBar.ItemBorder">
      <summary>
        <para>A numeric value representing the width of the borders between the status bar items.</para>
      </summary>
    </member>
    <member name="P:VO.StatusBar.KeyIndicatorColor">
      <summary>
        <para>
          The Color object that the status bar uses to indicate to the user that a key is in the on state.
        </para>
      </summary>
      <remarks>
        <para>
          For example, the imitation LEDs on the buttons that represent the state of the keyboard, such as NumLock. The default is green.
        </para>
        <para>
          <b>Note:</b> If you change StatusBar:KeyIndicatorColor, you must then invoke the StatusBar:Show() method for the change to take effect.
        </para>
      </remarks>
    </member>
    <member name="P:VO.StatusBar.Length">
      <summary>
        <para>A numeric value representing the number of characters in the message to be displayed on the status bar.</para>
      </summary>
    </member>
    <member name="P:VO.StatusBar.MenuText">
      <summary>
        <para>
          A string representing a message associated with a menu selection to be displayed on the status bar.
        </para>
      </summary>
      <remarks>
        <para>
          This message takes priority over any other status bar messages, including StatusBar:ControlText, StatusBar:ErrorText, or StatusBar:PermanentText.
        </para>
      </remarks>
    </member>
    <member name="M:VO.StatusBar.ODDrawItem(XSharp.__Usual)">
      <param name="oEvent">

      </param>
    </member>
    <member name="P:VO.StatusBar.PermanentText">
      <summary>
        <para>
          A string representing the default message to be displayed on the status bar.
        </para>
      </summary>
      <remarks>
        <para>
          This message is stored whenever a higher priority message (including StatusBar:ControlText, StatusBar:ErrorText, or StatusBar:MenuText) takes precedence and redisplayed when no other messages take priority.
        </para>
      </remarks>
    </member>
    <member name="P:VO.StatusBar.Position">
      <summary>
        <para>A pair representing the coordinates to be shown in the status bar.</para>
      </summary>
    </member>
    <member name="M:VO.StatusBar.RefreshMemoryDisplay(XSharp.__Usual)">
      <param name="kMemoryType">

      </param>
    </member>
    <member name="M:VO.StatusBar.SetIcon(XSharp.__Usual,XSharp.__Usual)">
      <param name="oIcon">

      </param>
      <param name="symItemName">

      </param>
    </member>
    <member name="M:VO.StatusBar.setmessage(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Display a string in the main message area of the status bar.</para>
      </summary>
      <param name="cMessage">
      </param>
      <param name="nMode">
      </param>
    </member>
    <member name="M:VO.StatusBar.SetPair(XSharp.__Usual)">
      <param name="oPoint">

      </param>

      <remarks>
        <para>The units you choose for coordinates are arbitrary.</para>
      </remarks>
    </member>
    <member name="M:VO.StatusBar.SetText(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set text for a status bar item.</para>
      </summary>
      <param name="cText">
      </param>
      <param name="symItemName">
      </param>
    </member>
    <member name="M:VO.StatusBar.SetTipText(XSharp.__Usual,XSharp.__Usual)">
      <param name="cTipText">
      </param>
      <param name="symItemName">
      </param>
    </member>
    <member name="M:VO.StatusBar.SetValue(XSharp.__Usual,XSharp.__Usual)">
      <param name="uValue">
      </param>
      <param name="symItemName">
      </param>
    </member>
    <member name="M:VO.StatusBar.Show">
      <summary>
        <para>Display a status bar so it is visible.</para>
      </summary>

    </member>
    <member name="P:VO.StatusBar.TextValue">
      <summary>
        <para>A string representing the value held in the status bar. </para>
      </summary>
      <remarks>
        <para>A string representing the value held in the status bar. For example, the value can be "Jones" or "$14,683.00".</para>
        <para>
          Note that the string is formatted according to the picture clause help in the field specification of the status bar; in turn, status bars linked to a data
          server inherit the field specification — and hence picture — from the field of the server.
        </para>
      </remarks>
    </member>
    <member name="P:VO.StatusBar.TimeOut">
      <summary>
        <para>A numeric value indicating the number of seconds a nonpermanent message is displayed on the status bar.</para>
      </summary>
    </member>
    <member name="M:VO.StatusBar.Timer">
      <summary></summary>
    </member>
    <member name="P:VO.StatusBar.Transient">
      <summary>
        <para>
          A string representing an error message to be displayed on the status bar.
        </para>
      </summary>
      <remarks>
        <para>
          This message takes priority over the StatusBar:ControlText and StatusBar:PermanentText messages.
        </para>
      </remarks>
    </member>
    <member name="P:VO.StatusBar.VerticalBorder">
      <summary>
        <para>A numeric value representing the height of the vertical border between the left or right edge of the status bar and its items.</para>
      </summary>
    </member>
    <member name="T:VO.StatusBarItem">
      <summary>
        <para>Create a status bar item.</para>
      </summary>
    </member>
    <member name="M:VO.StatusBarItem.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a status bar item.</para>
      </summary>
      <param name="symName">
      </param>
      <param name="nWidth">
      </param>
      <param name="kStyle">
      </param>
      <param name="oIcon">
      </param>
    </member>
    <member name="P:VO.StatusBarItem.Icon">
      <summary>
        <para>The icon of the status bar item.</para>
      </summary>
    </member>
    <member name="P:VO.StatusBarItem.NameSym">
      <summary>
        <para>The symbolic name of the status bar item.</para>
      </summary>
    </member>
    <member name="P:VO.StatusBarItem.Style">
      <summary>
        <para>A constant determining the three-dimensional appearance of the status bar items</para>
      </summary>
      <remarks>
        <para>One of the following constants determining the three-dimensional appearance of the status bar item:</para>
        <list type="table">
          <listheader>
            <term>Constant</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              SBITEMFLAT
            </term>
            <description>Creates a status bar item with a flat appearance</description>
          </item>
          <item>
            <term>
              SBITEMSUNKEN
            </term>
            <description>Creates a status bar item with a sunken appearance</description>
          </item>
          <item>
            <term>
              SBITEMRAISED
            </term>
            <description>Creates a status bar item with a raised appearance</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:VO.StatusBarItem.Value">
      <summary></summary>
    </member>
    <member name="P:VO.StatusBarItem.Width">
      <summary>
        <para>A numeric value that represents the width of the status bar item.</para>
      </summary>
    </member>
    <member name="T:VO.StatusBarKeyItem">
      <summary>
        Create a status bar item to display the CAPS, NUM and INS status.
      </summary>
    </member>
    <member name="M:VO.StatusBarKeyItem.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.StatusBarKeyItem.KeyText">
      <summary></summary>
    </member>
    <member name="M:VO.StatusBarKeyItem.ODDrawItem(XSharp.__Usual,XSharp.__Usual)">
      <param name="oEvent">
      </param>
      <param name="oStatusBar">
      </param>
    </member>
    <member name="T:VO.SysLink">
      <summary>
        <para>Create a SysLink control.</para>
      </summary>
    </member>
    <member name="M:VO.SysLink.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a SysLink control.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="cText">
      </param>
      <param name="lDataAware">
      </param>
    </member>
    <member name="T:VO.SysLinkSelectEvent">
      <summary>
        <para>An event that gets send when a use clicks on the link in a SysLink control.</para>
      </summary>

    </member>
    <member name="M:VO.SysLinkSelectEvent.#ctor(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.SysLinkSelectEvent.ID">
      <summary></summary>
    </member>
    <member name="P:VO.SysLinkSelectEvent.LinkIndex">
      <summary></summary>
    </member>
    <member name="P:VO.SysLinkSelectEvent.URL">
      <summary></summary>
    </member>
    <member name="T:VO.SystemMenu">
      <summary>
        <para>Create a system menu.</para>
      </summary>
    </member>
    <member name="M:VO.SystemMenu.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct a system menu.</para>
      </summary>
      <param name="oOwner">

      </param>

      <remarks>
        <para>
          <b>
            <i>Important!</i>
            <br />
          </b>
          <i>
            This method is used internally by the runtime. Normally, it should not be called in your application code. To create a system
            menu object, store the return value of the AppWindow:EnableSystemMenu() method.
          </i>
        </para>
      </remarks>
    </member>
    <member name="M:VO.SystemMenu.Destroy">
      <inheritdoc />
    </member>
    <member name="T:VO.TabControl">
      <summary>
        <para>Create a tab control.</para>
      </summary>
    </member>
    <member name="M:VO.TabControl.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a tab control.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="kStyle">
      </param>
    </member>
    <member name="M:VO.TabControl.AddTipText(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Add a string to be displayed as tip text for a tab.</para>
      </summary>
      <param name="symTabName">
      </param>
      <param name="cText">
      </param>
    </member>
    <member name="M:VO.TabControl.AppendTab(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Add a new tab and tab page at the end of a tab control.</para>
      </summary>
      <param name="symTabName">
      </param>
      <param name="cCaption">
      </param>
      <param name="xPage">
      </param>
      <param name="nImage">
      </param>
      <returns>
        <para>TRUE if the tab was added successfully; otherwise FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.TabControl.AutoSize">
      <summary>
        <para>A logical value which lets the tab control automatically resize itself to accommodate the size of largest tab page. The default is FALSE.</para>
      </summary>
    </member>
    <member name="M:VO.TabControl.ChangeTipText(XSharp.__Usual,XSharp.__Usual)">
      <param name="symTabName">

      </param>
      <param name="cText">

      </param>
    </member>
    <member name="M:VO.TabControl.CreatePageInstance(XSharp.__Usual,XSharp.__Usual)">
      <param name="symPageClass">

      </param>
      <param name="symTabName">

      </param>
    </member>
    <member name="P:VO.TabControl.CurrentPage">
      <summary>
        <para>The currently displayed tab control page.</para>
      </summary>
    </member>
    <member name="M:VO.TabControl.DeleteAllTabs">
      <summary></summary>
    </member>
    <member name="M:VO.TabControl.DeleteTab(XSharp.__Usual)">
      <summary>
        <para>Remove a tab and page from the tab control.</para>
      </summary>
      <param name="symTabName">
      </param>
      <returns>
        <para>TRUE if the tab could be deleted; otherwise FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.TabControl.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a Tab Control object.</para>
      </summary>
    </member>
    <member name="M:VO.TabControl.GetCaption(XSharp.__Usual)">
      <summary>
        <para>Return the current caption for a tab.</para>
      </summary>
      <param name="symTabName">
      </param>
      <returns>
        <para>The current caption of the specified tab.</para>
      </returns>
    </member>
    <member name="M:VO.TabControl.GetTabBoundingBox(XSharp.__Usual)">
      <param name="symTabName">
      </param>
    </member>
    <member name="M:VO.TabControl.GetTabImage(XSharp.__Usual)">
      <summary>
        <para>Return the current image for a tab.</para>
      </summary>
      <param name="symTabName">
      </param>
      <returns>
        <para>The current image number of the specified tab.</para>
      </returns>
    </member>
    <member name="M:VO.TabControl.GetTabPage(XSharp.__Usual)">
      <summary>
        <para>Retrieve a specified tab page.</para>
      </summary>
      <param name="xSymbolOrPosition">
      </param>
      <returns>
        <para>The modeless dialog window object that represents the specified tab page.</para>
      </returns>
    </member>
    <member name="M:VO.TabControl.GetTipText(XSharp.__Usual)">
      <summary>
        <para>Return the current tip text for a tab.</para>
      </summary>
      <param name="symTabName">
      </param>
      <returns>
        <para>The current tip text of the specified tab.</para>
      </returns>
    </member>
    <member name="M:VO.TabControl.Hide">
      <summary>
        <para>To hide the current tab page.</para>
      </summary>
    </member>
    <member name="P:VO.TabControl.ImageList">
      <summary>
        <para>The image list for the tab control.</para>
      </summary>
    </member>
    <member name="M:VO.TabControl.InsertTab(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Insert a new tab and tab page at a particular position in the tab control.</para>
      </summary>
      <param name="nPosition">
      </param>
      <param name="symTabName">
      </param>
      <param name="cCaption">
      </param>
      <param name="xPage">
      </param>
      <param name="nImage">
      </param>
      <returns>
        <para>TRUE if the tab was added successfully; otherwise FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.TabControl.IsTabPage(XSharp.__Usual)">
      <param name="xSymbolOrPosition">
      </param>
    </member>
    <member name="M:VO.TabControl.Move(XSharp.__Usual)">
      <param name="oMoveEvent">
      </param>
    </member>
    <member name="M:VO.TabControl.PadTabs(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Pad a tab's label and icon with empty space.</para>
      </summary>
      <param name="dwWidth">
      </param>
      <param name="dwHeight">
      </param>
    </member>
    <member name="M:VO.TabControl.RemoveTabImage(XSharp.__Usual)">
      <param name="nImageIndex">
      </param>
    </member>
    <member name="M:VO.TabControl.RemoveTipText(XSharp.__Usual)">
      <param name="symTabName">
      </param>
    </member>
    <member name="M:VO.TabControl.Resize(XSharp.__Usual)">
      <param name="oResizeEvent">
      </param>
    </member>
    <member name="P:VO.TabControl.RowCount">
      <summary>
        <para>A numeric value representing the number of rows of tabs currently displayed in the tab control.</para>
      </summary>
    </member>
    <member name="P:VO.TabControl.SelectedTab">
      <summary>
        <para>A symbolic name representing the currently selected tab in the tab control.</para>
      </summary>
    </member>
    <member name="P:VO.TabControl.SelectedTabPage">
      <summary>
        <para>The modeless dialog window object representing the currently selected tab page in the tab control.</para>
      </summary>
    </member>
    <member name="M:VO.TabControl.SelectTab(XSharp.__Usual)">
      <summary>
        <para>Select a tab and display its page.</para>
      </summary>
      <param name="symTabName">
      </param>
    </member>
    <member name="M:VO.TabControl.SetCaption(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set a new caption for a tab.</para>
      </summary>
      <param name="symTabName">
      </param>
      <param name="cCaption">
      </param>
      <returns>
        <para>TRUE if the caption could be changed; otherwise FALSE</para>
      </returns>
    </member>
    <member name="M:VO.TabControl.SetTabImage(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Dynamically change the image (index) of a tab page.</para>
      </summary>
      <param name="symTabName">
      </param>
      <param name="nImageIndex">
      </param>
      <returns>
        <para>The new index into the image list.</para>
      </returns>
    </member>
    <member name="M:VO.TabControl.SetTipText(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Change the current tip text for a tab.</para>
      </summary>
      <param name="symTabName">
      </param>
      <param name="cText">
      </param>
      <returns>
        <para>TRUE if the text could be changed; otherwise FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.TabControl.Show">
      <summary></summary>
    </member>
    <member name="P:VO.TabControl.TabCaption(XSharp.__Usual)">
      <summary></summary>
    </member>
    <member name="P:VO.TabControl.TabCount">
      <summary>
        <para>A numeric value representing the total number of tabs in the tab control.</para>
      </summary>
    </member>
    <member name="T:VO.TextBox">
      <summary>
        <para>Present the user with a text message box.</para>
      </summary>
    </member>

    <member name="M:VO.TextBox.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Create a message box.</para>
      </summary>
      <param name="uParent">
      </param>
      <param name="uCaption">
      </param>
      <param name="uText">
      </param>
      <param name="nType">
      </param>
    </member>
    <member name="P:VO.TextBox.Beep">
      <summary>
        <para>
          A logical value indicating whether to use a system default beep when displaying the text box.
        </para>
      </summary>
      <remarks>
        <para>
          TRUE indicates that there will be a beep; FALSE indicates that there will be no beep.
        </para>
      </remarks>
    </member>
    <member name="P:VO.TextBox.Caption">
      <summary>
        <para>A string value representing the TextBox caption.</para>
      </summary>
    </member>
    <member name="P:VO.TextBox.Message">
      <summary>
        <para>A string value representing the TextBox message.</para>
      </summary>
    </member>
    <member name="M:VO.TextBox.Show">
      <summary>
        <para>Display this message box and return a value indicating how it was closed.</para>
      </summary>
      <returns>
        <para>The button selected by the user.</para>
        <para>The possible values are:</para>
        <list type="table">
          <listheader>
            <term>Constant</term>
            <description>Button</description>
          </listheader>
          <item>
            <term>BOXREPLYABORT</term>
            <description>Abort</description>
          </item>
          <item>
            <term>BOXREPLYCANCEL</term>
            <description>Cancel</description>
          </item>
          <item>
            <term>BOXREPLYIGNORE</term>
            <description>Ignore</description>
          </item>
          <item>
            <term>BOXREPLYNO</term>
            <description>No</description>
          </item>
          <item>
            <term>BOXREPLYOKAY</term>
            <description>OK</description>
          </item>
          <item>
            <term>BOXREPLYRETRY</term>
            <description>Retry</description>
          </item>
          <item>
            <term>BOXREPLYYES</term>
            <description>Yes</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="P:VO.TextBox.Type">
      <summary>
        <para>
          A constant or combination of constants that indicates which push buttons and/or icons are displayed in the message box.
        </para>
      </summary>
      <remarks>
        <para>
          A constant or combination of constants that indicates which push buttons and/or icons are displayed in the message box. One item from each of these groups
          is added together to create the combination that you choose.
        </para>
        <para>Group 1: Standard Button Combinations</para>
        <list type="table">
          <listheader>
            <term>Constant</term>
            <description>Button</description>
          </listheader>
          <item>
            <term>BOXABORTRETRYIGNORE</term>
            <description> Abort, Retry, and Ignore</description>
          </item>
          <item>
            <term>BUTTONOKAY  </term>
            <description>OK (This is the default.)</description>
          </item>
          <item>
            <term>BUTTONOKAYCANCEL</term>
            <description>OK and Cancel</description>
          </item>
          <item>
            <term>BUTTONRETRYCANCEL</term>
            <description>Retry and Cancel</description>
          </item>
          <item>
            <term>BUTTONYESNO</term>
            <description>Yes and No</description>
          </item>
          <item>
            <term>BUTTONYESNOCANCEL</term>
            <description>Yes, No, and Cancel</description>
          </item>
        </list>
        <para>Group 2: Standard Icons</para>
        <list type="table">
          <listheader>
            <term>Constant</term>
            <description>Button</description>
          </listheader>
          <item>
            <term>BOXICONASTERISK</term>
            <description>An icon consisting of a lowercase "i" within a circle</description>
          </item>
          <item>
            <term>BOXICONEXCLAMATION  </term>
            <description>An exclamation mark</description>
          </item>
          <item>
            <term>BOXICONHAND</term>
            <description>A warning icon</description>
          </item>
          <item>
            <term>BOXICONQUESTIONMARK</term>
            <description>A question mark</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:VO.TextControl">
      <summary>
        <para>Provide the base class from which all controls are subclassed.</para>
      </summary>
    </member>
    <member name="M:VO.TextControl.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Create a text control.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xId">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="cRegclass">
      </param>
      <param name="kStyle">
      </param>
      <param name="lDataAware">
      </param>
    </member>
    <member name="P:VO.TextControl.Caption">
      <summary>
        <para>The string representing the caption of the text control.</para>
      </summary>
    </member>
    <member name="P:VO.TextControl.ControlFont">
      <summary>
        <para>The font used to draw the text in the control.</para>
      </summary>
    </member>
    <member name="M:VO.TextControl.Create">
      <inheritdoc />
    </member>
    <member name="P:VO.TextControl.CurrentText">
      <summary>
        <para>
          A string representing the text currently displayed in a text control.
        </para>
      </summary>
      <remarks>
        <para>
          For edit controls, including the edit box associated with simple and drop-down combo
          boxes, it contains the text currently appearing in the edit box. For fixed icon and group box controls, TextControl:CurrentText contains NULL_STRING.
        </para>
      </remarks>
    </member>
    <member name="M:VO.TextControl.Destroy">
      <inheritdoc />
    </member>
    <member name="M:VO.TextControl.Font(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Change the current font of the text control.</para>
      </summary>
      <param name="oNewFont">
      </param>
      <param name="lRescal">
      </param>
      <returns>
        <para>The previous font used by the text control.</para>
      </returns>
    </member>
    <member name="M:VO.TextControl.Ime(XSharp.__Usual)">
      <summary>
        <para>Return and optionally set whether Input Method Editor is enabled for this text control.</para>
      </summary>
      <param name="symIme">
      </param>
      <returns>
        <para>
          If &lt;<i>lEnable</i>&gt; is not specified, TextControl:IME() returns the current setting. If &lt;<i>lEnable</i>&gt; is specified, the previous setting is
          returned.
        </para>
      </returns>
    </member>
    <member name="P:VO.TextControl.Length">
      <summary>
        <para>A numeric value representing the number of characters in the control.</para>
      </summary>
    </member>
    <member name="M:VO.TextControl.RemoveEditBalloonTip(XSharp.__Usual)">
      <param name="hControl">
      </param>
    </member>
    <member name="M:VO.TextControl.SetCueBanner(XSharp.__Usual,XSharp.__Usual)">
      <param name="cText">
      </param>
      <param name="hControl">
      </param>
    </member>
    <member name="M:VO.TextControl.ShowEditBalloonTip(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="cTitle">
      </param>
      <param name="cText">
      </param>
      <param name="dwIcon">
      </param>
      <param name="hControl">
      </param>
    </member>
    <member name="P:VO.TextControl.TextColor">
      <summary>
        <para>The color used to draw the text in the control. (Refer to the Color:Init() method for details on specifying a color object.)</para>
      </summary>
    </member>
    <member name="P:VO.TextControl.TextValue">
      <summary>
        <para>
          A string representing the value held in the control.
        </para>
      </summary>
      <remarks>
        <para>
          A string representing the value held in the control. For example, in a standard edit control, the value can be "Jones" or "$14,683.00". TextValue is set to
          NULL_STRING for FixedIcon objects, or to the Caption value for all other non-editable controls.
        </para>
        <para>
          Note that the string is formatted according to the picture clause held in the field specification of the text control; in turn, text controls linked to a
          data server inherit the field — and hence picture — from the field of the server.
        </para>
      </remarks>
    </member>
    <member name="T:VO.TextObject">
      <summary>
        <para>Create a text-drawing object.</para>
      </summary>
    </member>

    <member name="M:VO.TextObject.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Create a TextObject object.</para>
      </summary>
      <param name="oPoint">
      </param>
      <param name="cText">
      </param>
      <param name="oFont">
      </param>
      <param name="oColor">
      </param>
    </member>
    <member name="P:VO.TextObject.BoundingBox">
      <summary>
        <para>A bounding box representing the smallest rectangle (in the owner window's canvas coordinates) which encloses this TextObject object.</para>
      </summary>
    </member>
    <member name="P:VO.TextObject.Color">
      <summary></summary>
    </member>
    <member name="M:VO.TextObject.Destroy">
      <summary></summary>
    </member>
    <member name="P:VO.TextObject.DisplayText">
      <summary></summary>
    </member>

    <member name="M:VO.TextObject.Draw">
      <summary>
        <para>Draw the TextObject object on the window.</para>
      </summary>
      <remarks>
        <para>
          <b>
            <i>Important!</i>
            <br />
          </b>
          <i>
            This method is called by the runtime when the text requires redrawing. Do not call this method from your application
            code — use Window:Draw() instead.
          </i>
        </para>
      </remarks>
    </member>
    <member name="P:VO.TextObject.Font">
      <summary></summary>
    </member>
    <member name="T:VO.ToolBar">
      <summary>
        <para>Create a toolbar.</para>
      </summary>
    </member>
    <member name="M:VO.ToolBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Create a toolbar.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="lEnableBands">
      </param>
    </member>
    <member name="M:VO.ToolBar.AddBand(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Use this method to add a band to the ToolBar.</para>
      </summary>
      <param name="sBandName">
      </param>
      <param name="oControl">
      </param>
      <param name="iPos">
      </param>
      <param name="iMinWidth">
      </param>
      <param name="iMinHeight">
      </param>
      <param name="sText">
      </param>
      <param name="oForeColor">
      </param>
      <param name="oBackColor">
      </param>
      <param name="iImageIndex">
      </param>
      <param name="oBackBitmap">
      </param>
      <returns>
        <para>TRUE, if the operation was successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ToolBar.AddSubToolBarBand(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="symToolBar">
      </param>
      <param name="iPos">
      </param>
      <param name="iMinWidth">
      </param>
      <param name="lFlat_dwStyle">
      </param>
    </member>
    <member name="M:VO.ToolBar.AddTipText(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Add a string to be displayed as tip text for a button.</para>
      </summary>
      <param name="nButtonID">
      </param>
      <param name="nMenuItemID">
      </param>
      <param name="cText">
      </param>
    </member>
    <member name="M:VO.ToolBar.AppendItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Add a new toolbar button item to the end of the toolbar from the list of buttons available.</para>
      </summary>
      <param name="nButtonID">
      </param>
      <param name="nMenuItemID">
      </param>
      <param name="oBmp">
      </param>
      <param name="nPosition">
      </param>
      <param name="cTitle">
      </param>
      <param name="nImgCount">
      </param>
      <param name="bState">
      </param>
      <param name="bStyle">
      </param>
      <param name="symTB">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ToolBar.AppendSubItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="symTB">
      </param>
      <param name="nButtonID">
      </param>
      <param name="nMenuItemID">
      </param>
      <param name="oBmp">
      </param>
      <param name="nPosition">
      </param>
      <param name="cTitle">
      </param>
      <param name="nImgCount">
      </param>
      <param name="bState">
      </param>
      <param name="bStyle">
      </param>
    </member>
    <member name="P:VO.ToolBar.BandCount">
      <summary>
        <para>The number of bands in the toolbar.</para>
      </summary>
    </member>
    <member name="P:VO.ToolBar.BandImageList">
      <summary>
        <para>An Image List object used for the bands.</para>
      </summary>
    </member>
    <member name="P:VO.ToolBar.Bitmap">
      <summary>
        <para>
          The Bitmap object (containing a bitmap ribbon with one or more button images) that will be used to display buttons on the toolbar. If not assigned, the
          default bitmap is used.
        </para>
      </summary>
    </member>
    <member name="P:VO.ToolBar.BorderStyle">
      <summary>
        <para>This property is no longer supported. It is included only for compatibility with existing Visual Objects 1.0 code.</para>
      </summary>
    </member>
    <member name="P:VO.ToolBar.BoundingBox">
      <summary>
        <para>The bounding box, in canvas coordinates, representing the minimal area that encloses the toolbar.</para>
      </summary>
    </member>
    <member name="P:VO.ToolBar.ButtonCount">
      <summary>
        <para>A numeric value representing the number of buttons currently on the toolbar.</para>
      </summary>
    </member>
    <member name="P:VO.ToolBar.ButtonSize">
      <summary>
        <para>A Dimension object representing the size of buttons on the toolbar. If not assigned, the default is a 16 by 16 button.</para>
      </summary>
    </member>
    <member name="P:VO.ToolBar.ButtonStyle">
      <summary>
        <para>A constant that represents how the buttons are displayed:</para>
      </summary>
      <remarks>
        <para>A constant that represents how the buttons are displayed:</para>
        <b>Constant</b>
        <b>Description</b>
        TB_ICONONLY Display icons only. The buttons are very small; many can fit in a limited space. This is the default.
        TB_TEXTANDICON Display both text and icons. The buttons are very large; not many can fit, but they are easy to use and easy to understand.
        TB_TEXTONLY Display text only. The icons are wide, but low. They take up too much room to be effective on a toolbar across the top or bottom,
        but can be very useful along the left or right side. Text-labeled buttons are not very flashy, but there are times when subtle distinctions among abstract
        concepts are referenced, and coming up with recognizable icons may not be easy (for example, for choices like Lease, Secured Credit and Unsecured Credit).
      </remarks>
    </member>
    <member name="M:VO.ToolBar.ChangeTipText(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="nID">
        <summary>
          <para>Change the current tip text for a button.</para>
        </summary>
      </param>
      <param name="cText">

      </param>
      <param name="symLookUp">

      </param>

      <returns>
        <para>TRUE if the text could be changed; otherwise, FALSE.</para>
      </returns>
    </member>

    <member name="M:VO.ToolBar.ClickItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Make a button look like it is has been clicked, indicating that it has been selected.</para>
      </summary>
      <param name="nMenuItemID">
      </param>
      <param name="symTB">
      </param>
    </member>
    <member name="P:VO.ToolBar.ClientArea">
      <summary>
        <para>
          A bounding box (group or character box) representing the area of its parent window that remains available given the placement of the toolbar.
        </para>
      </summary>
      <remarks>
        <para>
          When a toolbar
          is used in the standard way, on a shell window or a data window, there is usually little need to use this property; the windows automatically adapt themselves
          to the toolbar. However, when placing the toolbar on a regular window, such as a TopAppWindow, the developer is responsible for adapting the window to the size
          that remains as the user moves the toolbar around. Thus, the window might respond to an expose event by asking its toolbar how much space remains.
        </para>
      </remarks>
    </member>
    <member name="M:VO.ToolBar.Configure">
      <summary>
        <para>This method is no longer supported. It is included only for compatibility with existing Visual Objects 1.0 code.</para>
      </summary>
    </member>
    <member name="M:VO.ToolBar.Create">
      <summary></summary>
    </member>
    <member name="M:VO.ToolBar.DeleteItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Remove a button from the toolbar.</para>
      </summary>
      <param name="nMenuItemID">
      </param>
      <param name="symTB">
      </param>
    </member>
    <member name="M:VO.ToolBar.Destroy">
      <summary>
        <para>Provide a method to de-instantiate a ToolBar object.</para>
      </summary>
    </member>
    <member name="M:VO.ToolBar.DimItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Dim a button.</para>
      </summary>
      <param name="nMenuItemID">
      </param>
      <param name="symTB">
      </param>
    </member>
    <member name="M:VO.ToolBar.DisableItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Disable a button.</para>
      </summary>
      <param name="nMenuItemID">
      </param>
      <param name="symTB">
      </param>
    </member>
    <member name="F:VO.ToolBar.Divider">
      <summary></summary>
    </member>
    <member name="M:VO.ToolBar.EnableBands(XSharp.__Usual)">
      <summary>
        <para>Enable toolbar band support.</para>
      </summary>
      <param name="lEnable">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ToolBar.EnableDrag(XSharp.__Usual)">
      <summary>
        <para>Allow the user to move the toolbar around with the mouse.</para>
      </summary>
      <param name="lEnable">
      </param>
    </member>
    <member name="M:VO.ToolBar.EnableItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Enable a button that has been disabled.</para>
      </summary>
      <param name="nMenuItemID">
      </param>
      <param name="symTB">
      </param>
    </member>
    <member name="P:VO.ToolBar.Flat">
      <summary></summary>
    </member>
    <member name="P:VO.ToolBar.GapSize">
      <summary>
        <para>This property is no longer supported. It is included only for compatibility with existing Visual Objects 1.0 code.</para>
      </summary>
    </member>
    <member name="M:VO.ToolBar.GetButtonCount(XSharp.__Usual)">
      <param name="symTB">
      </param>
    </member>
    <member name="M:VO.ToolBar.GetButtonDescription(XSharp.__Usual,XSharp.__Usual)">
      <param name="nButtonID">
      </param>
      <param name="symTB">
      </param>
    </member>
    <member name="M:VO.ToolBar.GetImageList(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Gets the ImageList that is specified by the parameters passed.</para>
      </summary>
      <param name="symType">
      </param>
      <param name="symTB">
      </param>
    </member>
    <member name="M:VO.ToolBar.GetRows(XSharp.__Usual)">
      <param name="symTB">
      </param>
    </member>
    <member name="M:VO.ToolBar.GetState(XSharp.__Usual,XSharp.__Usual)">
      <param name="nMenuItemID">
      </param>
      <param name="symTB">
      </param>
    </member>
    <member name="M:VO.ToolBar.GetTipText(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Return the current tip text for a button.</para>
      </summary>
      <param name="nButtonID">
      </param>
      <param name="symLookUp">
      </param>
      <returns>
        <para>The current tip text of the specified button.</para>
      </returns>
    </member>
    <member name="M:VO.ToolBar.Hide">
      <summary>
        <para>Hide a toolbar so it is not visible.</para>
      </summary>
    </member>
    <member name="M:VO.ToolBar.HideItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Hide a button.</para>
      </summary>
      <param name="nMenuItemID">
      </param>
      <param name="symTB">
      </param>
    </member>
    <member name="P:VO.ToolBar.ImageCount">
      <summary>
        <para>
          A numeric value representing the number of images in the toolbar bitmap. If a custom bitmap has been assigned to the toolbar, this value must be assigned as
          the number of images in that bitmap.
        </para>
      </summary>
    </member>

    <member name="M:VO.ToolBar.InsertItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Insert a new toolbar button item before a specified toolbar button item, from the list of buttons available.</para>
      </summary>
      <param name="nButtonID">
      </param>
      <param name="nMenuItemID">
      </param>
      <param name="nBeforeID">
      </param>
      <param name="bState">
      </param>
      <param name="bStyle">
      </param>
      <param name="symTB">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ToolBar.IsClicked(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Return a logical value indicating whether the specified button is currently clicked or selected.</para>
      </summary>
      <param name="nID">
      </param>
      <param name="symIDType">
      </param>
      <param name="symTB">
      </param>
      <returns>
        <para>TRUE if clicked (or selected); otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ToolBar.IsDimmed(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Determine whether a button is dimmed.</para>
      </summary>
      <param name="nID">
      </param>
      <param name="symIDType">
      </param>
      <param name="symTB">
      </param>
      <returns>
        <para>TRUE if the button is dimmed; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ToolBar.IsEnabled(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Return a logical value indicating whether the specified button is currently enabled.</para>
      </summary>
      <param name="nID">
      </param>
      <param name="symIDType">
      </param>
      <param name="symTB">
      </param>
      <returns>
        <para>TRUE if enabled; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ToolBar.IsHidden(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Determine whether a button is hidden.</para>
      </summary>
      <param name="nID">
      </param>
      <param name="symIDType">
      </param>
      <param name="symTB">
      </param>
      <returns>
        <para>TRUE if the button is hidden; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.ToolBar.IsPressed(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Determine whether a button is pressed.</para>
      </summary>
      <param name="nID">
      </param>
      <param name="symIDType">
      </param>
      <param name="symTB">
      </param>
      <returns>
        <para>TRUE if the button is pressed; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.ToolBar.Location">
      <summary>
        <para>This property is no longer supported. It is included only for compatibility with existing Visual Objects 1.0 code.</para>
      </summary>
    </member>

    <member name="M:VO.ToolBar.PressItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Press a button.</para>
      </summary>
      <param name="nMenuItemID">
      </param>
      <param name="symTB">
      </param>
    </member>
    <member name="M:VO.ToolBar.RemoveTipText(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Remove the current tip text for a button.</para>
      </summary>
      <param name="nButtonID">
      </param>
      <param name="symLookUp">
      </param>
      <returns>
        <para>TRUE if the text could be removed; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.ToolBar.Rows">
      <summary>
        <para>A numeric value representing the number of rows of buttons on the toolbar.</para>
        <para>
          Note that Rows now has an optional parameter, &lt;<i>symTB</i>&gt;, to indicate which toolbar, or sub-toolbar, to query. If not specified, #MAINTOOLBAR is
          assumed.
        </para>
      </summary>
    </member>
    <member name="P:VO.ToolBar.SeparatorSize">
      <summary>
        <para>This property is no longer supported. It is included only for compatibility with existing Visual Objects 1.0 code.</para>
      </summary>
    </member>

    <member name="M:VO.ToolBar.SetImageList(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Sets the ImageList to be used by the ToolBar.</para>
      </summary>
      <param name="uImageList">

      </param>
      <param name="symType">

      </param>
      <param name="symTB">

      </param>
    </member>
    <member name="M:VO.ToolBar.SetRows(XSharp.__Usual,XSharp.__Usual)">
      <param name="nRows">
      </param>
      <param name="symTB">
      </param>
    </member>
    <member name="M:VO.ToolBar.SetState(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="nMenuItemID">
      </param>
      <param name="nState">
      </param>
      <param name="symTB">
      </param>
    </member>
    <member name="M:VO.ToolBar.Show">
      <summary>
        <para>Display a toolbar so it is visible.</para>
      </summary>
    </member>
    <member name="M:VO.ToolBar.ShowBand(XSharp.__Usual,XSharp.__Usual)">
      <param name="iPos">
      </param>
      <param name="lShow">
      </param>
    </member>
    <member name="M:VO.ToolBar.ShowItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Show a button.</para>
      </summary>
      <param name="nMenuItemID">
      </param>
      <param name="symTB">
      </param>
    </member>
    <member name="M:VO.ToolBar.UnClickItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Make a button look like it is "clicked-out" (returned to its normal state) after it has been "clicked-in" to indicate that it has been selected.</para>
      </summary>
      <param name="nMenuItemID">
      </param>
      <param name="symTB">
      </param>
    </member>
    <member name="M:VO.ToolBar.UnDimItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Undim a button.</para>
      </summary>
      <param name="nMenuItemID">
      </param>
      <param name="symTB">
      </param>
    </member>
    <member name="M:VO.ToolBar.UnPressItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Unpress a button.</para>
      </summary>
      <param name="nMenuItemID">
      </param>
      <param name="symTB">
      </param>
    </member>
    <member name="M:VO.ToolBar.Update">
      <summary>
        <para>This method is no longer supported. It is included only for compatibility with existing Visual Objects 1.0 code.</para>
      </summary>
    </member>
    <member name="T:VO.TopAppWindow">
      <summary>
        <para>Create a top-level application window.</para>
      </summary>
    </member>
    <member name="M:VO.TopAppWindow.#ctor(XSharp.__Usual)">
      <summary>
        <para>Create a top-level application window.</para>
      </summary>
      <param name="oOwner">
      </param>
    </member>
    <member name="M:VO.TopAppWindow.Resize(XSharp.__Usual)">
      <param name="oResizeEvent">
      </param>
    </member>
    <member name="M:VO.TopAppWindow.ToolBarHeightChanged">
      <summary></summary>
    </member>
    <member name="T:VO.TreeView">
      <summary>
        <para>Create a tree view control.</para>
      </summary>
    </member>
    <member name="M:VO.TreeView.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a tree view.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="kStyle">
      </param>
    </member>
    <member name="M:VO.TreeView.AddItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Add a new tree view item as the last child item of a specified parent.</para>
      </summary>
      <param name="symParentName">
      </param>
      <param name="oTreeViewItem">
      </param>
      <returns>
        <para>TRUE if the item was added successfully; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.TreeView.Collapse(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Collapse a tree view item, hiding its child items.</para>
      </summary>
      <param name="symName">
      </param>
      <param name="lRemoveChildItems">
      </param>
      <param name="lAll">
      </param>
      <param name="lForceNotify">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.TreeView.DeleteAll">
      <summary>
        <para>Delete all items of the tree view.</para>
      </summary>
      <returns>
        <para>TRUE if all items were deleted successfully; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.TreeView.DeleteItem(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Delete a tree view item.</para>
      </summary>
      <param name="symName">
      </param>
      <param name="lChildsOnly">
      </param>
      <returns>
        <para>TRUE if the item was deleted successfully; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.TreeView.Destroy">
      <summary></summary>
    </member>
    <member name="P:VO.TreeView.DragDropEnabled">
      <summary>
        <para>
          A logical value that is TRUE if drag-and-drop is enabled for the tree view. If drag-and-drop is enabled, items can be dragged within, as well as outside,
          the control.
        </para>
      </summary>
    </member>
    <member name="P:VO.TreeView.DragImageList">
      <summary>
        <para>An image list containing a single image displayed during a drag-and-drop operation for the tree view.</para>
      </summary>
    </member>
    <member name="M:VO.TreeView.EditItemLabel(XSharp.__Usual)">
      <summary>
        <para>Begins in-place label editing of an item in the tree view.</para>
      </summary>
      <param name="symName">
      </param>
    </member>
    <member name="M:VO.TreeView.EnableDragDrop(XSharp.__Usual)">
      <summary>
        <para>Enable or disable drag-and-drop of items for the tree view.</para>
      </summary>
      <param name="lEnable">
      </param>
      <returns>
        <para>TRUE if drag-and-drop could be enabled or disabled; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.TreeView.EnableSort(XSharp.__Usual)">
      <summary>
        <para>Register a user-defined method to use for sorting items in the tree view.</para>
      </summary>
      <param name="symMethodName">
      </param>
      <returns>
        <para>The symbolic name of the user-defined method that will be used to perform the sort.</para>
      </returns>
    </member>
    <member name="M:VO.TreeView.EnsureVisible(XSharp.__Usual)">
      <summary>
        <para>Ensure that an item is visible in the tree view, expanding its parent item or scrolling the tree view if necessary.</para>
      </summary>
      <param name="symName">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.TreeView.Expand(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Expand a tree view item, showing its child items.</para>
      </summary>
      <param name="symName">
      </param>
      <param name="lAll">
      </param>
      <param name="lForceNotify">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.TreeView.GetDropHighlight">
      <summary></summary>
    </member>
    <member name="M:VO.TreeView.GetFirstChildItem(XSharp.__Usual)">
      <param name="symItem">
      </param>
    </member>
    <member name="M:VO.TreeView.GetFirstVisibleItem">
      <summary></summary>
    </member>
    <member name="M:VO.TreeView.GetItemAtPosition(XSharp.__Usual)">
      <param name="oPoint">
      </param>
    </member>
    <member name="M:VO.TreeView.GetItemAttributes(XSharp.__Usual)">
      <param name="symItem">
      </param>
    </member>
    <member name="M:VO.TreeView.GetItemBoundingBox(XSharp.__Usual,XSharp.__Usual)">
      <param name="symItem">
      </param>
      <param name="lTextOnly">
      </param>
    </member>
    <member name="M:VO.TreeView.GetNextSiblingItem(XSharp.__Usual)">
      <param name="symItem">
      </param>
    </member>
    <member name="M:VO.TreeView.GetNextVisibleItem(XSharp.__Usual)">
      <param name="symItem">
      </param>
    </member>
    <member name="M:VO.TreeView.GetParentItem(XSharp.__Usual)">
      <summary>
        <para>Return a tree view item's parent item.</para>
      </summary>
      <param name="symItem">
      </param>
      <returns>
        <para>The parent tree view item of the specified item.</para>
      </returns>
    </member>
    <member name="M:VO.TreeView.GetPreviousSiblingItem(XSharp.__Usual)">
      <param name="symItem">
      </param>
    </member>
    <member name="M:VO.TreeView.GetPreviousVisibleItem(XSharp.__Usual)">
      <param name="symItem">
      </param>
    </member>
    <member name="M:VO.TreeView.GetRootItem">
      <summary>
        <para>Return the root tree view item.</para>
      </summary>
      <returns>
        <para>The root tree view item.</para>
      </returns>
    </member>
    <member name="M:VO.TreeView.GetSelectedItem">
      <summary></summary>
    </member>
    <member name="P:VO.TreeView.ImageList">
      <summary>
        <para>An image list containing images to display for each item in the tree view.</para>
      </summary>
    </member>
    <member name="P:VO.TreeView.Indent">
      <summary>
        <para>A numeric value representing the number of pixels that child items are indented from parent items.</para>
      </summary>
    </member>
    <member name="M:VO.TreeView.InsertItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Insert a new tree view item as a child of a specified item and after a specified item in the tree view.</para>
      </summary>
      <param name="symParentName">
      </param>
      <param name="symInsertAfter">
      </param>
      <param name="oTreeViewItem">
      </param>
      <returns>
        <para>TRUE if the item was inserted successfully; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.TreeView.ItemCount">
      <summary>
        <para>A numeric value representing the number of items in the tree view.</para>
      </summary>
    </member>
    <member name="P:VO.TreeView.SearchString">

      <summary>
        <para>
          The incremental search string associated with the tree view.
        </para>
      </summary>
      <remarks>
        <para>
          The incremental search string is the character sequence that the user types while the tree view
          has the input focus. When the user types a character, the character is appended to the search string, and a matching item is sought. If the system finds a
          match, it selects the item. A timeout period is associated with the search string; if the timeout period elapses before the user types another character, the
          string is reset.
        </para>
      </remarks>
    </member>
    <member name="M:VO.TreeView.SelectItem(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Cause a tree view to select a tree view item, scroll the item into view, or redraw it as the target of a drag-and-drop operation.</para>
      </summary>
      <param name="symItem">
      </param>
      <param name="symCode">
      </param>
      <param name="lSelect">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.TreeView.SetItemAttributes(XSharp.__Usual)">
      <param name="oTreeViewItem">
      </param>
    </member>
    <member name="M:VO.TreeView.SortChildren(XSharp.__Usual)">
      <summary>
        <para>Sort the child tree view items of an item using the user-defined sort method specified by EnableSort().</para>
      </summary>
      <param name="symParentName">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.TreeView.StateImageList">
      <summary>
        <para>An image list containing state images to display for each item in the tree view.</para>
      </summary>
    </member>
    <member name="M:VO.TreeView.Toggle(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Toggle the expanded or collapsed state of a tree view item, showing or hiding its child items appropriately.</para>
      </summary>
      <param name="symName">
      </param>
      <param name="lAll">
      </param>
      <param name="lForceNotify">
      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.TreeView.VisibleCount">
      <summary>
        <para>A numeric value representing the number of tree view items that are fully visible in the tree view.</para>
      </summary>
    </member>
    <member name="T:VO.TreeViewDeleteEvent">
      <summary>
        <para>Provide information about a tree view delete event, which is generated when an item in a tree view control is deleted.</para>
      </summary>
    </member>
    <member name="M:VO.TreeViewDeleteEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="T:VO.TreeViewDragEvent">
      <summary>
        <para>Provide information about a tree view drag event, which is generated when an item in a tree view control is dragged.</para>
      </summary>
    </member>
    <member name="M:VO.TreeViewDragEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.TreeViewDragEvent.IsLeftButton">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewDragEvent.IsRightButton">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewDragEvent.Position">
      <summary>
        <para>A Point object that describes the initial position of the drag in tree view control coordinates.</para>
      </summary>
    </member>
    <member name="P:VO.TreeViewDragEvent.TreeViewItem">
      <summary></summary>
    </member>
    <member name="T:VO.TreeViewEditEvent">
      <summary>
        <para>Provide information about a tree view edit event, which is generated when the label of an item in a tree view control is edited.</para>
      </summary>
    </member>
    <member name="M:VO.TreeViewEditEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.TreeViewEditEvent.EditBeginning">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewEditEvent.EditEnding">
      <summary>
        <para>A logical value that is TRUE if the edit is ending.</para>
      </summary>
    </member>
    <member name="P:VO.TreeViewEditEvent.EditText">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewEditEvent.TreeViewItem">
      <summary></summary>
    </member>
    <member name="T:VO.TreeViewExpandedEvent">
      <summary>
        <para>
          Provide information about a tree view expanded event, which is generated when an item in a tree view is expanded or collapsed, exposing or hiding its
          children.
        </para>
      </summary>
    </member>
    <member name="M:VO.TreeViewExpandedEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.TreeViewExpandedEvent.Collapsed">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewExpandedEvent.Expanded">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewExpandedEvent.TreeViewItem">
      <summary></summary>
    </member>
    <member name="T:VO.TreeViewExpandingEvent">
      <summary>
        <para>
          Provide information about a tree view expanding event, which is generated when an item in a tree view is about to be expanded or collapsed, exposing or
          hiding its children.
        </para>
      </summary>
    </member>
    <member name="M:VO.TreeViewExpandingEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.TreeViewExpandingEvent.TreeViewItem">
      <summary></summary>
    </member>
    <member name="T:VO.TreeViewItem">
      <summary>
        <para>Create a tree view item.</para>
      </summary>
    </member>
    <member name="M:VO.TreeViewItem.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a tree view item.</para>
      </summary>
      <param name="sName">
      </param>
      <param name="cTextVal">
      </param>
      <param name="uVal">
      </param>
      <param name="iImage">
      </param>
      <param name="iSelImage">
      </param>
    </member>
    <member name="P:VO.TreeViewItem.Bold">
      <summary>
        <para>A logical value that is TRUE if the text of the tree view item is bold.</para>
      </summary>
    </member>
    <member name="M:VO.TreeViewItem.Collapse(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Collapse the tree view item, hiding its child items.</para>
      </summary>
      <param name="lAll">
      </param>
      <param name="lForceNotify">
      </param>
      <returns>
        <para>TRUE if successful; otherwise FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.TreeViewItem.Delete(XSharp.__Usual)">
      <summary>
        <para>Delete the tree view item.</para>
      </summary>
      <param name="lChildsOnly">
      </param>
      <returns>
        <para>TRUE if successful; otherwise FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.TreeViewItem.Disabled">
      <summary>
        <para>A logical value that is TRUE if the image of the tree view item is disabled.</para>
      </summary>
    </member>
    <member name="P:VO.TreeViewItem.DropTarget">
      <summary>
        <para>A logical value that is TRUE if the tree view item is highlighted as the target of a drag-and-drop operation.</para>
      </summary>
    </member>
    <member name="M:VO.TreeViewItem.Expand(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Expand the tree view item, showing its child items.</para>
      </summary>
      <param name="lAll">
      </param>
      <param name="lForceNotify">
      </param>
      <returns>
        <para>TRUE if successful; otherwise FALSE.</para>
      </returns>
    </member>
    <member name="P:VO.TreeViewItem.Expanded">
      <summary>
        <para>A logical value that determines if the tree view item is expanded or collapsed.</para>
      </summary>
    </member>
    <member name="P:VO.TreeViewItem.FirstChild">
      <summary>
        <para>The first child item of the tree view item.</para>
      </summary>
    </member>
    <member name="P:VO.TreeViewItem.Focused">
      <summary>
        <para>A logical value that is TRUE if the tree view item is focused.</para>
      </summary>
    </member>
    <member name="P:VO.TreeViewItem.ImageIndex">
      <summary>
        <para>A numeric value that represents the index of the tree view item's image in the image list.</para>
      </summary>
    </member>
    <member name="P:VO.TreeViewItem.NameSym">
      <summary>
        <para>The symbolic name for the tree view item.</para>
      </summary>
    </member>
    <member name="P:VO.TreeViewItem.NextSibling">
      <summary>
        <para>The next sibling item of the tree view item.</para>
      </summary>
    </member>
    <member name="P:VO.TreeViewItem.OverlayImageIndex">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewItem.Parent">
      <summary>
        <para>The parent TreeView object of the tree view item.</para>
      </summary>
    </member>
    <member name="P:VO.TreeViewItem.PreviousSibling">
      <summary>
        <para>The previous sibling item of the tree view item.</para>
      </summary>
    </member>
    <member name="P:VO.TreeViewItem.Selected">
      <summary>
        <para>A logical value that is TRUE if the tree view item is selected.</para>
      </summary>
    </member>
    <member name="P:VO.TreeViewItem.SelectedImageIndex">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewItem.StateImageIndex">
      <summary>
        <para>
          A numeric value that represents the index of the tree view item's state image in the state image list. State images are images that are drawn next to the
          item's main image.
        </para>
      </summary>
    </member>
    <member name="P:VO.TreeViewItem.TextValue">
      <summary>
        <para>The text value of the tree view item.</para>
      </summary>
    </member>
    <member name="P:VO.TreeViewItem.TreeViewControl">
      <summary>
        <para>The TreeView object identifying the TreeView control to which the current tree view item is linked.</para>
      </summary>
    </member>
    <member name="P:VO.TreeViewItem.Value">
      <summary>
        <para>The usual value associated with the tree view item.</para>
      </summary>
    </member>
    <member name="T:VO.TreeViewKeyEvent">
      <summary>
        <para>Provide information about a tree view key event, which is generated when a key is pressed while the tree view control has the input focus.</para>
      </summary>
    </member>
    <member name="M:VO.TreeViewKeyEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.TreeViewKeyEvent.KeyCode">
      <summary>
        <para>The virtual key code of the key that was pressed.</para>
      </summary>
    </member>
    <member name="T:VO.TreeViewMouseEvent">
      <summary>
        <para>Provide information about a tree view mouse event, which is generated when a mouse button in a tree view control is clicked or double-clicked.</para>
      </summary>
    </member>
    <member name="M:VO.TreeViewMouseEvent.#ctor(XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.TreeViewMouseEvent.ButtonID">
      <summary>
        <para>A constant representing which mouse button was clicked. The value can be either BUTTONLEFT or BUTTONRIGHT.</para>
      </summary>
    </member>
    <member name="P:VO.TreeViewMouseEvent.IsLeftButton">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewMouseEvent.IsRightButton">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointAboveClientArea">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointBelowClientArea">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointLeftOfClientArea">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointNowhere">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointOnItem">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointOnItemButton">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointOnItemImage">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointOnItemIndent">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointOnItemLabel">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointOnItemRight">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointOnItemStateImage">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewMouseEvent.PointRightOfClientArea">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewMouseEvent.Position">
      <summary>
        <para>A Point object that describes the position where the click occurred in tree view control coordinates.</para>
      </summary>
    </member>
    <member name="P:VO.TreeViewMouseEvent.TreeViewItem">
      <summary></summary>
    </member>
    <member name="T:VO.TreeViewSelectionEvent">
      <summary>
        <para>
          Provide information about a tree view selection event, which is generated when the current selection in a tree view control has changed or is about to
          change.
        </para>
      </summary>
    </member>
    <member name="M:VO.TreeViewSelectionEvent.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>
    <member name="P:VO.TreeViewSelectionEvent.KeyBoardAction">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewSelectionEvent.MouseAction">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewSelectionEvent.NewTreeViewItem">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewSelectionEvent.OldTreeViewItem">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewSelectionEvent.SelectionChanged">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewSelectionEvent.SelectionChanging">
      <summary></summary>
    </member>
    <member name="P:VO.TreeViewSelectionEvent.UnknownAction">
      <summary></summary>
    </member>
    <member name="T:VO.VerticalScrollBar">
      <summary>
        <para>Create a vertical scroll bar.</para>
      </summary>
    </member>
    <member name="M:VO.VerticalScrollBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc cref="M:VO.ScrollBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)"/>
    </member>
    <member name="T:VO.VerticalSelectionSlider">
      <summary>
        <para>Create a vertical selection slider control.</para>
      </summary>
    </member>
    <member name="M:VO.VerticalSelectionSlider.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
    </member>

    <member name="T:VO.VerticalSlider">
      <summary>
        <para>Create a vertical slider control.</para>
      </summary>
    </member>
    <member name="M:VO.VerticalSlider.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a vertical slider.</para>
      </summary>
      <inheritdoc />
    </member>
    <member name="T:VO.VerticalSpinner">
      <summary>
        <para>Create a spinner with vertical arrow buttons.</para>
      </summary>
    </member>
    <member name="M:VO.VerticalSpinner.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Construct a vertical spinner.</para>
      </summary>
      <param name="oOwner">
      </param>
      <param name="xID">
      </param>
      <param name="oPoint">
      </param>
      <param name="oDimension">
      </param>
      <param name="kStyle">
      </param>
    </member>
    <member name="T:VO.WarningBox">
      <summary>
        <para>Create a warning message box.</para>
      </summary>
    </member>
    <member name="M:VO.WarningBox.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Create a warning box.</para>
      </summary>
      <param name="uParent">
      </param>
      <param name="uCaption">
      </param>
      <param name="uText">
      </param>
    </member>
    <member name="T:VO.Window">
      <summary>
        <para>Provide the base class from which all windows are subclassed.</para>
      </summary>
    </member>
    <member name="M:VO.Window.#ctor(XSharp.__Usual)">
      <summary>
        <para>Construct a Window object.</para>
      </summary>
      <param name="oOwner">
      </param>
    </member>
    <member name="P:VO.Window.Accelerator">
      <summary></summary>
    </member>
    <member name="M:VO.Window.Activate(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when this window is activated.</para>
      </summary>
      <param name="oEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.AddTrayIcon(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Adds a tray icon associated with the window.</para>
      </summary>
      <param name="oTrayIcon">
      </param>
      <param name="dwID">
      </param>
      <param name="sToolTip">
      </param>
    </member>
    <member name="M:VO.Window.Animate(XSharp.__Usual,XSharp.__Usual)">
      <param name="nTime">
      </param>
      <param name="nFlags">
      </param>
    </member>
    <member name="M:VO.Window.AnimationStart(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when an animation control begins playback.</para>
      </summary>
      <param name="oControlEvent">

      </param>
    </member>
    <member name="M:VO.Window.AnimationStop(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when an animation control ends playback.</para>
      </summary>
      <param name="oControlEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.AppCommand(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when an AppCommand event takes place.</para>
      </summary>
      <param name="oACEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="P:VO.Window.Automated">
      <summary>
        <para>
          A logical value determining whether the window object is to be exposed as an OLE automation server.
        </para>
      </summary>
      <remarks>
        <para>
          This is a convenient shortcut for the
          RegisterOLEAutomationObject() function. When the window is destroyed, the UnRegisterOLEAutomationObject() is automatically called.
        </para>
      </remarks>
    </member>
    <member name="P:VO.Window.Background">
      <summary></summary>
    </member>
    <member name="M:VO.Window.ButtonClick(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a check box, push button, or radio button is clicked with the mouse.</para>
      </summary>
      <param name="oControlEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.ButtonDoubleClick(XSharp.__Usual)">
      <param name="oControlEvent">

      </param>
    </member>

    <member name="P:VO.Window.CanvasArea">
      <summary>
        <para>The bounding box representing the current size of this window's canvas area.</para>
      </summary>
    </member>

    <member name="M:VO.Window.CanvasErase">
      <summary>
        <para>Erase the current canvas area of this window and repaint it using either the background brush or the system's default background color.</para>
      </summary>
    </member>
    <member name="P:VO.Window.Caption">
      <summary></summary>
    </member>
    <member name="M:VO.Window.Center">
      <summary></summary>
    </member>
    <member name="M:VO.Window.Close(XSharp.__Usual)">
      <summary>
        <para>Invoked just as the window is about to close.</para>
      </summary>
      <param name="oEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.ComboBoxExEndEdit(XSharp.__Usual)">
      <summary>
        <para>A method that is invoked when a ComboBoxEx control sends an 'EndEdit' notification message</para>
      </summary>
      <param name="oComboBoxExEndEditEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.ComboBoxExNotify(XSharp.__Usual)">
      <summary>
        <para>A method that is invoked when a ComboBoxEx control sends a notification message</para>
      </summary>
      <param name="oControlNotifyEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="P:VO.Window.ContextMenu">
      <summary>
        <para>A menu object representing the local pop-up menu for a window or window control.</para>
      </summary>
    </member>

    <member name="M:VO.Window.ControlNotify(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a control sends a notification to its parent window.</para>
      </summary>
      <param name="oControlNotifyEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.DateTimeSelectionChanged(XSharp.__Usual)">
      <param name="oDateTimeSelectionEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>

    </member>

    <member name="M:VO.Window.DeActivate(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when this window is deactivated.</para>
      </summary>
      <param name="oEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.DeactivateAllOLEObjects(XSharp.__Usual)">
      <summary>
        <para>Deactivate all currently active OLE objects.</para>
      </summary>
      <param name="oExcept">

      </param>
    </member>
    <member name="M:VO.Window.Default(XSharp.__Usual)">
      <param name="oEvent">

      </param>
    </member>
    <member name="M:VO.Window.DeleteTrayIcon(XSharp.__Usual)">
      <param name="dwID">

      </param>
    </member>
    <member name="M:VO.Window.Destroy">
      <summary>
        <para>Free memory resources allocated for a window and its derived objects.</para>
      </summary>
    </member>
    <member name="M:VO.Window.Disable">
      <summary>
        <para>Disable this window (until a subsequent call to Enable()).</para>
      </summary>
    </member>
    <member name="M:VO.Window.Dispatch(XSharp.__Usual)">
      <param name="oEvent">

      </param>
    </member>
    <member name="P:VO.Window.DragDropClient">
      <summary></summary>
    </member>
    <member name="P:VO.Window.DragDropServer">
      <summary></summary>
    </member>
    <member name="P:VO.Window.DragImageList">
      <summary>
        <para>The ImageList object used for a drag-and-drop operation.</para>
      </summary>
    </member>
    <member name="M:VO.Window.Draw(XSharp.__Usual)">
      <summary>
        <para>Display a Draw object on this window.</para>
      </summary>
      <param name="oDrawObject">

      </param>
    </member>
    <member name="M:VO.Window.DrawBackground(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Draw the background of a window.</para>
      </summary>
      <param name="hdc">
      </param>
      <param name="oWindow">
      </param>
    </member>
    <member name="M:VO.Window.Drop">
      <summary>
        <para>Retrieve information about a load from the drag event and act on each file in the selection.</para>
      </summary>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.EditChange(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the text in an edit control is changed.</para>
      </summary>
      <param name="oControlEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.EditFocusChange(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the input focus changes to or from an edit control.</para>
      </summary>
      <param name="oEditFocusChangeEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.EditScroll(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked for this window when an edit control is scrolled.</para>
      </summary>
      <param name="oControlEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.Enable">
      <summary>
        <para>Enable a previously disabled window.</para>
      </summary>
    </member>
    <member name="M:VO.Window.EnableCloseBox(XSharp.__Usual)">
      <param name="uValue">

      </param>
    </member>
    <member name="M:VO.Window.EnableDragDropClient(XSharp.__Usual)">
      <param name="lEnable">

      </param>
    </member>
    <member name="M:VO.Window.EnableDragDropServer(XSharp.__Usual)">
      <param name="lEnable">

      </param>
    </member>
    <member name="M:VO.Window.EnableHelp(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Enable or disable help for a window and its child windows.</para>
      </summary>
      <param name="lEnable">
      </param>
      <param name="oHelpDisplay">
      </param>
    </member>
    <member name="M:VO.Window.EnableHelpButton">
      <summary>
        <para>Enables the help button in the window caption bar.</para>
      </summary>
    </member>
    <member name="M:VO.Window.EnableHelpCursor">
      <summary>
        <para>Changes the cursor to a question mark with a pointer.</para>
      </summary>
    </member>
    <member name="M:VO.Window.EnableThemeDialogTexture(XSharp.__Usual)">
      <param name="dwStyle">
      </param>
    </member>
    <member name="M:VO.Window.EnableToolTips(XSharp.__Usual)">
      <summary>
        <para>
          Enable or disable the tooltips for a window. Note that assigning a value to Control:ToolTipText automatically enables the tooltip's display on the parent
          window.
        </para>
      </summary>
      <param name="lEnable">
      </param>
      <returns>
        <para>TRUE, if tooltips were enabled; FALSE, if tooltips were disabled.</para>
      </returns>
    </member>
    <member name="F:VO.Window.EventReturnValue">
      <summary></summary>
    </member>
    <member name="M:VO.Window.Expose(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked whenever part of the window needs repainting.</para>
      </summary>
      <param name="oExposeEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.FocusChange(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the input focus changes from the current window to another (or vice versa).</para>
      </summary>
      <param name="oFocusChangeEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="P:VO.Window.Font">
      <summary></summary>
    </member>
    <member name="P:VO.Window.Foreground">
      <summary></summary>
    </member>
    <member name="M:VO.Window.GetAllChildren">
      <summary>
        <para>Obtain an array of all child objects of the window.</para>
      </summary>
      <returns>
        <para>
          An array of all child objects of the window. This array may contain window objects as well as control objects. Note that controls which do
          not have a corresponding object, like a FixedText control where the Generate Code property was set to "No", are not included in the returned
          array.
        </para>
      </returns>
    </member>
    <member name="M:VO.Window.GetExStyle">
      <summary></summary>
    </member>
    <member name="M:VO.Window.GetStyle">
      <summary>
        <para>Retrieve the styles for the window.</para>
      </summary>
      <returns>
        <para>Numeric value representing the style constants or Windows API style constants enabled for the window.</para>
      </returns>
    </member>
    <member name="M:VO.Window.Handle">
      <summary>
        <para>Return the handle for a window.</para>
      </summary>
      <returns>
        <para>A handle to the window, describing the underlying system object.</para>
      </returns>
    </member>
    <member name="M:VO.Window.HasExStyle(System.Int32)">
      <param name="kStyle">

      </param>
    </member>
    <member name="M:VO.Window.HasStyle(System.Int32)">
      <param name="kStyle">

      </param>
    </member>
    <member name="P:VO.Window.HelpDisplay">
      <summary></summary>
    </member>
    <member name="M:VO.Window.HelpRequest(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the user requests help from the application using one of the available context-sensitive help mechanisms.</para>
      </summary>
      <param name="oHelpRequestEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.Hide">
      <summary>
        <para>Hide this window so it is not visible.</para>
      </summary>
    </member>
    <member name="M:VO.Window.HorizontalScroll(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a horizontal scroll bar is scrolled.</para>
      </summary>
      <param name="oScrollEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.HorizontalSlide(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a horizontal slider's thumb is dragged either by the mouse or the keyboard.</para>
      </summary>
      <param name="oSliderEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.HorizontalSpin(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a horizontal spinner is spun.</para>
      </summary>
      <param name="oSpinnerEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>

    <member name="P:VO.Window.HyperLabel">
      <summary>
        <para>The hyperlabel connected to this window. </para>
        <para>HyperLabel can also be used to assign a HyperLabel object to a window, although this is most commonly done during instantiation.</para>
      </summary>
      <remarks>
        <para>From the hyperlabel, you can retrieve additional information about the window, for example:</para>
        <code language="X#">
        cCaption := oWindow:HyperLabel:Caption
        cDescription := oWindow:HyperLabel:Description
        cHelpContext := oWindow:HyperLabel:HelpContext
        </code>
        <para>HyperLabel can also be used to assign a HyperLabel object to a window, although this is most commonly done during instantiation.</para>
      </remarks>
    </member>

    <member name="P:VO.Window.Icon">
      <summary>
        <para>The large icon object used for this window.</para>
      </summary>
    </member>
    <member name="P:VO.Window.IconSm">
      <summary>
        <para>The small icon object used for this window.</para>
      </summary>
    </member>
    <member name="M:VO.Window.IsEnabled">
      <summary></summary>
    </member>
    <member name="M:VO.Window.IsIconic">
      <summary>
        <para>Report if this window is currently iconized.</para>
      </summary>
      <returns>
        <para>TRUE if the window is iconized; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.Window.IsVisible">
      <summary>
        <para>Report if this window is visible (completely or partially) or hidden.</para>
      </summary>
      <returns>
        <para>TRUE if the window is visible; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.Window.IsZoomed">
      <summary>
        <para>Report if this window is maximized (fills the entire screen).</para>
      </summary>
      <returns>
        <para>TRUE if the window is maximized; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.Window.KeyDown(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a key on the keyboard is pressed.</para>
      </summary>
      <param name="oKeyEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.KeyUp(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a key on the keyboard is released.</para>
      </summary>
      <param name="oKeyEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.LineTo(XSharp.__Usual)">
      <summary>
        <para>Draw a line on this window (using the current pen) from the current pen position to a specified point.</para>
      </summary>
      <param name="oPoint">

      </param>
    </member>
    <member name="M:VO.Window.ListBoxClick(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when an item in a list box owned by this window is double-clicked.</para>
      </summary>
      <param name="oControlEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.ListBoxSelect(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when an item in a list box owned by this window is clicked.</para>
      </summary>
      <param name="oControlEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.ListViewColumnClick(XSharp.__Usual)">
      <summary></summary>
    </member>
    <member name="M:VO.Window.ListViewItemChanged(XSharp.__Usual)">
      <param name="oListViewItemEvent">

      </param>
    </member>
    <member name="M:VO.Window.ListViewItemChanging(XSharp.__Usual)">
      <param name="oListViewItemEvent">

      </param>
    </member>
    <member name="M:VO.Window.ListViewItemDelete(XSharp.__Usual)">
      <param name="oListViewDeleteEvent">

      </param>
    </member>
    <member name="M:VO.Window.ListViewItemDrag(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a list view item is dragged in a list view control.</para>
      </summary>
      <param name="oListViewDragEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.ListViewItemEdit(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a list view item is edited in a list view control.</para>
      </summary>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.ListViewKeyDown(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a key is pressed in a list view control.</para>
      </summary>
      <param name="oListViewKeyEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.ListViewMouseButtonDoubleClick(XSharp.__Usual)">
      <param name="oListViewMouseEvent">

      </param>
    </member>
    <member name="M:VO.Window.ListViewMouseButtonDown(XSharp.__Usual)">
      <param name="oListViewMouseEvent">

      </param>
    </member>
    <member name="P:VO.Window.Menu">
      <summary></summary>
    </member>
    <member name="M:VO.Window.MenuCommand(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when an item on a menu owned by this window is selected.</para>
      </summary>
      <param name="oMenuCommandEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.MenuInit(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a pop-up menu owned by this window is about to "pop up."</para>
      </summary>
      <param name="oMenuInitEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.MenuSelect(XSharp.__Usua])">
      <summary>
        <para>Provide a method that is invoked when an item on a menu owned by this window is selected.</para>
      </summary>
      <param name="oMenuSelectEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
      >
    </member>
    <member name="M:VO.Window.MinMaxInfo(XSharp.__Usual[">
      <summary>
        <para>Provide a method that is invoked when the size or position of a window is about to change (cf WM_GETMINMAXINFO in Win API).</para>
      </summary>
      <param name="oMinMaxInfoEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="P:VO.Window.MinSize">
      <summary></summary>
    </member>
    <member name="M:VO.Window.ModifyTrayIcon(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Modify the tray icon associated with the window.</para>
      </summary>
      <param name="oTrayIcon">

      </param>
      <param name="dwID">

      </param>
      <param name="sToolTip">

      </param>
    </member>
    <member name="M:VO.Window.MonthCalSelectionChanged(XSharp.__Usual)">
      <param name="_oMonthCalSelectionEvent">

      </param>
    </member>
    <member name="M:VO.Window.MouseButtonDoubleClick(XSharp.__Usual)">
      <param name="oMouseEvent">

      </param>
    </member>
    <member name="M:VO.Window.MouseButtonDown(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the mouse pointer is positioned over the window and a mouse button is clicked.</para>
      </summary>
      <param name="oMouseEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.MouseButtonUp(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the mouse pointer is positioned over the window and a mouse button is released.</para>
      </summary>
      <param name="oMouseEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.MouseDrag(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a mouse with one or more buttons clicked is moved in the window.</para>
      </summary>
      <param name="oMouseEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.MouseMove(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the mouse is moved in the window.</para>
      </summary>
      <param name="oMouseEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.MouseTrapOff">
      <summary>
        <para>Disable the window from trapping MouseEvents generated outside itself.</para>
      </summary>
    </member>
    <member name="M:VO.Window.MouseTrapOn">
      <summary>
        <para>Enable this window to trap MouseEvents generated outside itself.</para>
      </summary>
    </member>
    <member name="M:VO.Window.Move(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the window is moved (either by the user or by the application).</para>
      </summary>
      <param name="oMoveEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.MoveTo(XSharp.__Usual)">
      <summary>
        <para>Move the current pen to a point on the window's canvas area.</para>
      </summary>
      <param name="oPoint">

      </param>
      <returns>
        <para>A point representing the previous location of the pen, in canvas coordinates.</para>
      </returns>
    </member>

    <member name="P:VO.Window.Origin">
      <summary>
        <para>The point representing the new location of this window, in the canvas coordinates of its owner.</para>
      </summary>
    </member>
    <member name="P:VO.Window.Owner">
      <summary></summary>
    </member>
    <member name="P:VO.Window.OwnerAlignment">
      <inheritdoc cref="P:VO.Control.OwnerAlignment" />
    </member>
    <member name="M:VO.Window.PaintBackground(XSharp.__Usual)">
      <param name="hDC">

      </param>
    </member>
    <member name="M:VO.Window.PaintBoundingBox(XSharp.__Usual,XSharp.__Usual)">
      <param name="oBoundingBox">

      </param>
      <param name="kPaintMode">

      </param>
    </member>
    <member name="P:VO.Window.Pen">
      <summary></summary>
    </member>
    <member name="P:VO.Window.Pointer">
      <summary></summary>
    </member>
    <member name="M:VO.Window.PostInit">
      <summary>
        <para>Implement customized initialization code for the window.</para>
      </summary>
    </member>
    <member name="M:VO.Window.PreInit">
      <summary>
        <para>Implement customized initialization code for the window.</para>
      </summary>
    </member>
    <member name="M:VO.Window.Print(XSharp.__Usual)">
      <summary>
        <para>Print the contents of the window.</para>
      </summary>
      <param name="oDevice">

      </param>
      <returns>
        <para>TRUE if successful; otherwise, FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.Window.QueryClose(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked just before the window closes to confirm if the application really wants to close the window.</para>
      </summary>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
        <para>
          <b>Note:</b> If you reimplement this method in your subclass, it is recommended that you first call SUPER:QueryClose() within the method to obtain its
          default behavior.
        </para>
      </remarks>
      <returns>
        <para>You must return TRUE if the window is to be closed; otherwise, return FALSE.</para>
      </returns>
    </member>
    <member name="M:VO.Window.RegisterTimer(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Register a timer method to be invoked for the window.</para>
      </summary>
      <param name="nInterval">
      </param>
      <param name="lOneTime">
      </param>
    </member>
    <member name="M:VO.Window.RePaint">
      <summary>
        <para>Send an ExposeEvent to repaint the window's canvas area.</para>
      </summary>
    </member>
    <member name="M:VO.Window.RepaintBoundingBox(XSharp.__Usual)">
      <param name="oBoundingBox">
      </param>
    </member>
    <member name="M:VO.Window.Resize(XSharp.__Usual)">
      <param name="oResizeEvent">
      </param>
    </member>
    <member name="M:VO.Window.RichEditProtected(XSharp.__Usual)">
      <param name="oRichEditProtectEvent">
      </param>
    </member>
    <member name="M:VO.Window.RichEditSelectionChange(XSharp.__Usual)">
      <param name="oRichEditSelectionEvent">
      </param>
    </member>
    <member name="M:VO.Window.RichEditUndoLost(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when the undo state in a rich edit control can no longer be maintained.</para>
      </summary>
      <param name="oControlNotifyEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.Scroll(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Scroll a rectangular area in the window a specified amount, in a specified direction, and optionally clip the area when scrolled.</para>
      </summary>
      <param name="oDimension">
      </param>
      <param name="oBoundingBox">
      </param>
      <param name="lClip">
      </param>
    </member>
    <member name="M:VO.Window.SetAlignStartSize(XSharp.__Usual)">
      <param name="oSize">
      </param>
    </member>
    <member name="M:VO.Window.SetBackgroundBrush(XSharp.__Usual)">
      <param name="dwNew">
      </param>
    </member>
    <member name="M:VO.Window.SetExStyle(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set the extended style of a window.</para>
      </summary>
      <param name="dwSetStyle">
      </param>
      <param name="lEnable">
      </param>
    </member>
    <member name="M:VO.Window.SetFocus">
      <summary>
        <para>Set the keyboard focus to this window.</para>
      </summary>
    </member>
    <member name="M:VO.Window.SetHandle(XSharp.__Usual)">
      <param name="hNewWnd">
      </param>
    </member>
    <member name="M:VO.Window.SetStyle(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Set the styles for the window.</para>
      </summary>
      <param name="dwSetStyle">
      </param>
      <param name="lEnable">
      </param>
      <returns>
        <para>Numeric value representing the style constants or Windows API style constants enabled for the window.</para>
      </returns>
    </member>
    <member name="M:VO.Window.Show(XSharp.__Usual)">
      <summary>
        <para>Display this window.</para>
      </summary>
      <param name="kShowState">
      </param>
    </member>
    <member name="M:VO.Window.ShowBalloonTrayTip(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="oTrayIcon">
      </param>
      <param name="dwID">
      </param>
      <param name="sHeading">
      </param>
      <param name="sToolTip">
      </param>
      <param name="dwTimeOut">
      </param>
      <param name="dwInfo">
      </param>
    </member>
    <member name="P:VO.Window.Size">
      <summary>
        <para>The dimension representing the size of this window.</para>
      </summary>
    </member>
    <member name="M:VO.Window.SizeText(XSharp.__Usual)">
      <summary>
        <para>Determine the space needed to print a string on the window in the current font.</para>
      </summary>
      <param name="cTextToSize">
      </param>
      <returns>
        <para>A dimension representing the space required to print the string on this window using the current font.</para>
      </returns>
    </member>
    <member name="M:VO.Window.StatusMessage(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Display a message in a window's status bar.</para>
      </summary>
      <param name="oHL">
      </param>
      <param name="ntype">
      </param>
    </member>
    <member name="M:VO.Window.SysLinkSelect(XSharp.__Usual)">
      <param name="oSysLinkSelectEvent">
      </param>
    </member>
    <member name="M:VO.Window.TabKeyDown(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a key press occurs in a tab control.</para>
      </summary>
      <param name="oControlNotifyEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.TabSelect(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a tab is selected in a tab control.</para>
      </summary>
      <param name="oControlNotifyEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.TabSelectionChanging(XSharp.__Usual)">
      <param name="oControlNotifyEvent">

      </param>
    </member>
    <member name="P:VO.Window.TextColor">
      <summary></summary>
    </member>
    <member name="M:VO.Window.TextPrint(XSharp.__Usual,XSharp.__Usual)">
      <summary>
        <para>Display a given string on the window at a specified location using the current font and the current pen color.</para>
      </summary>
      <param name="cText">
      </param>
      <param name="oPoint">
      </param>
    </member>
    <member name="M:VO.Window.Timer">
      <summary>
        <para>Provide a method to be invoked at specific intervals defined when the timer is registered though the RegisterTimer() method.</para>
      </summary>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="P:VO.Window.ToolBar">
      <summary></summary>
    </member>
    <member name="M:VO.Window.ToolBarHeightChanged(XSharp.__Usual)">
      <param name="oControlNotifyEvent">
      </param>
    </member>
    <member name="M:VO.Window.ToTop">
      <summary>
        <para>Move this window "to the front" of the windows lying on the desktop, giving it the input focus.</para>
      </summary>
    </member>
    <member name="M:VO.Window.TrayIconBalloonClicked(XSharp.__Usual)">
      <param name="dwID">
      </param>
    </member>
    <member name="M:VO.Window.TrayIconBalloonShown(XSharp.__Usual)">
      <param name="dwID">
      </param>
    </member>
    <member name="M:VO.Window.TrayIconBalloonTimeOut(XSharp.__Usual)">
      <param name="dwID">
      </param>
    </member>
    <member name="M:VO.Window.TrayIconClicked(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="dwID">
      </param>
      <param name="lRightButton">
      </param>
      <param name="lDoubleClick">
      </param>
    </member>
    <member name="M:VO.Window.TreeViewItemDelete(XSharp.__Usual)">
      <param name="oTreeViewDeleteEvent">
      </param>
    </member>
    <member name="M:VO.Window.TreeViewItemDrag(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a tree view item is dragged in a tree view control.</para>
      </summary>
      <param name="oTreeViewDragEvent">

      </param>

      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.TreeViewItemEdit(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a tree view item is edited in a tree view control.</para>
      </summary>
      <param name="oTreeViewEditEvent">

      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.TreeViewItemExpanded(XSharp.__Usual)">
      <param name="oTreeViewExpandedEvent">

      </param>
    </member>
    <member name="M:VO.Window.TreeViewItemExpanding(XSharp.__Usual)">
      <param name="oTreeViewExpandingEvent">

      </param>
    </member>
    <member name="M:VO.Window.TreeViewKeyDown(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a key is pressed in a tree view control.</para>
      </summary>
      <param name="oTreeViewKeyEvent">
      </param>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.TreeViewMouseButtonDoubleClick(XSharp.__Usual)">
      <param name="oTreeViewMouseEvent">

      </param>
    </member>
    <member name="M:VO.Window.TreeViewMouseButtonDown(XSharp.__Usual)">
      <param name="oTreeViewMouseEvent">

      </param>
    </member>
    <member name="M:VO.Window.TreeViewSelectionChanged(XSharp.__Usual)">
      <param name="oTreeViewSelectionEvent">

      </param>
    </member>
    <member name="M:VO.Window.TreeViewSelectionChanging(XSharp.__Usual)">
      <param name="oTreeViewSelectionEvent">

      </param>
    </member>
    <member name="M:VO.Window.Update">
      <summary>
        <para>Update the client area of the specified window.</para>
      </summary>
    </member>
    <member name="M:VO.Window.VerticalScroll(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a vertical scroll bar is scrolled.</para>
      </summary>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.VerticalSlide(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a vertical slider's thumb is dragged either by the mouse or the keyboard.</para>
      </summary>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>
    <member name="M:VO.Window.VerticalSpin(XSharp.__Usual)">
      <summary>
        <para>Provide a method that is invoked when a vertical spinner is spun.</para>
      </summary>
      <remarks>
        <inheritdoc cref="M:VO.Control.Dispatch(XSharp.__Usual)" />
      </remarks>
    </member>


    <member name="P:VO.Window.WindowArea">
      <summary>
        <para>The bounding box representing the minimal area which encloses the entire window (canvas area and non-canvas area), in canvas coordinates.</para>
      </summary>
    </member>
    <member name="T:VO.WindowHorizontalScrollBar">
      <summary>
        <para>Create a window horizontal scroll bar.</para>
      </summary>
    </member>
    <member name="M:VO.WindowHorizontalScrollBar.#ctor(XSharp.__Usual)">
      <inheritdoc cref="M:VO.ScrollBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)"/>
    </member>
    <member name="M:VO.WindowHorizontalScrollBar.Destroy">
      <summary></summary>
    </member>
    <member name="T:VO.WindowScrollBar">
      <summary>
        <para>Create a window scroll bar.</para>
      </summary>

    </member>
    <member name="M:VO.WindowScrollBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc cref="M:VO.ScrollBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)"/>
    </member>
    <member name="T:VO.WindowVerticalScrollBar">
      <summary>
        <para>Create a window vertical scroll bar. This is the base class for the horizontal and vertical window scrollbars.</para>
      </summary>
    </member>
    <member name="M:VO.WindowVerticalScrollBar.#ctor(XSharp.__Usual)">
      <inheritdoc cref="M:VO.ScrollBar.#ctor(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)"/>
    </member>
    <member name="M:VO.WindowVerticalScrollBar.Destroy">
      <summary></summary>
    </member>
    <member name="T:XSharp.ChildWinForm">
      <summary></summary>
    </member>
    <member name="M:XSharp.ChildWinForm.#ctor(XSharp.__Usual,XSharp.__Usual)">
      <inheritdoc />
      <param name="owner">

      </param>
      <param name="managed">

      </param>
    </member>
    <member name="M:XSharp.ChildWinForm.Activate(XSharp.__Usual)">
      <param name="o">

      </param>
    </member>
    <member name="M:XSharp.ChildWinForm.Close(XSharp.__Usual)">
      <param name="o">

      </param>
    </member>
    <member name="M:XSharp.ChildWinForm.DeActivate(XSharp.__Usual)">
      <param name="o">

      </param>
    </member>
    <member name="M:XSharp.ChildWinForm.Resize(XSharp.__Usual)">
      <param name="o">

      </param>
    </member>
    <member name="P:XSharp.ChildWinForm.WinForm">
      <summary></summary>
    </member>
    <member name="T:XSharp.VOWinFormApp">
      <summary></summary>
    </member>
    <member name="M:XSharp.VOWinFormApp.#ctor">
      <inheritdoc />
    </member>
    <member name="M:XSharp.VOWinFormApp.BeforeDispatch(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)">
      <param name="hWnd">

      </param>
      <param name="uMsg">

      </param>
      <param name="wParam">

      </param>
      <param name="lParam">

      </param>
    </member>
    <member name="M:XSharp.VOWinFormApp.RegisterWinForm(System.Windows.Forms.Form)">
      <param name="form">

      </param>
    </member>
    <member name="M:XSharp.VOWinFormApp.UnRegisterWinForm(System.Windows.Forms.Form)">
      <param name="form">

      </param>
    </member>
    <member name="T:XSharp.WinFormVOWindow">
      <summary></summary>
    </member>
    <member name="M:XSharp.WinFormVOWindow.#ctor">
      <inheritdoc />
    </member>
    <member name="M:XSharp.WinFormVOWindow.CloseHostForm(VO.Window)">
      <param name="window">

      </param>
    </member>
    <member name="M:XSharp.WinFormVOWindow.Initialize">
      <summary></summary>
    </member>
    <member name="P:XSharp.WinFormVOWindow.VOWindowHost">
      <summary></summary>
    </member>
    <member name="T:XSharp.WinFormVOWindowHost">
      <summary></summary>
    </member>
    <member name="M:XSharp.WinFormVOWindowHost.#ctor">
      <inheritdoc />
    </member>
    <member name="M:XSharp.WinFormVOWindowHost.#ctor(System.ComponentModel.IContainer)">
      <inheritdoc />
    </member>
    <member name="M:XSharp.WinFormVOWindowHost.#ctor(VO.Window,System.Windows.Forms.Control)">
      <inheritdoc />
    </member>
    <member name="M:XSharp.WinFormVOWindowHost.AdjustVOWindow">
      <summary></summary>
    </member>
    <member name="P:XSharp.WinFormVOWindowHost.ClassesNeedingTranslateTabToArrow">
      <summary></summary>
    </member>
    <member name="M:XSharp.WinFormVOWindowHost.Close">
      <summary></summary>
    </member>
    <member name="M:XSharp.WinFormVOWindowHost.Focus">
      <summary></summary>
    </member>
    <member name="P:XSharp.WinFormVOWindowHost.HostingControl">
      <summary></summary>
    </member>
    <member name="M:XSharp.WinFormVOWindowHost.IsHostingDataWindow">
      <summary></summary>
    </member>
    <member name="M:XSharp.WinFormVOWindowHost.ProcessDialogKey(System.Windows.Forms.Keys)">
      <param name="keyData">

      </param>
    </member>
    <member name="P:XSharp.WinFormVOWindowHost.VOWindow">
      <summary></summary>
    </member>
    <member name="P:XSharp.WinFormVOWindowHost.VOWindowClassName">
      <summary></summary>
    </member>
  </members>
</doc>
