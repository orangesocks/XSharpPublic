<?xml version="1.0" encoding="utf-8"?>
<!--
***********************************************************************************************
XSharp.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

This file defines the steps in the standard build process specific for C# .NET projects.
For example, it contains the step that actually calls the C# compiler.  The remainder
of the build process is defined in Microsoft.Common.targets, which is imported by 
this file.

Copyright (c) XSharp B.V.  All Rights Reserved
***********************************************************************************************
-->
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

   <Import Project="$(MSBuildThisFileDirectory)\XSharp.CurrentVersion.targets" />
  <UsingTask TaskName="XSharp.Build.Xsc"  AssemblyFile="$(MSBuildThisFileDirectory)XSharp.Build.dll"/>
  <UsingTask TaskName="CreateXSharpManifestResourceName" AssemblyFile="$(MSBuildThisFileDirectory)XSharp.Build.dll"/>
  <UsingTask TaskName="NativeResourceCompiler" AssemblyFile="$(MSBuildThisFileDirectory)XSharp.Build.dll" />

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    <DefaultLanguageSourceExtension>.prg</DefaultLanguageSourceExtension>
    <Language>XSharp</Language>
    <TargetRuntime>Managed</TargetRuntime>
    <AlwaysUseNumericalSuffixInItemNames>true</AlwaysUseNumericalSuffixInItemNames>
    <DefineCommonItemSchemas Condition=" '$(DefineCommonItemSchemas)' == '' ">true</DefineCommonItemSchemas>
	<!-- The next line triggers the import of all kind of XAML reference schemas from the Microsoft.Common.CurrentVersion.Targets -->
    <DefineCommonReferenceSchemas Condition=" '$(DefineCommonReferenceSchemas)' == '' ">true</DefineCommonReferenceSchemas>
	<!-- The next line triggers the import of all kind of project capabilities from the Microsoft.Common.CurrentVersion.Targets -->
    <DefineCommonCapabilities Condition=" '$(DefineCommonCapabilities)' == '' ">true</DefineCommonCapabilities>
    <SynthesizeLinkMetadata Condition=" '$(SynthesizeLinkMetadata)' == '' and '$(HasSharedItems)' == 'true' ">true</SynthesizeLinkMetadata>
    <Utf8Output Condition="'$(Utf8Output)' == ''">true</Utf8Output>
    <!-- NoCompilerStandardLib maps to the compiler's /nostdlib option. By default we always
           want that switch to be passed to the compiler so that either we or the user
           provides the references
           NoStdLib on the other hand indicates that the user doesn't want standard references
           so only if NoStdLib isn't set to true, will we provide the standard references
      -->
    <NoCompilerStandardLib Condition=" '$(NoCompilerStandardLib)' == '' ">true</NoCompilerStandardLib>
    <ErrorEndLocation Condition="'$(BuildingInsideVisualStudio)' == 'true' and '$(ErrorEndLocation)' == ''">true</ErrorEndLocation>
    <!-- When building inside VS, by default use the same language for compiler messages as VS itself does. -->
    <PreferredUILang Condition="'$(BuildingInsideVisualStudio)' == 'true' and '$(PreferredUILang)' == ''">$([System.Globalization.CultureInfo]::CurrentUICulture.Name)</PreferredUILang>
    <!-- Add any "automatic" compiler references that need to be resolved when NoCompilerStandardLib is set
         but the user hasn't told us to not include standard references -->

    <!-- Make sure that we have full paths when compiling inside VS -->
     <GenerateFullPaths Condition="'$(BuildingInsideVisualStudio)'=='true'">true</GenerateFullPaths>

  </PropertyGroup>
  <ItemGroup Condition=" '$(NoCompilerStandardLib)' == 'true' and '$(NoStdLib)' != 'true' ">
    <!-- Note that unlike VB, X# does not automatically locate System.dll as a "standard library"
           instead the reference is always passed from the project. Also, for mscorlib.dll
           we need to provide the explicit location in order to maintain the correct behaviour
      -->
    <_ExplicitReference Include="$(FrameworkPathOverride)\mscorlib.dll" />
  </ItemGroup>
  <ItemGroup>
    <AvailableItemName Include="NativeResource" />
  </ItemGroup>

  <!--
    The CreateManifestResourceNames target create the manifest resource names from the .RESX
    files.

        [IN]
        @(EmbeddedResource) - The list of EmbeddedResource items that have been pre-processed to add metadata about resource type
                              Expected Metadata "Type" can either be "Resx" or "Non-Resx"

        [OUT]
        @(EmbeddedResource) - EmbeddedResource items with metadata


    For .NET applications the transformation is:

        Resources1.resx => RootNamespace.Resources1 => Build into main assembly
        SubFolder\Resources1.resx => RootNamespace.SubFolder.Resources1 => Build into main assembly
        Resources1.fr.resx => RootNamespace.Resources1.fr => Build into satellite assembly
        Resources1.notaculture.resx => RootNamespace.Resources1.notaculture => Build into main assembly

    	For other project systems, this transformation may be different.
    -->

  <PropertyGroup>
    <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>
  </PropertyGroup>

  <Target
      Name="CreateManifestResourceNames"
      Condition="'@(EmbeddedResource)' != '' "
      DependsOnTargets="$(CreateManifestResourceNamesDependsOn)"
  >

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>

    <!-- Create manifest names for culture and non-culture Resx files, and for non-culture Non-Resx resources -->
    <CreateXSharpManifestResourceName
          ResourceFiles="@(EmbeddedResource)"
          RootNamespace="$(RootNamespace)"
          Condition="'%(EmbeddedResource.ManifestResourceName)' == '' and ('%(EmbeddedResource.WithCulture)' == 'false' or '%(EmbeddedResource.Type)' == 'Resx')">

      <Output TaskParameter="ResourceFilesWithManifestResourceNames" ItemName="_Temporary" />

    </CreateXSharpManifestResourceName>

    <!-- Create manifest names for all culture non-resx resources -->
    <CreateXSharpManifestResourceName
          ResourceFiles="@(EmbeddedResource)"
          RootNamespace="$(RootNamespace)"
          PrependCultureAsDirectory="false"
          Condition="'%(EmbeddedResource.ManifestResourceName)' == '' and '%(EmbeddedResource.WithCulture)' == 'true' and '%(EmbeddedResource.Type)' == 'Non-Resx'">

      <Output TaskParameter="ResourceFilesWithManifestResourceNames" ItemName="_Temporary" />

    </CreateXSharpManifestResourceName>

    <ItemGroup>
      <EmbeddedResource Remove="@(EmbeddedResource)" Condition="'%(EmbeddedResource.ManifestResourceName)' == ''"/>
      <EmbeddedResource Include="@(_Temporary)" />
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>

  </Target>

  <PropertyGroup Condition="'$(IntermediateOutputPath)'!=''">
    <!--
      If we've set IntermediateOutputPath in the project file, then we want to override the
      setting of BaseIntermediateOutputPath in Microsoft.Common.targets, which sets it to "obj\".
      That causes some stuff to be written to the obj directory even though IntermediateOutputPath
      has been explicitly set by the user.  Setting BaseIntermediateOutputPath here fixes that.
      -->

    <BaseIntermediateOutputPath>$(IntermediateOutputPath)</BaseIntermediateOutputPath>
  </PropertyGroup>

  <PropertyGroup>
    <CoreCompileDependsOn>_ComputeNonExistentFileProperty</CoreCompileDependsOn>
  </PropertyGroup>

  <Target Name="AfterResGen">

    <NativeResourceCompiler
       Sources="@(NativeResource)"
       IncludePaths="$(IncludePaths)"
       OutputPath="$(IntermediateOutputPath)"
       EmitDebugInformation="$(EmitDebugInformation)"
       DefineConstants="$(DefineConstants)"
       Condition="'@(NativeResource)' != ''">
    </NativeResourceCompiler>

    <CreateItem Include="$(IntermediateOutputPath)NativeResources.Res" Condition="'@(NativeResource)' != ''">

      <Output TaskParameter="Include" ItemName="Win32Resource" />
      <!-- this causes the .res file to be deleted on a Clean -->
      <Output TaskParameter="Include" ItemName="FileWrites" />

    </CreateItem>
    
  </Target>
   <!-- Fix up FrameworkPathOverride, which is primarily used to determine the location of mscorlib.dll in the 
        (relatively uncommon) situation where the reference assemblies, in which it's usually found, are not 
        installed. -->
   <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
      <FrameworkPathOverride Condition="!Exists('$(FrameworkPathOverride)\mscorlib.dll')">$(MSBuildFrameworkToolsPath)</FrameworkPathOverride>
   </PropertyGroup>

  <Target Name="GetTargetPath" DependsOnTargets="PrepareForBuild" Outputs="$(TargetPath)" />

  <Target
          Name="CoreCompile"
          Inputs="$(MSBuildAllProjects);
                @(Compile);
                @(_CoreCompileResourceInputs);
                $(ApplicationIcon);
                $(AssemblyOriginatorKeyFile);
                @(ReferencePath);
                @(CompiledLicenseFile);
                @(EmbeddedDocumentation);
                @(Win32Resource);
                @(CustomAdditionalCompileInputs)"
          Outputs="@(DocFileItem);
                 @(IntermediateAssembly);
                 $(NonExistentFile);
                 @(_DebugSymbolsIntermediatePath);
                 @(CustomAdditionalCompileOutputs)"
          DependsOnTargets="$(CoreCompileDependsOn)"
    >
    <ItemGroup>
      <_NonMacroReferencePath Include="@(ReferencePath)" Condition="%(ReferencePath.OutputItemType) != 'macro'" />
      <_MacroProjectReferencePath Include="@(ReferencePath)" Condition="%(ReferencePath.OutputItemType) == 'macro'" />
    </ItemGroup>
    
    <!-- Prefer32Bit was introduced in .NET 4.5. Set it to false if we are targeting 4.0 -->
    <PropertyGroup Condition="('$(TargetFrameworkVersion)' == 'v4.0')">
      <Prefer32Bit>false</Prefer32Bit>
    </PropertyGroup>
    
    <PropertyGroup Condition="'$(UseSharedCompilation)' == ''">
      <UseSharedCompilation>true</UseSharedCompilation>
    </PropertyGroup>

    <Xsc Condition=" '%(_CoreCompileResourceInputs.WithCulture)' != 'true' "
	    AdditionalLibPaths="$(AdditionalLibPaths)"
	    AddModules="@(AddModules)"
	    AdditionalFiles="@(AdditionalFiles)"
	    AllowUnsafeBlocks="$(Unsafe)"
	    Analyzers="@(Analyzer)"
	    ApplicationConfiguration="$(AppConfigForCompiler)"
	    BaseAddress="$(BaseAddress)"
	    CheckForOverflowUnderflow="$(CheckForOverflowUnderflow)"
	    CodeAnalysisRuleSet="$(ResolvedCodeAnalysisRuleSet)"
	    CodePage="$(CodePage)"
	    CommandLineOption="$(CommandLineOption)"
	    CompilerPath="$(XSharpPath)"
	    DebugType="$(DebugType)"
	    DefineConstants="$(DefineConstants)"
	    DelaySign="$(DelaySign)"
	    Deterministic="$(Deterministic)"
	    Dialect="$(Dialect)"
	    DisabledWarnings="$(DisabledWarnings)"
	    DocumentationFile="@(DocFileItem)"
	    EmitDebugInformation="$(EmitDebugInformation)"
	    EnvironmentVariables="$(XscEnvironment)"
	    ErrorEndLocation="$(ErrorEndLocation)"
	    ErrorLog="$(ErrorLog)"
	    ErrorReport="$(ErrorReport)"
	    Features="$(Features)"
	    FileAlignment="$(FileAlignment)"
	    GenerateFullPaths="$(GenerateFullPaths)"
	    HighEntropyVA="$(HighEntropyVA)"
	    IncludePaths="$(IncludePaths)"
	    KeyContainer="$(KeyContainerName)"
	    KeyFile="$(AssemblyOriginatorKeyFile)"
	    LangVersion="$(LangVersion)"
	    LinkResources="@(LinkResource)"
	    MainEntryPoint="$(StartupObject)"
	    ModuleAssemblyName="$(ModuleAssemblyName)"
	    NoConfig="true"
	    NoLogo="$(NoLogo)"
	    NoStandardDefs="$(NoStandardDefs)"
		  NoStandardLib="$(NoCompilerStandardLib)"
	    NoWin32Manifest="$(NoWin32Manifest)"
	    Optimize="$(Optimize)"
	    OutputAssembly="@(IntermediateAssembly)"
	    PathMap="$(PathMap)"
	    PdbFile="$(PdbFile)"
	    Platform="$(PlatformTarget)"
	    Prefer32Bit="$(Prefer32Bit)"
	    PreferredUILang="$(PreferredUILang)"
	    References="@(_NonMacroReferencePath)"
	    ReportAnalyzer="$(ReportAnalyzer)"
	    Resources="@(_CoreCompileResourceInputs);@(CompiledLicenseFile)"
	    ResponseFiles="$(CompilerResponseFile)"
	    RootNamespace="$(RootNamespace)"
	    SkipCompilerExecution="$(SkipCompilerExecution)"
	    Sources="@(Compile)"
	    SubsystemVersion="$(SubsystemVersion)"
	    TargetType="$(OutputType)"
	    ToolExe="$(XscToolExe)"
	    ToolPath="$(XscToolPath)"
	    TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
	    UseSharedCompilation="$(UseSharedCompilation)"
	    Utf8Output="$(Utf8Output)"
	    VulcanCompatibleResources="$(VulcanCompatibleResources)"
	    VsSessionGuid="$(VsSessionGuid)"
	    WarningLevel="$(WarningLevel)"
	    WarningsAsErrors="$(WarningsAsErrors)"
	    WarningsNotAsErrors="$(WarningsNotAsErrors)"
	    Win32Icon="$(ApplicationIcon)"
	    Win32Resource="@(Win32Resource)"
	    AZ="$(AZ)"
	    CS="$(CS)"
	    INS="$(INS)"
	    LB="$(LB)"
      NamedArgs="$(NamedArgs)"
	    NS="$(NS)"
	    OVF="$(OVF)"
	    PPO="$(PPO)"
	    VO1="$(VO1)"
	    VO2="$(VO2)"
	    VO3="$(VO3)"
	    VO4="$(VO4)"
	    VO5="$(VO5)"
	    VO6="$(VO6)"
	    VO7="$(VO7)"
	    VO8="$(VO8)"
	    VO9="$(VO9)"
	    VO10="$(VO10)"
	    VO11="$(VO11)"
	    VO12="$(VO12)"
	    VO13="$(VO13)"
	    VO14="$(VO14)"
	    VO15="$(VO15)"
	    VO16="$(VO16)" 
    />

    <ItemGroup>
      <_CoreCompileResourceInputs Remove="@(_CoreCompileResourceInputs)" />
    </ItemGroup>

    <CallTarget Targets="$(TargetsTriggeredByCompilation)" Condition="'$(TargetsTriggeredByCompilation)' != ''"/>
  </Target>
</Project>