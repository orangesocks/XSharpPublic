// Functions.prg
// Created by    : robert
// Creation Date : 8/8/2017 11:57:43 AM
// Created for   :
// WorkStation   : ZEUS

USING System.Collections.Generic
USING XSharpModel
USING System.Windows.Forms
USING System.IO
STATIC CLASS XFuncs

STATIC METHOD FindItemsOfType(oProject AS XProject, xType AS XFileType, aProjects := NULL  AS List<XProject>) AS List<XFile>
	VAR aResult := List<XFile>{}
	IF (aProjects == NULL)
		aProjects := List<XProject>{}
	ENDIF
	FOREACH fileName AS STRING IN oProject:OtherFiles
      VAR oOther := XFile{fileName, oProject}
		IF oOther:XFileType == xType
			aResult:Add(oOther)
		ENDIF
	NEXT
	aProjects:Add(oProject)
	FOREACH oRef AS XProject IN oProject:ReferencedProjects
		IF !aProjects:Contains(oRef)
			aProjects:Add(oRef)
			VAR aTmp := XFuncs.FindItemsOfType(oRef, xType, aProjects)
			aResult:AddRange(aTmp)
		ENDIF
	NEXT
	RETURN aResult

   STATIC METHOD QuestionBox(cMessage AS STRING , cCaption AS STRING) AS LOGIC
	   RETURN MessageBox.Show(cMessage , cCaption , MessageBoxButtons.YesNo , MessageBoxIcon.Question) == DialogResult.Yes

STATIC METHOD ErrorBox(cMessage AS STRING , cCaption AS STRING) AS VOID
      MessageBox.Show(cMessage , cCaption , MessageBoxButtons.OK , MessageBoxIcon.Error)
   RETURN
   STATIC METHOD ErrorBox(cMessage AS STRING) AS VOID
      MessageBox.Show(cMessage , "XSharp"  , MessageBoxButtons.OK , MessageBoxIcon.Error)
   RETURN
   STATIC METHOD WarningBox(cMessage AS STRING , cCaption AS STRING) AS VOID
      MessageBox.Show(cMessage , cCaption , MessageBoxButtons.OK , MessageBoxIcon.Warning)
   RETURN
   STATIC METHOD WarningBox(cMessage AS STRING) AS VOID
      MessageBox.Show(cMessage , "XSharp"  , MessageBoxButtons.OK , MessageBoxIcon.Warning)
   RETURN

   STATIC METHOD GetModuleFilenameFromBinary(cFileName AS STRING) AS STRING
      LOCAL cModuleName := "", cModuleFilename := "" AS STRING
      IF SplitBinaryFilename(cFileName , REF cModuleName , REF cModuleFilename)
         RETURN cModuleFilename
      END IF
   RETURN NULL

   STATIC METHOD SplitBinaryFilename(cFileName AS STRING , cModuleName REF STRING , cModuleFilename REF STRING) AS LOGIC
      LOCAL lOk AS LOGIC
      LOCAL nAt AS INT
      TRY
         nAt := cFileName:LastIndexOf('.')
         cFileName := cFileName:Substring(0 , nAt)
         nAt := cFileName:LastIndexOf('.')
         cFileName := cFileName:Substring(0 , nAt)
         cModuleFilename := cFileName
         nAt := cFileName:LastIndexOf('\\')
         cFileName := cFileName:Substring(nAt + 1)
         cModuleName := cFileName
         lOk := TRUE
	  CATCH
		 lOk := FALSE
      END TRY
   RETURN lOk
	STATIC METHOD WriteHeader(oGenerator AS XIDE.CodeGenerator, cTool AS STRING) AS VOID
		oGenerator:AddLine("//------------------------------------------------------------------------------")
		oGenerator:AddLine("//  <auto-generated>")
		oGenerator:AddLine("//     This code was generated by a tool.")
		oGenerator:AddLine("//     Runtime version: " + Environment.Version:ToString())
		oGenerator:AddLine("//     Generator      : "+cTool+" " + TYPEOF(XFuncs):Assembly:GetName():Version:ToString())
		oGenerator:AddLine("//     Timestamp      : " + System.DateTime.Now:ToString())
		oGenerator:AddLine("//     ")
		oGenerator:AddLine("//     Changes to this file may cause incorrect behavior and may be lost if")
		oGenerator:AddLine("//     the code is regenerated.")
		oGenerator:AddLine("//  </auto-generated>")
		oGenerator:AddLine("//------------------------------------------------------------------------------")
		oGenerator:AddLine("")

	STATIC METHOD EnsureFileNodeExists(oXproject AS XSharpModel.XProject , fileName AS STRING) AS VOID
		IF !System.IO.File.Exists(fileName)
			System.IO.File.WriteAllText(fileName,"")
		END IF
		IF !oXProject:ProjectNode:HasFileNode(fileName)
			oXProject:ProjectNode:AddFileNode(fileName)
		ENDIF

	STATIC METHOD DeleteFile(oXproject AS XSharpModel.XProject , cFile AS STRING) AS VOID
		IF oXProject:ProjectNode:HasFileNode(cFile)
			oXProject:ProjectNode:DeleteFileNode(cFile)
		ENDIF
		oXProject:RemoveFile(cFile)
		IF System.IO.File.Exists(cFile)
			TRY
                System.IO.File.SetAttributes(cFile, FileAttributes.Normal)
				System.IO.File.Delete(cFile)
			END TRY
		END IF
END CLASS


