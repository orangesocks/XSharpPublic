// <auto-generated>
using System.Reflection;

namespace Microsoft.CodeAnalysis
{
	internal partial class CodeAnalysisResources : Microsoft.CodeAnalysis.CSharp.CodeAnalysisResources
	{
		
	}
}

namespace Microsoft.CodeAnalysis.CSharp
{ 
    internal partial class CodeAnalysisResources
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(CodeAnalysisResources)));
        internal static global::System.Globalization.CultureInfo Culture { get; set; }
#if !NET20
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
#endif
        internal static string GetResourceString(string resourceKey, string defaultValue = null) =>  ResourceManager.GetString(resourceKey, Culture);
        /// <summary>Output kind not supported.</summary>
        internal static string @OutputKindNotSupported => GetResourceString("OutputKindNotSupported");
        /// <summary>Path returned by {0}.ResolveMetadataFile must be absolute: '{1}'</summary>
        internal static string @PathReturnedByResolveMetadataFileMustBeAbsolute => GetResourceString("PathReturnedByResolveMetadataFileMustBeAbsolute");
        /// <summary>Assembly must have at least one module.</summary>
        internal static string @AssemblyMustHaveAtLeastOneModule => GetResourceString("AssemblyMustHaveAtLeastOneModule");
        /// <summary>Module copy can't be used to create an assembly metadata.</summary>
        internal static string @ModuleCopyCannotBeUsedToCreateAssemblyMetadata => GetResourceString("ModuleCopyCannotBeUsedToCreateAssemblyMetadata");
        /// <summary>Unresolved:</summary>
        internal static string @Unresolved => GetResourceString("Unresolved");
        /// <summary>assembly</summary>
        internal static string @Assembly => GetResourceString("Assembly");
        /// <summary>class</summary>
        internal static string @Class1 => GetResourceString("Class1");
        /// <summary>constructor</summary>
        internal static string @Constructor => GetResourceString("Constructor");
        /// <summary>delegate</summary>
        internal static string @Delegate1 => GetResourceString("Delegate1");
        /// <summary>enum</summary>
        internal static string @Enum1 => GetResourceString("Enum1");
        /// <summary>event</summary>
        internal static string @Event1 => GetResourceString("Event1");
        /// <summary>field</summary>
        internal static string @Field => GetResourceString("Field");
        /// <summary>type parameter</summary>
        internal static string @TypeParameter => GetResourceString("TypeParameter");
        /// <summary>interface</summary>
        internal static string @Interface1 => GetResourceString("Interface1");
        /// <summary>method</summary>
        internal static string @Method => GetResourceString("Method");
        /// <summary>module</summary>
        internal static string @Module => GetResourceString("Module");
        /// <summary>parameter</summary>
        internal static string @Parameter => GetResourceString("Parameter");
        /// <summary>property, indexer</summary>
        internal static string @Property => GetResourceString("Property");
        /// <summary>return</summary>
        internal static string @Return1 => GetResourceString("Return1");
        /// <summary>struct</summary>
        internal static string @Struct1 => GetResourceString("Struct1");
        /// <summary>Can't create a reference to a submission.</summary>
        internal static string @CannotCreateReferenceToSubmission => GetResourceString("CannotCreateReferenceToSubmission");
        /// <summary>Can't create a reference to a module.</summary>
        internal static string @CannotCreateReferenceToModule => GetResourceString("CannotCreateReferenceToModule");
        /// <summary>&lt;in-memory assembly&gt;</summary>
        internal static string @InMemoryAssembly => GetResourceString("InMemoryAssembly");
        /// <summary>&lt;in-memory module&gt;</summary>
        internal static string @InMemoryModule => GetResourceString("InMemoryModule");
        /// <summary>Size has to be positive.</summary>
        internal static string @SizeHasToBePositive => GetResourceString("SizeHasToBePositive");
        /// <summary>Assembly file not found</summary>
        internal static string @AssemblyFileNotFound => GetResourceString("AssemblyFileNotFound");
        /// <summary>Can't embed interop types from module.</summary>
        internal static string @CannotEmbedInteropTypesFromModule => GetResourceString("CannotEmbedInteropTypesFromModule");
        /// <summary>Can't alias a module.</summary>
        internal static string @CannotAliasModule => GetResourceString("CannotAliasModule");
        /// <summary>Invalid alias.</summary>
        internal static string @InvalidAlias => GetResourceString("InvalidAlias");
        /// <summary>{0}.GetMetadata() must return an instance of {1}.</summary>
        internal static string @GetMetadataMustReturnInstance => GetResourceString("GetMetadataMustReturnInstance");
        /// <summary>Value too large to be represented as a 30 bit unsigned integer.</summary>
        internal static string @Value_too_large_to_be_represented_as_a_30_bit_unsigned_integer => GetResourceString("Value_too_large_to_be_represented_as_a_30_bit_unsigned_integer");
        /// <summary>Arrays with more than one dimension cannot be serialized.</summary>
        internal static string @Arrays_with_more_than_one_dimension_cannot_be_serialized => GetResourceString("Arrays_with_more_than_one_dimension_cannot_be_serialized");
        /// <summary>Invalid assembly name: '{0}'</summary>
        internal static string @InvalidAssemblyName => GetResourceString("InvalidAssemblyName");
        /// <summary>Absolute path expected.</summary>
        internal static string @AbsolutePathExpected => GetResourceString("AbsolutePathExpected");
        /// <summary>A key in the pathMap is empty.</summary>
        internal static string @EmptyKeyInPathMap => GetResourceString("EmptyKeyInPathMap");
        /// <summary>A value in the pathMap is null.</summary>
        internal static string @NullValueInPathMap => GetResourceString("NullValueInPathMap");
        /// <summary>Compilation options must not have errors.</summary>
        internal static string @CompilationOptionsMustNotHaveErrors => GetResourceString("CompilationOptionsMustNotHaveErrors");
        /// <summary>Return type can't be a value type, pointer, by-ref or open generic type</summary>
        internal static string @ReturnTypeCannotBeValuePointerbyRefOrOpen => GetResourceString("ReturnTypeCannotBeValuePointerbyRefOrOpen");
        /// <summary>Return type can't be void, by-ref or open generic type</summary>
        internal static string @ReturnTypeCannotBeVoidByRefOrOpen => GetResourceString("ReturnTypeCannotBeVoidByRefOrOpen");
        /// <summary>Type must be same as host object type of previous submission.</summary>
        internal static string @TypeMustBeSameAsHostObjectTypeOfPreviousSubmission => GetResourceString("TypeMustBeSameAsHostObjectTypeOfPreviousSubmission");
        /// <summary>Previous submission has errors.</summary>
        internal static string @PreviousSubmissionHasErrors => GetResourceString("PreviousSubmissionHasErrors");
        /// <summary>Invalid output kind for submission. DynamicallyLinkedLibrary expected.</summary>
        internal static string @InvalidOutputKindForSubmission => GetResourceString("InvalidOutputKindForSubmission");
        /// <summary>Invalid compilation options -- submission can't be signed.</summary>
        internal static string @InvalidCompilationOptions => GetResourceString("InvalidCompilationOptions");
        /// <summary>Resource stream provider should return non-null stream.</summary>
        internal static string @ResourceStreamProviderShouldReturnNonNullStream => GetResourceString("ResourceStreamProviderShouldReturnNonNullStream");
        /// <summary>Reference resolver should return readable non-null stream.</summary>
        internal static string @ReferenceResolverShouldReturnReadableNonNullStream => GetResourceString("ReferenceResolverShouldReturnReadableNonNullStream");
        /// <summary>Empty or invalid resource name</summary>
        internal static string @EmptyOrInvalidResourceName => GetResourceString("EmptyOrInvalidResourceName");
        /// <summary>Empty or invalid file name</summary>
        internal static string @EmptyOrInvalidFileName => GetResourceString("EmptyOrInvalidFileName");
        /// <summary>Resource data provider should return non-null stream</summary>
        internal static string @ResourceDataProviderShouldReturnNonNullStream => GetResourceString("ResourceDataProviderShouldReturnNonNullStream");
        /// <summary>File not found.</summary>
        internal static string @FileNotFound => GetResourceString("FileNotFound");
        /// <summary>Path returned by {0}.ResolveStrongNameKeyFile must be absolute: '{1}'</summary>
        internal static string @PathReturnedByResolveStrongNameKeyFileMustBeAbsolute => GetResourceString("PathReturnedByResolveStrongNameKeyFileMustBeAbsolute");
        /// <summary>type must be a subclass of SyntaxAnnotation.</summary>
        internal static string @TypeMustBeASubclassOfSyntaxAnnotation => GetResourceString("TypeMustBeASubclassOfSyntaxAnnotation");
        /// <summary>Invalid module name specified in metadata module '{0}': '{1}'</summary>
        internal static string @InvalidModuleName => GetResourceString("InvalidModuleName");
        /// <summary>File size exceeds maximum allowed size of a valid metadata file.</summary>
        internal static string @FileSizeExceedsMaximumAllowed => GetResourceString("FileSizeExceedsMaximumAllowed");
        /// <summary>Name cannot be null.</summary>
        internal static string @NameCannotBeNull => GetResourceString("NameCannotBeNull");
        /// <summary>Name cannot be empty.</summary>
        internal static string @NameCannotBeEmpty => GetResourceString("NameCannotBeEmpty");
        /// <summary>Name cannot start with whitespace.</summary>
        internal static string @NameCannotStartWithWhitespace => GetResourceString("NameCannotStartWithWhitespace");
        /// <summary>Name contains invalid characters.</summary>
        internal static string @NameContainsInvalidCharacter => GetResourceString("NameContainsInvalidCharacter");
        /// <summary>The span does not include the start of a line.</summary>
        internal static string @SpanDoesNotIncludeStartOfLine => GetResourceString("SpanDoesNotIncludeStartOfLine");
        /// <summary>The span does not include the end of a line.</summary>
        internal static string @SpanDoesNotIncludeEndOfLine => GetResourceString("SpanDoesNotIncludeEndOfLine");
        /// <summary>'start' must not be negative</summary>
        internal static string @StartMustNotBeNegative => GetResourceString("StartMustNotBeNegative");
        /// <summary>'end' must not be less than 'start'</summary>
        internal static string @EndMustNotBeLessThanStart => GetResourceString("EndMustNotBeLessThanStart");
        /// <summary>Invalid content type</summary>
        internal static string @InvalidContentType => GetResourceString("InvalidContentType");
        /// <summary>Expected non-empty public key</summary>
        internal static string @ExpectedNonEmptyPublicKey => GetResourceString("ExpectedNonEmptyPublicKey");
        /// <summary>Invalid size of public key token.</summary>
        internal static string @InvalidSizeOfPublicKeyToken => GetResourceString("InvalidSizeOfPublicKeyToken");
        /// <summary>Invalid characters in assembly name</summary>
        internal static string @InvalidCharactersInAssemblyName => GetResourceString("InvalidCharactersInAssemblyName");
        /// <summary>Invalid characters in assembly culture name</summary>
        internal static string @InvalidCharactersInAssemblyCultureName => GetResourceString("InvalidCharactersInAssemblyCultureName");
        /// <summary>Stream must support read and seek operations.</summary>
        internal static string @StreamMustSupportReadAndSeek => GetResourceString("StreamMustSupportReadAndSeek");
        /// <summary>Stream must be readable.</summary>
        internal static string @StreamMustSupportRead => GetResourceString("StreamMustSupportRead");
        /// <summary>Stream must be writable.</summary>
        internal static string @StreamMustSupportWrite => GetResourceString("StreamMustSupportWrite");
        /// <summary>PDB stream should not be given when embedding PDB into the PE stream.</summary>
        internal static string @PdbStreamUnexpectedWhenEmbedding => GetResourceString("PdbStreamUnexpectedWhenEmbedding");
        /// <summary>PDB stream should not be given when emitting metadata only.</summary>
        internal static string @PdbStreamUnexpectedWhenEmittingMetadataOnly => GetResourceString("PdbStreamUnexpectedWhenEmittingMetadataOnly");
        /// <summary>Metadata PE stream should not be given when emitting metadata only.</summary>
        internal static string @MetadataPeStreamUnexpectedWhenEmittingMetadataOnly => GetResourceString("MetadataPeStreamUnexpectedWhenEmittingMetadataOnly");
        /// <summary>Including private members should not be used when emitting to the secondary assembly output.</summary>
        internal static string @IncludingPrivateMembersUnexpectedWhenEmittingToMetadataPeStream => GetResourceString("IncludingPrivateMembersUnexpectedWhenEmittingToMetadataPeStream");
        /// <summary>Must include private members unless emitting a ref assembly.</summary>
        internal static string @MustIncludePrivateMembersUnlessRefAssembly => GetResourceString("MustIncludePrivateMembersUnlessRefAssembly");
        /// <summary>Embedding PDB is not allowed when emitting metadata.</summary>
        internal static string @EmbeddingPdbUnexpectedWhenEmittingMetadata => GetResourceString("EmbeddingPdbUnexpectedWhenEmittingMetadata");
        /// <summary>Cannot target net module when emitting ref assembly.</summary>
        internal static string @CannotTargetNetModuleWhenEmittingRefAssembly => GetResourceString("CannotTargetNetModuleWhenEmittingRefAssembly");
        /// <summary>Invalid hash.</summary>
        internal static string @InvalidHash => GetResourceString("InvalidHash");
        /// <summary>Unsupported hash algorithm.</summary>
        internal static string @UnsupportedHashAlgorithm => GetResourceString("UnsupportedHashAlgorithm");
        /// <summary>Inconsistent language versions</summary>
        internal static string @InconsistentLanguageVersions => GetResourceString("InconsistentLanguageVersions");
        /// <summary>Win32 resources, assumed to be in COFF object format, have one or more invalid relocation header values.</summary>
        internal static string @CoffResourceInvalidRelocation => GetResourceString("CoffResourceInvalidRelocation");
        /// <summary>Win32 resources, assumed to be in COFF object format, have an invalid section size.</summary>
        internal static string @CoffResourceInvalidSectionSize => GetResourceString("CoffResourceInvalidSectionSize");
        /// <summary>Win32 resources, assumed to be in COFF object format, have one or more invalid symbol values.</summary>
        internal static string @CoffResourceInvalidSymbol => GetResourceString("CoffResourceInvalidSymbol");
        /// <summary>Win32 resources, assumed to be in COFF object format, are missing one or both of sections '.rsrc$01' and '.rsrc$02'</summary>
        internal static string @CoffResourceMissingSection => GetResourceString("CoffResourceMissingSection");
        /// <summary>Icon stream is not in the expected format.</summary>
        internal static string @IconStreamUnexpectedFormat => GetResourceString("IconStreamUnexpectedFormat");
        /// <summary>Invalid culture name: '{0}'</summary>
        internal static string @InvalidCultureName => GetResourceString("InvalidCultureName");
        /// <summary>WindowsRuntime identity can't be retargetable</summary>
        internal static string @WinRTIdentityCantBeRetargetable => GetResourceString("WinRTIdentityCantBeRetargetable");
        /// <summary>PE image not available.</summary>
        internal static string @PEImageNotAvailable => GetResourceString("PEImageNotAvailable");
        /// <summary>Assembly signing not supported.</summary>
        internal static string @AssemblySigningNotSupported => GetResourceString("AssemblySigningNotSupported");
        /// <summary>References to XML documents are not supported.</summary>
        internal static string @XmlReferencesNotSupported => GetResourceString("XmlReferencesNotSupported");
        /// <summary>Could not locate the rule set file '{0}'.</summary>
        internal static string @FailedToResolveRuleSetName => GetResourceString("FailedToResolveRuleSetName");
        /// <summary>An error occurred while loading the included rule set file {0} - {1}</summary>
        internal static string @InvalidRuleSetInclude => GetResourceString("InvalidRuleSetInclude");
        /// <summary>Analyzer Failure</summary>
        internal static string @CompilerAnalyzerFailure => GetResourceString("CompilerAnalyzerFailure");
        /// <summary>Analyzer '{0}' threw an exception of type '{1}' with message '{2}'.
        /// {3}</summary>
        internal static string @CompilerAnalyzerThrows => GetResourceString("CompilerAnalyzerThrows");
        /// <summary>Analyzer '{0}' threw the following exception:
        /// '{1}'.</summary>
        internal static string @CompilerAnalyzerThrowsDescription => GetResourceString("CompilerAnalyzerThrowsDescription");
        /// <summary>Analyzer Driver Failure</summary>
        internal static string @AnalyzerDriverFailure => GetResourceString("AnalyzerDriverFailure");
        /// <summary>Analyzer driver threw an exception of type '{0}' with message '{1}'.</summary>
        internal static string @AnalyzerDriverThrows => GetResourceString("AnalyzerDriverThrows");
        /// <summary>Analyzer driver threw the following exception:
        /// '{0}'.</summary>
        internal static string @AnalyzerDriverThrowsDescription => GetResourceString("AnalyzerDriverThrowsDescription");
        /// <summary>PE image doesn't contain managed metadata.</summary>
        internal static string @PEImageDoesntContainManagedMetadata => GetResourceString("PEImageDoesntContainManagedMetadata");
        /// <summary>The changes must not overlap.</summary>
        internal static string @ChangesMustNotOverlap => GetResourceString("ChangesMustNotOverlap");
        /// <summary>A DiagnosticDescriptor must have an Id that is neither null nor an empty string nor a string that only contains white space.</summary>
        internal static string @DiagnosticIdCantBeNullOrWhitespace => GetResourceString("DiagnosticIdCantBeNullOrWhitespace");
        /// <summary>A SuppressionDescriptor must have an Id that is neither null nor an empty string nor a string that only contains white space.</summary>
        internal static string @SuppressionIdCantBeNullOrWhitespace => GetResourceString("SuppressionIdCantBeNullOrWhitespace");
        /// <summary>The rule set file has duplicate rules for '{0}' with differing actions '{1}' and '{2}'.</summary>
        internal static string @RuleSetHasDuplicateRules => GetResourceString("RuleSetHasDuplicateRules");
        /// <summary>Can't create a module reference to an assembly.</summary>
        internal static string @CantCreateModuleReferenceToAssembly => GetResourceString("CantCreateModuleReferenceToAssembly");
        /// <summary>Can't create a metadata reference to a dynamic assembly.</summary>
        internal static string @CantCreateReferenceToDynamicAssembly => GetResourceString("CantCreateReferenceToDynamicAssembly");
        /// <summary>Can't create a metadata reference to an assembly without location.</summary>
        internal static string @CantCreateReferenceToAssemblyWithoutLocation => GetResourceString("CantCreateReferenceToAssemblyWithoutLocation");
        /// <summary>Argument cannot be empty.</summary>
        internal static string @ArgumentCannotBeEmpty => GetResourceString("ArgumentCannotBeEmpty");
        /// <summary>Argument cannot have a null element.</summary>
        internal static string @ArgumentElementCannotBeNull => GetResourceString("ArgumentElementCannotBeNull");
        /// <summary>Analyzer attempted to register an 'async' action, which is not supported.</summary>
        internal static string @AsyncAnalyzerActionCannotBeRegistered => GetResourceString("AsyncAnalyzerActionCannotBeRegistered");
        /// <summary>Reported diagnostic with ID '{0}' is not supported by the analyzer.</summary>
        internal static string @UnsupportedDiagnosticReported => GetResourceString("UnsupportedDiagnosticReported");
        /// <summary>Reported suppression with ID '{0}' is not supported by the suppressor.</summary>
        internal static string @UnsupportedSuppressionReported => GetResourceString("UnsupportedSuppressionReported");
        /// <summary>Suppressed diagnostic ID '{0}' does not match suppressable ID '{1}' for the given suppression descriptor.</summary>
        internal static string @InvalidDiagnosticSuppressionReported => GetResourceString("InvalidDiagnosticSuppressionReported");
        /// <summary>Non-reported diagnostic with ID '{0}' cannot be suppressed.</summary>
        internal static string @NonReportedDiagnosticCannotBeSuppressed => GetResourceString("NonReportedDiagnosticCannotBeSuppressed");
        /// <summary>Reported diagnostic has an ID '{0}', which is not a valid identifier.</summary>
        internal static string @InvalidDiagnosticIdReported => GetResourceString("InvalidDiagnosticIdReported");
        /// <summary>Reported diagnostic '{0}' has a source location in file '{1}', which is not part of the compilation being analyzed.</summary>
        internal static string @InvalidDiagnosticLocationReported => GetResourceString("InvalidDiagnosticLocationReported");
        /// <summary>Analyzer '{0}' contains a null descriptor in its 'SupportedDiagnostics'.</summary>
        internal static string @SupportedDiagnosticsHasNullDescriptor => GetResourceString("SupportedDiagnosticsHasNullDescriptor");
        /// <summary>Analyzer '{0}' contains a null descriptor in its 'SupportedSuppressions'.</summary>
        internal static string @SupportedSuppressionsHasNullDescriptor => GetResourceString("SupportedSuppressionsHasNullDescriptor");
        /// <summary>The type '{0}' is not understood by the serialization binder.</summary>
        internal static string @The_type_0_is_not_understood_by_the_serialization_binder => GetResourceString("The_type_0_is_not_understood_by_the_serialization_binder");
        /// <summary>Cannot deserialize type '{0}'.</summary>
        internal static string @Cannot_deserialize_type_0 => GetResourceString("Cannot_deserialize_type_0");
        /// <summary>Cannot serialize type '{0}'.</summary>
        internal static string @Cannot_serialize_type_0 => GetResourceString("Cannot_serialize_type_0");
        /// <summary>Node to track is not a descendant of the root.</summary>
        internal static string @InvalidNodeToTrack => GetResourceString("InvalidNodeToTrack");
        /// <summary>A node or token is out of sequence.</summary>
        internal static string @NodeOrTokenOutOfSequence => GetResourceString("NodeOrTokenOutOfSequence");
        /// <summary>A node in the list is not of the expected type.</summary>
        internal static string @UnexpectedTypeOfNodeInList => GetResourceString("UnexpectedTypeOfNodeInList");
        /// <summary>The item specified is not the element of a list.</summary>
        internal static string @MissingListItem => GetResourceString("MissingListItem");
        /// <summary>Invalid public key.</summary>
        internal static string @InvalidPublicKey => GetResourceString("InvalidPublicKey");
        /// <summary>Invalid public key token.</summary>
        internal static string @InvalidPublicKeyToken => GetResourceString("InvalidPublicKeyToken");
        /// <summary>Invalid data at offset {0}: {1}{2}*{3}{4}</summary>
        internal static string @InvalidDataAtOffset => GetResourceString("InvalidDataAtOffset");
        /// <summary>Windows PDB writer doesn't support deterministic compilation: '{0}'</summary>
        internal static string @SymWriterNotDeterministic => GetResourceString("SymWriterNotDeterministic");
        /// <summary>The version of Windows PDB writer is older than required: '{0}'</summary>
        internal static string @SymWriterOlderVersionThanRequired => GetResourceString("SymWriterOlderVersionThanRequired");
        /// <summary>Windows PDB writer doesn't support SourceLink feature: '{0}'</summary>
        internal static string @SymWriterDoesNotSupportSourceLink => GetResourceString("SymWriterDoesNotSupportSourceLink");
        /// <summary>The attribute {0} has an invalid value of {1}.</summary>
        internal static string @RuleSetBadAttributeValue => GetResourceString("RuleSetBadAttributeValue");
        /// <summary>The element {0} is missing an attribute named {1}.</summary>
        internal static string @RuleSetMissingAttribute => GetResourceString("RuleSetMissingAttribute");
        /// <summary>Argument to '/keepalive' option is not a 32-bit integer.</summary>
        internal static string @KeepAliveIsNotAnInteger => GetResourceString("KeepAliveIsNotAnInteger");
        /// <summary>Arguments to '/keepalive' option below -1 are invalid.</summary>
        internal static string @KeepAliveIsTooSmall => GetResourceString("KeepAliveIsTooSmall");
        /// <summary>'/keepalive' option is only valid with '/shared' option.</summary>
        internal static string @KeepAliveWithoutShared => GetResourceString("KeepAliveWithoutShared");
        /// <summary>Roslyn compiler server reports different protocol version than build task.</summary>
        internal static string @MismatchedVersion => GetResourceString("MismatchedVersion");
        /// <summary>Missing argument for '/keepalive' option.</summary>
        internal static string @MissingKeepAlive => GetResourceString("MissingKeepAlive");
        /// <summary>Total analyzer execution time: {0} seconds.</summary>
        internal static string @AnalyzerTotalExecutionTime => GetResourceString("AnalyzerTotalExecutionTime");
        /// <summary>NOTE: Elapsed time may be less than analyzer execution time because analyzers can run concurrently.</summary>
        internal static string @MultithreadedAnalyzerExecutionNote => GetResourceString("MultithreadedAnalyzerExecutionNote");
        /// <summary>Time (s)</summary>
        internal static string @AnalyzerExecutionTimeColumnHeader => GetResourceString("AnalyzerExecutionTimeColumnHeader");
        /// <summary>Analyzer</summary>
        internal static string @AnalyzerNameColumnHeader => GetResourceString("AnalyzerNameColumnHeader");
        /// <summary>No analyzers found</summary>
        internal static string @NoAnalyzersFound => GetResourceString("NoAnalyzersFound");
        /// <summary>Argument contains duplicate analyzer instances.</summary>
        internal static string @DuplicateAnalyzerInstances => GetResourceString("DuplicateAnalyzerInstances");
        /// <summary>Argument contains an analyzer instance that does not belong to the 'Analyzers' for this CompilationWithAnalyzers instance.</summary>
        internal static string @UnsupportedAnalyzerInstance => GetResourceString("UnsupportedAnalyzerInstance");
        /// <summary>Syntax tree doesn't belong to the underlying 'Compilation'.</summary>
        internal static string @InvalidTree => GetResourceString("InvalidTree");
        /// <summary>Additional file doesn't belong to the underlying 'CompilationWithAnalyzers'.</summary>
        internal static string @InvalidAdditionalFile => GetResourceString("InvalidAdditionalFile");
        /// <summary>Resource stream ended at {0} bytes, expected {1} bytes.</summary>
        internal static string @ResourceStreamEndedUnexpectedly => GetResourceString("ResourceStreamEndedUnexpectedly");
        /// <summary>Value for argument '/shared:' must not be empty</summary>
        internal static string @SharedArgumentMissing => GetResourceString("SharedArgumentMissing");
        /// <summary>Exception occurred with following context:
        /// {0}</summary>
        internal static string @ExceptionContext => GetResourceString("ExceptionContext");
        /// <summary>{0} and {1} must have the same length.</summary>
        internal static string @AnonymousTypeMemberAndNamesCountMismatch2 => GetResourceString("AnonymousTypeMemberAndNamesCountMismatch2");
        /// <summary>{0} must either be 'default' or have the same length as {1}.</summary>
        internal static string @AnonymousTypeArgumentCountMismatch2 => GetResourceString("AnonymousTypeArgumentCountMismatch2");
        /// <summary>Inconsistent syntax tree features</summary>
        internal static string @InconsistentSyntaxTreeFeature => GetResourceString("InconsistentSyntaxTreeFeature");
        /// <summary>Reference of type '{0}' is not valid for this compilation.</summary>
        internal static string @ReferenceOfTypeIsInvalid1 => GetResourceString("ReferenceOfTypeIsInvalid1");
        /// <summary>MetadataReference '{0}' not found to remove.</summary>
        internal static string @MetadataRefNotFoundToRemove1 => GetResourceString("MetadataRefNotFoundToRemove1");
        /// <summary>If tuple element names are specified, the number of element names must match the cardinality of the tuple.</summary>
        internal static string @TupleElementNameCountMismatch => GetResourceString("TupleElementNameCountMismatch");
        /// <summary>Tuple element name cannot be an empty string.</summary>
        internal static string @TupleElementNameEmpty => GetResourceString("TupleElementNameEmpty");
        /// <summary>If tuple element locations are specified, the number of locations must match the cardinality of the tuple.</summary>
        internal static string @TupleElementLocationCountMismatch => GetResourceString("TupleElementLocationCountMismatch");
        /// <summary>If tuple element nullable annotations are specified, the number of annotations must match the cardinality of the tuple.</summary>
        internal static string @TupleElementNullableAnnotationCountMismatch => GetResourceString("TupleElementNullableAnnotationCountMismatch");
        /// <summary>Tuples must have at least two elements.</summary>
        internal static string @TuplesNeedAtLeastTwoElements => GetResourceString("TuplesNeedAtLeastTwoElements");
        /// <summary>The compilation references multiple assemblies whose versions only differ in auto-generated build and/or revision numbers.</summary>
        internal static string @CompilationReferencesAssembliesWithDifferentAutoGeneratedVersion => GetResourceString("CompilationReferencesAssembliesWithDifferentAutoGeneratedVersion");
        /// <summary>The underlying type for a tuple must be tuple-compatible.</summary>
        internal static string @TupleUnderlyingTypeMustBeTupleCompatible => GetResourceString("TupleUnderlyingTypeMustBeTupleCompatible");
        /// <summary>Unrecognized resource file format.</summary>
        internal static string @UnrecognizedResourceFileFormat => GetResourceString("UnrecognizedResourceFileFormat");
        /// <summary>SourceText cannot be embedded. Provide encoding or canBeEmbedded=true at construction.</summary>
        internal static string @SourceTextCannotBeEmbedded => GetResourceString("SourceTextCannotBeEmbedded");
        /// <summary>Stream is too long.</summary>
        internal static string @StreamIsTooLong => GetResourceString("StreamIsTooLong");
        /// <summary>Embedded texts are only supported when emitting a PDB.</summary>
        internal static string @EmbeddedTextsRequirePdb => GetResourceString("EmbeddedTextsRequirePdb");
        /// <summary>The stream cannot be written to.</summary>
        internal static string @TheStreamCannotBeWrittenTo => GetResourceString("TheStreamCannotBeWrittenTo");
        /// <summary>element is expected</summary>
        internal static string @ElementIsExpected => GetResourceString("ElementIsExpected");
        /// <summary>separator is expected</summary>
        internal static string @SeparatorIsExpected => GetResourceString("SeparatorIsExpected");
        /// <summary>The stream cannot be read from.</summary>
        internal static string @TheStreamCannotBeReadFrom => GetResourceString("TheStreamCannotBeReadFrom");
        /// <summary>Deserialization reader for '{0}' read incorrect number of values.</summary>
        internal static string @Deserialization_reader_for_0_read_incorrect_number_of_values => GetResourceString("Deserialization_reader_for_0_read_incorrect_number_of_values");
        /// <summary>Stream contains invalid data</summary>
        internal static string @Stream_contains_invalid_data => GetResourceString("Stream_contains_invalid_data");
        /// <summary>Reported diagnostic '{0}' has a source location '{1}' in file '{2}', which is outside of the given file.</summary>
        internal static string @InvalidDiagnosticSpanReported => GetResourceString("InvalidDiagnosticSpanReported");
        /// <summary>Warning: Could not enable multicore JIT due to exception: {0}.</summary>
        internal static string @ExceptionEnablingMulticoreJit => GetResourceString("ExceptionEnablingMulticoreJit");
        /// <summary>Given operation has a non-null parent.</summary>
        internal static string @NotARootOperation => GetResourceString("NotARootOperation");
        /// <summary>Given operation has a null semantic model.</summary>
        internal static string @OperationHasNullSemanticModel => GetResourceString("OperationHasNullSemanticModel");
        /// <summary>Given operation block does not belong to the current analysis context.</summary>
        internal static string @InvalidOperationBlockForAnalysisContext => GetResourceString("InvalidOperationBlockForAnalysisContext");
        /// <summary>Parameter '{0}' must be an 'INamedTypeSymbol' or an 'IAssemblySymbol'.</summary>
        internal static string @IsSymbolAccessibleBadWithin => GetResourceString("IsSymbolAccessibleBadWithin");
        /// <summary>Parameter '{0}' must be a symbol from this compilation or some referenced assembly.</summary>
        internal static string @IsSymbolAccessibleWrongAssembly => GetResourceString("IsSymbolAccessibleWrongAssembly");
        /// <summary>The provided operation must not be part of a Control Flow Graph.</summary>
        internal static string @OperationMustNotBeControlFlowGraphPart => GetResourceString("OperationMustNotBeControlFlowGraphPart");
        /// <summary>A language name cannot be specified for this option.</summary>
        internal static string @A_language_name_cannot_be_specified_for_this_option => GetResourceString("A_language_name_cannot_be_specified_for_this_option");
        /// <summary>A language name must be specified for this option.</summary>
        internal static string @A_language_name_must_be_specified_for_this_option => GetResourceString("A_language_name_must_be_specified_for_this_option");
        /// <summary>The diagnostic '{0}' was given an invalid severity '{1}' in the analyzer config file at '{2}'.</summary>
        internal static string @WRN_InvalidSeverityInAnalyzerConfig => GetResourceString("WRN_InvalidSeverityInAnalyzerConfig");
        /// <summary>Invalid severity in analyzer config file.</summary>
        internal static string @WRN_InvalidSeverityInAnalyzerConfig_Title => GetResourceString("WRN_InvalidSeverityInAnalyzerConfig_Title");
        /// <summary>Programmatic suppression of an analyzer diagnostic</summary>
        internal static string @SuppressionDiagnosticDescriptorTitle => GetResourceString("SuppressionDiagnosticDescriptorTitle");
        /// <summary>Diagnostic '{0}: {1}' was programmatically suppressed by a DiagnosticSuppressor with suppression ID '{2}' and justification '{3}'</summary>
        internal static string @SuppressionDiagnosticDescriptorMessage => GetResourceString("SuppressionDiagnosticDescriptorMessage");
        /// <summary>Module has invalid attributes.</summary>
        internal static string @ModuleHasInvalidAttributes => GetResourceString("ModuleHasInvalidAttributes");
        /// <summary>Unable to determine specific cause of the failure.</summary>
        internal static string @UnableToDetermineSpecificCauseOfFailure => GetResourceString("UnableToDetermineSpecificCauseOfFailure");
        /// <summary>Changing the version of an assembly reference is not allowed during debugging: '{0}' changed version to '{1}'.</summary>
        internal static string @ChangingVersionOfAssemblyReferenceIsNotAllowedDuringDebugging => GetResourceString("ChangingVersionOfAssemblyReferenceIsNotAllowedDuringDebugging");
        /// <summary>Suppress the following diagnostics to disable this analyzer: {0}</summary>
        internal static string @DisableAnalyzerDiagnosticsMessage => GetResourceString("DisableAnalyzerDiagnosticsMessage");
        /// <summary>Only a single {0} can be registered per generator.</summary>
        internal static string @Single_type_per_generator_0 => GetResourceString("Single_type_per_generator_0");
        /// <summary>Multiple global analyzer config files set the same key '{0}' in section '{1}'. It has been unset. Key was set by the following files: '{2}'</summary>
        internal static string @WRN_MultipleGlobalAnalyzerKeys => GetResourceString("WRN_MultipleGlobalAnalyzerKeys");
        /// <summary>Multiple global analyzer config files set the same key. It has been unset.</summary>
        internal static string @WRN_MultipleGlobalAnalyzerKeys_Title => GetResourceString("WRN_MultipleGlobalAnalyzerKeys_Title");
        /// <summary>The hintName of the added source file must be unique within a generator.</summary>
        internal static string @HintNameUniquePerGenerator => GetResourceString("HintNameUniquePerGenerator");
        /// <summary>The hintName contains an invalid character '{0}' at position {1}.</summary>
        internal static string @HintNameInvalidChar => GetResourceString("HintNameInvalidChar");
        /// <summary>The provided SourceText must have an explicit encoding set.</summary>
        internal static string @SourceTextRequiresEncoding => GetResourceString("SourceTextRequiresEncoding");
        /// <summary>The assembly containing type '{0}' references .NET Framework, which is not supported.</summary>
        internal static string @AssemblyReferencesNetFramework => GetResourceString("AssemblyReferencesNetFramework");
        /// <summary>Global analyzer config section name '{0}' is invalid as it is not an absolute path. Section will be ignored. Section was declared in file: '{1}'</summary>
        internal static string @WRN_InvalidGlobalSectionName => GetResourceString("WRN_InvalidGlobalSectionName");
        /// <summary>Global analyzer config section name is invalid as it is not an absolute path. Section will be ignored.</summary>
        internal static string @WRN_InvalidGlobalSectionName_Title => GetResourceString("WRN_InvalidGlobalSectionName_Title");
        /// <summary>Changes must be within bounds of SourceText</summary>
        internal static string @ChangesMustBeWithinBoundsOfSourceText => GetResourceString("ChangesMustBeWithinBoundsOfSourceText");
        internal static string @Credits => GetResourceString("Credits");

    }
}
